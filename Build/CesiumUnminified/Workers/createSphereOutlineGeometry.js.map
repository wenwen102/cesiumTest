{"version":3,"file":"createSphereOutlineGeometry.js","sources":["../../../packages/engine/Source/Core/SphereOutlineGeometry.js","../../../packages/engine/Source/WorkersES6/createSphereOutlineGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport EllipsoidOutlineGeometry from \"./EllipsoidOutlineGeometry.js\";\r\n\r\n/**\r\n * A description of the outline of a sphere.\r\n *\r\n * @alias SphereOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} [options] Object with the following properties:\r\n * @param {Number} [options.radius=1.0] The radius of the sphere.\r\n * @param {Number} [options.stackPartitions=10] The count of stacks for the sphere (1 greater than the number of parallel lines).\r\n * @param {Number} [options.slicePartitions=8] The count of slices for the sphere (Equal to the number of radial lines).\r\n * @param {Number} [options.subdivisions=200] The number of points per line, determining the granularity of the curvature .\r\n *\r\n * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\r\n * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\r\n * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\r\n *\r\n * @example\r\n * const sphere = new Cesium.SphereOutlineGeometry({\r\n *   radius : 100.0,\r\n *   stackPartitions : 6,\r\n *   slicePartitions: 5\r\n * });\r\n * const geometry = Cesium.SphereOutlineGeometry.createGeometry(sphere);\r\n */\r\nfunction SphereOutlineGeometry(options) {\r\n  const radius = defaultValue(options.radius, 1.0);\r\n  const radii = new Cartesian3(radius, radius, radius);\r\n  const ellipsoidOptions = {\r\n    radii: radii,\r\n    stackPartitions: options.stackPartitions,\r\n    slicePartitions: options.slicePartitions,\r\n    subdivisions: options.subdivisions,\r\n  };\r\n\r\n  this._ellipsoidGeometry = new EllipsoidOutlineGeometry(ellipsoidOptions);\r\n  this._workerName = \"createSphereOutlineGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nSphereOutlineGeometry.packedLength = EllipsoidOutlineGeometry.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {SphereOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nSphereOutlineGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  //>>includeEnd('debug');\r\n\r\n  return EllipsoidOutlineGeometry.pack(\r\n    value._ellipsoidGeometry,\r\n    array,\r\n    startingIndex\r\n  );\r\n};\r\n\r\nconst scratchEllipsoidGeometry = new EllipsoidOutlineGeometry();\r\nconst scratchOptions = {\r\n  radius: undefined,\r\n  radii: new Cartesian3(),\r\n  stackPartitions: undefined,\r\n  slicePartitions: undefined,\r\n  subdivisions: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {SphereOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {SphereOutlineGeometry} The modified result parameter or a new SphereOutlineGeometry instance if one was not provided.\r\n */\r\nSphereOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n  const ellipsoidGeometry = EllipsoidOutlineGeometry.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchEllipsoidGeometry\r\n  );\r\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\r\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\r\n  scratchOptions.subdivisions = ellipsoidGeometry._subdivisions;\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\r\n    return new SphereOutlineGeometry(scratchOptions);\r\n  }\r\n\r\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\r\n  result._ellipsoidGeometry = new EllipsoidOutlineGeometry(scratchOptions);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an outline of a sphere, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {SphereOutlineGeometry} sphereGeometry A description of the sphere outline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nSphereOutlineGeometry.createGeometry = function (sphereGeometry) {\r\n  return EllipsoidOutlineGeometry.createGeometry(\r\n    sphereGeometry._ellipsoidGeometry\r\n  );\r\n};\r\nexport default SphereOutlineGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport SphereOutlineGeometry from \"../Core/SphereOutlineGeometry.js\";\r\n\r\nfunction createSphereOutlineGeometry(sphereGeometry, offset) {\r\n  if (defined(offset)) {\r\n    sphereGeometry = SphereOutlineGeometry.unpack(sphereGeometry, offset);\r\n  }\r\n  return SphereOutlineGeometry.createGeometry(sphereGeometry);\r\n}\r\nexport default createSphereOutlineGeometry;\r\n"],"names":["defaultValue","Cartesian3","EllipsoidOutlineGeometry","Check","defined"],"mappings":"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"}