{"version":3,"file":"PolygonGeometryLibrary-ea6476da.js","sources":["../../../packages/engine/Source/Core/Queue.js","../../../packages/engine/Source/Core/PolygonGeometryLibrary.js"],"sourcesContent":["/**\r\n * A queue that can enqueue items at the end, and dequeue items from the front.\r\n *\r\n * @alias Queue\r\n * @constructor\r\n */\r\nfunction Queue() {\r\n  this._array = [];\r\n  this._offset = 0;\r\n  this._length = 0;\r\n}\r\n\r\nObject.defineProperties(Queue.prototype, {\r\n  /**\r\n   * The length of the queue.\r\n   *\r\n   * @memberof Queue.prototype\r\n   *\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  length: {\r\n    get: function () {\r\n      return this._length;\r\n    },\r\n  },\r\n});\r\n\r\n/**\r\n * Enqueues the specified item.\r\n *\r\n * @param {*} item The item to enqueue.\r\n */\r\nQueue.prototype.enqueue = function (item) {\r\n  this._array.push(item);\r\n  this._length++;\r\n};\r\n\r\n/**\r\n * Dequeues an item.  Returns undefined if the queue is empty.\r\n *\r\n * @returns {*} The the dequeued item.\r\n */\r\nQueue.prototype.dequeue = function () {\r\n  if (this._length === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  const array = this._array;\r\n  let offset = this._offset;\r\n  const item = array[offset];\r\n  array[offset] = undefined;\r\n\r\n  offset++;\r\n  if (offset > 10 && offset * 2 > array.length) {\r\n    //compact array\r\n    this._array = array.slice(offset);\r\n    offset = 0;\r\n  }\r\n\r\n  this._offset = offset;\r\n  this._length--;\r\n\r\n  return item;\r\n};\r\n\r\n/**\r\n * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\r\n *\r\n * @returns {*} The item at the front of the queue.\r\n */\r\nQueue.prototype.peek = function () {\r\n  if (this._length === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  return this._array[this._offset];\r\n};\r\n\r\n/**\r\n * Check whether this queue contains the specified item.\r\n *\r\n * @param {*} item The item to search for.\r\n */\r\nQueue.prototype.contains = function (item) {\r\n  return this._array.indexOf(item) !== -1;\r\n};\r\n\r\n/**\r\n * Remove all items from the queue.\r\n */\r\nQueue.prototype.clear = function () {\r\n  this._array.length = this._offset = this._length = 0;\r\n};\r\n\r\n/**\r\n * Sort the items in the queue in-place.\r\n *\r\n * @param {Queue.Comparator} compareFunction A function that defines the sort order.\r\n */\r\nQueue.prototype.sort = function (compareFunction) {\r\n  if (this._offset > 0) {\r\n    //compact array\r\n    this._array = this._array.slice(this._offset);\r\n    this._offset = 0;\r\n  }\r\n\r\n  this._array.sort(compareFunction);\r\n};\r\n\r\n/**\r\n * A function used to compare two items while sorting a queue.\r\n * @callback Queue.Comparator\r\n *\r\n * @param {*} a An item in the array.\r\n * @param {*} b An item in the array.\r\n * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\r\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\r\n *          0 if <code>a</code> is equal to <code>b</code>.\r\n *\r\n * @example\r\n * function compareNumbers(a, b) {\r\n *     return a - b;\r\n * }\r\n */\r\nexport default Queue;\r\n","import ArcType from \"./ArcType.js\";\r\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport EllipsoidRhumbLine from \"./EllipsoidRhumbLine.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryPipeline from \"./GeometryPipeline.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix3 from \"./Matrix3.js\";\r\nimport PolygonPipeline from \"./PolygonPipeline.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport Quaternion from \"./Quaternion.js\";\r\nimport Queue from \"./Queue.js\";\r\nimport WindingOrder from \"./WindingOrder.js\";\r\n\r\n/**\r\n * @private\r\n */\r\nconst PolygonGeometryLibrary = {};\r\n\r\nPolygonGeometryLibrary.computeHierarchyPackedLength = function (\r\n  polygonHierarchy,\r\n  CartesianX\r\n) {\r\n  let numComponents = 0;\r\n  const stack = [polygonHierarchy];\r\n  while (stack.length > 0) {\r\n    const hierarchy = stack.pop();\r\n    if (!defined(hierarchy)) {\r\n      continue;\r\n    }\r\n\r\n    numComponents += 2;\r\n\r\n    const positions = hierarchy.positions;\r\n    const holes = hierarchy.holes;\r\n\r\n    if (defined(positions) && positions.length > 0) {\r\n      numComponents += positions.length * CartesianX.packedLength;\r\n    }\r\n\r\n    if (defined(holes)) {\r\n      const length = holes.length;\r\n      for (let i = 0; i < length; ++i) {\r\n        stack.push(holes[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return numComponents;\r\n};\r\n\r\nPolygonGeometryLibrary.packPolygonHierarchy = function (\r\n  polygonHierarchy,\r\n  array,\r\n  startingIndex,\r\n  CartesianX\r\n) {\r\n  const stack = [polygonHierarchy];\r\n  while (stack.length > 0) {\r\n    const hierarchy = stack.pop();\r\n    if (!defined(hierarchy)) {\r\n      continue;\r\n    }\r\n\r\n    const positions = hierarchy.positions;\r\n    const holes = hierarchy.holes;\r\n\r\n    array[startingIndex++] = defined(positions) ? positions.length : 0;\r\n    array[startingIndex++] = defined(holes) ? holes.length : 0;\r\n\r\n    if (defined(positions)) {\r\n      const positionsLength = positions.length;\r\n      for (\r\n        let i = 0;\r\n        i < positionsLength;\r\n        ++i, startingIndex += CartesianX.packedLength\r\n      ) {\r\n        CartesianX.pack(positions[i], array, startingIndex);\r\n      }\r\n    }\r\n\r\n    if (defined(holes)) {\r\n      const holesLength = holes.length;\r\n      for (let j = 0; j < holesLength; ++j) {\r\n        stack.push(holes[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return startingIndex;\r\n};\r\n\r\nPolygonGeometryLibrary.unpackPolygonHierarchy = function (\r\n  array,\r\n  startingIndex,\r\n  CartesianX\r\n) {\r\n  const positionsLength = array[startingIndex++];\r\n  const holesLength = array[startingIndex++];\r\n\r\n  const positions = new Array(positionsLength);\r\n  const holes = holesLength > 0 ? new Array(holesLength) : undefined;\r\n\r\n  for (\r\n    let i = 0;\r\n    i < positionsLength;\r\n    ++i, startingIndex += CartesianX.packedLength\r\n  ) {\r\n    positions[i] = CartesianX.unpack(array, startingIndex);\r\n  }\r\n\r\n  for (let j = 0; j < holesLength; ++j) {\r\n    holes[j] = PolygonGeometryLibrary.unpackPolygonHierarchy(\r\n      array,\r\n      startingIndex,\r\n      CartesianX\r\n    );\r\n    startingIndex = holes[j].startingIndex;\r\n    delete holes[j].startingIndex;\r\n  }\r\n\r\n  return {\r\n    positions: positions,\r\n    holes: holes,\r\n    startingIndex: startingIndex,\r\n  };\r\n};\r\n\r\nconst distance2DScratch = new Cartesian2();\r\nfunction getPointAtDistance2D(p0, p1, distance, length) {\r\n  Cartesian2.subtract(p1, p0, distance2DScratch);\r\n  Cartesian2.multiplyByScalar(\r\n    distance2DScratch,\r\n    distance / length,\r\n    distance2DScratch\r\n  );\r\n  Cartesian2.add(p0, distance2DScratch, distance2DScratch);\r\n  return [distance2DScratch.x, distance2DScratch.y];\r\n}\r\n\r\nconst distanceScratch = new Cartesian3();\r\nfunction getPointAtDistance(p0, p1, distance, length) {\r\n  Cartesian3.subtract(p1, p0, distanceScratch);\r\n  Cartesian3.multiplyByScalar(\r\n    distanceScratch,\r\n    distance / length,\r\n    distanceScratch\r\n  );\r\n  Cartesian3.add(p0, distanceScratch, distanceScratch);\r\n  return [distanceScratch.x, distanceScratch.y, distanceScratch.z];\r\n}\r\n\r\nPolygonGeometryLibrary.subdivideLineCount = function (p0, p1, minDistance) {\r\n  const distance = Cartesian3.distance(p0, p1);\r\n  const n = distance / minDistance;\r\n  const countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\r\n  return Math.pow(2, countDivide);\r\n};\r\n\r\nconst scratchCartographic0 = new Cartographic();\r\nconst scratchCartographic1 = new Cartographic();\r\nconst scratchCartographic2 = new Cartographic();\r\nconst scratchCartesian0 = new Cartesian3();\r\nconst scratchRhumbLine = new EllipsoidRhumbLine();\r\nPolygonGeometryLibrary.subdivideRhumbLineCount = function (\r\n  ellipsoid,\r\n  p0,\r\n  p1,\r\n  minDistance\r\n) {\r\n  const c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\r\n  const c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\r\n  const rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\r\n  const n = rhumb.surfaceDistance / minDistance;\r\n  const countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\r\n  return Math.pow(2, countDivide);\r\n};\r\n\r\n/**\r\n * Subdivides texture coordinates based on the subdivision of the associated world positions.\r\n *\r\n * @param {Cartesian2} t0 First texture coordinate.\r\n * @param {Cartesian2} t1 Second texture coordinate.\r\n * @param {Cartesian3} p0 First world position.\r\n * @param {Cartesian3} p1 Second world position.\r\n * @param {Number} minDistance Minimum distance for a segment.\r\n * @param {Array<Cartesian2>} result The subdivided texture coordinates.\r\n *\r\n * @private\r\n */\r\nPolygonGeometryLibrary.subdivideTexcoordLine = function (\r\n  t0,\r\n  t1,\r\n  p0,\r\n  p1,\r\n  minDistance,\r\n  result\r\n) {\r\n  // Compute the number of subdivisions.\r\n  const subdivisions = PolygonGeometryLibrary.subdivideLineCount(\r\n    p0,\r\n    p1,\r\n    minDistance\r\n  );\r\n\r\n  // Compute the distance between each subdivided point.\r\n  const length2D = Cartesian2.distance(t0, t1);\r\n  const distanceBetweenCoords = length2D / subdivisions;\r\n\r\n  // Resize the result array.\r\n  const texcoords = result;\r\n  texcoords.length = subdivisions * 2;\r\n\r\n  // Compute texture coordinates using linear interpolation.\r\n  let index = 0;\r\n  for (let i = 0; i < subdivisions; i++) {\r\n    const t = getPointAtDistance2D(t0, t1, i * distanceBetweenCoords, length2D);\r\n    texcoords[index++] = t[0];\r\n    texcoords[index++] = t[1];\r\n  }\r\n\r\n  return texcoords;\r\n};\r\n\r\nPolygonGeometryLibrary.subdivideLine = function (p0, p1, minDistance, result) {\r\n  const numVertices = PolygonGeometryLibrary.subdivideLineCount(\r\n    p0,\r\n    p1,\r\n    minDistance\r\n  );\r\n  const length = Cartesian3.distance(p0, p1);\r\n  const distanceBetweenVertices = length / numVertices;\r\n\r\n  if (!defined(result)) {\r\n    result = [];\r\n  }\r\n\r\n  const positions = result;\r\n  positions.length = numVertices * 3;\r\n\r\n  let index = 0;\r\n  for (let i = 0; i < numVertices; i++) {\r\n    const p = getPointAtDistance(p0, p1, i * distanceBetweenVertices, length);\r\n    positions[index++] = p[0];\r\n    positions[index++] = p[1];\r\n    positions[index++] = p[2];\r\n  }\r\n\r\n  return positions;\r\n};\r\n\r\n/**\r\n * Subdivides texture coordinates based on the subdivision of the associated world positions using a rhumb line.\r\n *\r\n * @param {Cartesian2} t0 First texture coordinate.\r\n * @param {Cartesian2} t1 Second texture coordinate.\r\n * @param {Ellipsoid} ellipsoid The ellipsoid.\r\n * @param {Cartesian3} p0 First world position.\r\n * @param {Cartesian3} p1 Second world position.\r\n * @param {Number} minDistance Minimum distance for a segment.\r\n * @param {Array<Cartesian2>} result The subdivided texture coordinates.\r\n *\r\n * @private\r\n */\r\nPolygonGeometryLibrary.subdivideTexcoordRhumbLine = function (\r\n  t0,\r\n  t1,\r\n  ellipsoid,\r\n  p0,\r\n  p1,\r\n  minDistance,\r\n  result\r\n) {\r\n  // Compute the surface distance.\r\n  const c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\r\n  const c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\r\n  scratchRhumbLine.setEndPoints(c0, c1);\r\n  const n = scratchRhumbLine.surfaceDistance / minDistance;\r\n\r\n  // Compute the number of subdivisions.\r\n  const countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\r\n  const subdivisions = Math.pow(2, countDivide);\r\n\r\n  // Compute the distance between each subdivided point.\r\n  const length2D = Cartesian2.distance(t0, t1);\r\n  const distanceBetweenCoords = length2D / subdivisions;\r\n\r\n  // Resize the result array.\r\n  const texcoords = result;\r\n  texcoords.length = subdivisions * 2;\r\n\r\n  // Compute texture coordinates using linear interpolation.\r\n  let index = 0;\r\n  for (let i = 0; i < subdivisions; i++) {\r\n    const t = getPointAtDistance2D(t0, t1, i * distanceBetweenCoords, length2D);\r\n    texcoords[index++] = t[0];\r\n    texcoords[index++] = t[1];\r\n  }\r\n\r\n  return texcoords;\r\n};\r\n\r\nPolygonGeometryLibrary.subdivideRhumbLine = function (\r\n  ellipsoid,\r\n  p0,\r\n  p1,\r\n  minDistance,\r\n  result\r\n) {\r\n  const c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\r\n  const c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\r\n  const rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\r\n\r\n  const n = rhumb.surfaceDistance / minDistance;\r\n  const countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\r\n  const numVertices = Math.pow(2, countDivide);\r\n  const distanceBetweenVertices = rhumb.surfaceDistance / numVertices;\r\n\r\n  if (!defined(result)) {\r\n    result = [];\r\n  }\r\n\r\n  const positions = result;\r\n  positions.length = numVertices * 3;\r\n\r\n  let index = 0;\r\n  for (let i = 0; i < numVertices; i++) {\r\n    const c = rhumb.interpolateUsingSurfaceDistance(\r\n      i * distanceBetweenVertices,\r\n      scratchCartographic2\r\n    );\r\n    const p = ellipsoid.cartographicToCartesian(c, scratchCartesian0);\r\n    positions[index++] = p.x;\r\n    positions[index++] = p.y;\r\n    positions[index++] = p.z;\r\n  }\r\n\r\n  return positions;\r\n};\r\n\r\nconst scaleToGeodeticHeightN1 = new Cartesian3();\r\nconst scaleToGeodeticHeightN2 = new Cartesian3();\r\nconst scaleToGeodeticHeightP1 = new Cartesian3();\r\nconst scaleToGeodeticHeightP2 = new Cartesian3();\r\n\r\nPolygonGeometryLibrary.scaleToGeodeticHeightExtruded = function (\r\n  geometry,\r\n  maxHeight,\r\n  minHeight,\r\n  ellipsoid,\r\n  perPositionHeight\r\n) {\r\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n  const n1 = scaleToGeodeticHeightN1;\r\n  let n2 = scaleToGeodeticHeightN2;\r\n  const p = scaleToGeodeticHeightP1;\r\n  let p2 = scaleToGeodeticHeightP2;\r\n\r\n  if (\r\n    defined(geometry) &&\r\n    defined(geometry.attributes) &&\r\n    defined(geometry.attributes.position)\r\n  ) {\r\n    const positions = geometry.attributes.position.values;\r\n    const length = positions.length / 2;\r\n\r\n    for (let i = 0; i < length; i += 3) {\r\n      Cartesian3.fromArray(positions, i, p);\r\n\r\n      ellipsoid.geodeticSurfaceNormal(p, n1);\r\n      p2 = ellipsoid.scaleToGeodeticSurface(p, p2);\r\n      n2 = Cartesian3.multiplyByScalar(n1, minHeight, n2);\r\n      n2 = Cartesian3.add(p2, n2, n2);\r\n      positions[i + length] = n2.x;\r\n      positions[i + 1 + length] = n2.y;\r\n      positions[i + 2 + length] = n2.z;\r\n\r\n      if (perPositionHeight) {\r\n        p2 = Cartesian3.clone(p, p2);\r\n      }\r\n      n2 = Cartesian3.multiplyByScalar(n1, maxHeight, n2);\r\n      n2 = Cartesian3.add(p2, n2, n2);\r\n      positions[i] = n2.x;\r\n      positions[i + 1] = n2.y;\r\n      positions[i + 2] = n2.z;\r\n    }\r\n  }\r\n  return geometry;\r\n};\r\n\r\nPolygonGeometryLibrary.polygonOutlinesFromHierarchy = function (\r\n  polygonHierarchy,\r\n  scaleToEllipsoidSurface,\r\n  ellipsoid\r\n) {\r\n  // create from a polygon hierarchy\r\n  // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\r\n  const polygons = [];\r\n  const queue = new Queue();\r\n  queue.enqueue(polygonHierarchy);\r\n  let i;\r\n  let j;\r\n  let length;\r\n  while (queue.length !== 0) {\r\n    const outerNode = queue.dequeue();\r\n    let outerRing = outerNode.positions;\r\n    if (scaleToEllipsoidSurface) {\r\n      length = outerRing.length;\r\n      for (i = 0; i < length; i++) {\r\n        ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\r\n      }\r\n    }\r\n    outerRing = arrayRemoveDuplicates(\r\n      outerRing,\r\n      Cartesian3.equalsEpsilon,\r\n      true\r\n    );\r\n    if (outerRing.length < 3) {\r\n      continue;\r\n    }\r\n\r\n    const numChildren = outerNode.holes ? outerNode.holes.length : 0;\r\n    // The outer polygon contains inner polygons\r\n    for (i = 0; i < numChildren; i++) {\r\n      const hole = outerNode.holes[i];\r\n      let holePositions = hole.positions;\r\n      if (scaleToEllipsoidSurface) {\r\n        length = holePositions.length;\r\n        for (j = 0; j < length; ++j) {\r\n          ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\r\n        }\r\n      }\r\n      holePositions = arrayRemoveDuplicates(\r\n        holePositions,\r\n        Cartesian3.equalsEpsilon,\r\n        true\r\n      );\r\n      if (holePositions.length < 3) {\r\n        continue;\r\n      }\r\n      polygons.push(holePositions);\r\n\r\n      let numGrandchildren = 0;\r\n      if (defined(hole.holes)) {\r\n        numGrandchildren = hole.holes.length;\r\n      }\r\n\r\n      for (j = 0; j < numGrandchildren; j++) {\r\n        queue.enqueue(hole.holes[j]);\r\n      }\r\n    }\r\n\r\n    polygons.push(outerRing);\r\n  }\r\n\r\n  return polygons;\r\n};\r\n\r\nPolygonGeometryLibrary.polygonsFromHierarchy = function (\r\n  polygonHierarchy,\r\n  keepDuplicates,\r\n  projectPointsTo2D,\r\n  scaleToEllipsoidSurface,\r\n  ellipsoid\r\n) {\r\n  // create from a polygon hierarchy\r\n  // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\r\n  const hierarchy = [];\r\n  const polygons = [];\r\n\r\n  const queue = new Queue();\r\n  queue.enqueue(polygonHierarchy);\r\n\r\n  while (queue.length !== 0) {\r\n    const outerNode = queue.dequeue();\r\n    let outerRing = outerNode.positions;\r\n    const holes = outerNode.holes;\r\n\r\n    let i;\r\n    let length;\r\n    if (scaleToEllipsoidSurface) {\r\n      length = outerRing.length;\r\n      for (i = 0; i < length; i++) {\r\n        ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\r\n      }\r\n    }\r\n\r\n    if (!keepDuplicates) {\r\n      outerRing = arrayRemoveDuplicates(\r\n        outerRing,\r\n        Cartesian3.equalsEpsilon,\r\n        true\r\n      );\r\n    }\r\n    if (outerRing.length < 3) {\r\n      continue;\r\n    }\r\n\r\n    let positions2D = projectPointsTo2D(outerRing);\r\n    if (!defined(positions2D)) {\r\n      continue;\r\n    }\r\n    const holeIndices = [];\r\n\r\n    let originalWindingOrder = PolygonPipeline.computeWindingOrder2D(\r\n      positions2D\r\n    );\r\n    if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n      positions2D.reverse();\r\n      outerRing = outerRing.slice().reverse();\r\n    }\r\n\r\n    let positions = outerRing.slice();\r\n    const numChildren = defined(holes) ? holes.length : 0;\r\n    const polygonHoles = [];\r\n    let j;\r\n\r\n    for (i = 0; i < numChildren; i++) {\r\n      const hole = holes[i];\r\n      let holePositions = hole.positions;\r\n      if (scaleToEllipsoidSurface) {\r\n        length = holePositions.length;\r\n        for (j = 0; j < length; ++j) {\r\n          ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\r\n        }\r\n      }\r\n\r\n      if (!keepDuplicates) {\r\n        holePositions = arrayRemoveDuplicates(\r\n          holePositions,\r\n          Cartesian3.equalsEpsilon,\r\n          true\r\n        );\r\n      }\r\n      if (holePositions.length < 3) {\r\n        continue;\r\n      }\r\n\r\n      const holePositions2D = projectPointsTo2D(holePositions);\r\n      if (!defined(holePositions2D)) {\r\n        continue;\r\n      }\r\n\r\n      originalWindingOrder = PolygonPipeline.computeWindingOrder2D(\r\n        holePositions2D\r\n      );\r\n      if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n        holePositions2D.reverse();\r\n        holePositions = holePositions.slice().reverse();\r\n      }\r\n\r\n      polygonHoles.push(holePositions);\r\n      holeIndices.push(positions.length);\r\n      positions = positions.concat(holePositions);\r\n      positions2D = positions2D.concat(holePositions2D);\r\n\r\n      let numGrandchildren = 0;\r\n      if (defined(hole.holes)) {\r\n        numGrandchildren = hole.holes.length;\r\n      }\r\n\r\n      for (j = 0; j < numGrandchildren; j++) {\r\n        queue.enqueue(hole.holes[j]);\r\n      }\r\n    }\r\n\r\n    hierarchy.push({\r\n      outerRing: outerRing,\r\n      holes: polygonHoles,\r\n    });\r\n    polygons.push({\r\n      positions: positions,\r\n      positions2D: positions2D,\r\n      holes: holeIndices,\r\n    });\r\n  }\r\n\r\n  return {\r\n    hierarchy: hierarchy,\r\n    polygons: polygons,\r\n  };\r\n};\r\n\r\nconst computeBoundingRectangleCartesian2 = new Cartesian2();\r\nconst computeBoundingRectangleCartesian3 = new Cartesian3();\r\nconst computeBoundingRectangleQuaternion = new Quaternion();\r\nconst computeBoundingRectangleMatrix3 = new Matrix3();\r\nPolygonGeometryLibrary.computeBoundingRectangle = function (\r\n  planeNormal,\r\n  projectPointTo2D,\r\n  positions,\r\n  angle,\r\n  result\r\n) {\r\n  const rotation = Quaternion.fromAxisAngle(\r\n    planeNormal,\r\n    angle,\r\n    computeBoundingRectangleQuaternion\r\n  );\r\n  const textureMatrix = Matrix3.fromQuaternion(\r\n    rotation,\r\n    computeBoundingRectangleMatrix3\r\n  );\r\n\r\n  let minX = Number.POSITIVE_INFINITY;\r\n  let maxX = Number.NEGATIVE_INFINITY;\r\n  let minY = Number.POSITIVE_INFINITY;\r\n  let maxY = Number.NEGATIVE_INFINITY;\r\n\r\n  const length = positions.length;\r\n  for (let i = 0; i < length; ++i) {\r\n    const p = Cartesian3.clone(\r\n      positions[i],\r\n      computeBoundingRectangleCartesian3\r\n    );\r\n    Matrix3.multiplyByVector(textureMatrix, p, p);\r\n    const st = projectPointTo2D(p, computeBoundingRectangleCartesian2);\r\n\r\n    if (defined(st)) {\r\n      minX = Math.min(minX, st.x);\r\n      maxX = Math.max(maxX, st.x);\r\n\r\n      minY = Math.min(minY, st.y);\r\n      maxY = Math.max(maxY, st.y);\r\n    }\r\n  }\r\n\r\n  result.x = minX;\r\n  result.y = minY;\r\n  result.width = maxX - minX;\r\n  result.height = maxY - minY;\r\n  return result;\r\n};\r\n\r\nPolygonGeometryLibrary.createGeometryFromPositions = function (\r\n  ellipsoid,\r\n  polygon,\r\n  textureCoordinates,\r\n  granularity,\r\n  perPositionHeight,\r\n  vertexFormat,\r\n  arcType\r\n) {\r\n  let indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\r\n\r\n  /* If polygon is completely unrenderable, just use the first three vertices */\r\n  if (indices.length < 3) {\r\n    indices = [0, 1, 2];\r\n  }\r\n\r\n  const positions = polygon.positions;\r\n\r\n  const hasTexcoords = defined(textureCoordinates);\r\n  const texcoords = hasTexcoords ? textureCoordinates.positions : undefined;\r\n\r\n  if (perPositionHeight) {\r\n    const length = positions.length;\r\n    const flattenedPositions = new Array(length * 3);\r\n    let index = 0;\r\n    for (let i = 0; i < length; i++) {\r\n      const p = positions[i];\r\n      flattenedPositions[index++] = p.x;\r\n      flattenedPositions[index++] = p.y;\r\n      flattenedPositions[index++] = p.z;\r\n    }\r\n\r\n    const geometryOptions = {\r\n      attributes: {\r\n        position: new GeometryAttribute({\r\n          componentDatatype: ComponentDatatype.DOUBLE,\r\n          componentsPerAttribute: 3,\r\n          values: flattenedPositions,\r\n        }),\r\n      },\r\n      indices: indices,\r\n      primitiveType: PrimitiveType.TRIANGLES,\r\n    };\r\n\r\n    if (hasTexcoords) {\r\n      geometryOptions.attributes.st = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 2,\r\n        values: Cartesian2.packArray(texcoords),\r\n      });\r\n    }\r\n\r\n    const geometry = new Geometry(geometryOptions);\r\n\r\n    if (vertexFormat.normal) {\r\n      return GeometryPipeline.computeNormal(geometry);\r\n    }\r\n\r\n    return geometry;\r\n  }\r\n\r\n  if (arcType === ArcType.GEODESIC) {\r\n    return PolygonPipeline.computeSubdivision(\r\n      ellipsoid,\r\n      positions,\r\n      indices,\r\n      texcoords,\r\n      granularity\r\n    );\r\n  } else if (arcType === ArcType.RHUMB) {\r\n    return PolygonPipeline.computeRhumbLineSubdivision(\r\n      ellipsoid,\r\n      positions,\r\n      indices,\r\n      texcoords,\r\n      granularity\r\n    );\r\n  }\r\n};\r\n\r\nconst computeWallTexcoordsSubdivided = [];\r\nconst computeWallIndicesSubdivided = [];\r\nconst p1Scratch = new Cartesian3();\r\nconst p2Scratch = new Cartesian3();\r\n\r\nPolygonGeometryLibrary.computeWallGeometry = function (\r\n  positions,\r\n  textureCoordinates,\r\n  ellipsoid,\r\n  granularity,\r\n  perPositionHeight,\r\n  arcType\r\n) {\r\n  let edgePositions;\r\n  let topEdgeLength;\r\n  let i;\r\n  let p1;\r\n  let p2;\r\n  let t1;\r\n  let t2;\r\n  let edgeTexcoords;\r\n  let topEdgeTexcoordLength;\r\n\r\n  let length = positions.length;\r\n  let index = 0;\r\n  let textureIndex = 0;\r\n\r\n  const hasTexcoords = defined(textureCoordinates);\r\n  const texcoords = hasTexcoords ? textureCoordinates.positions : undefined;\r\n\r\n  if (!perPositionHeight) {\r\n    const minDistance = CesiumMath.chordLength(\r\n      granularity,\r\n      ellipsoid.maximumRadius\r\n    );\r\n\r\n    let numVertices = 0;\r\n    if (arcType === ArcType.GEODESIC) {\r\n      for (i = 0; i < length; i++) {\r\n        numVertices += PolygonGeometryLibrary.subdivideLineCount(\r\n          positions[i],\r\n          positions[(i + 1) % length],\r\n          minDistance\r\n        );\r\n      }\r\n    } else if (arcType === ArcType.RHUMB) {\r\n      for (i = 0; i < length; i++) {\r\n        numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(\r\n          ellipsoid,\r\n          positions[i],\r\n          positions[(i + 1) % length],\r\n          minDistance\r\n        );\r\n      }\r\n    }\r\n\r\n    topEdgeLength = (numVertices + length) * 3;\r\n    edgePositions = new Array(topEdgeLength * 2);\r\n\r\n    if (hasTexcoords) {\r\n      topEdgeTexcoordLength = (numVertices + length) * 2;\r\n      edgeTexcoords = new Array(topEdgeTexcoordLength * 2);\r\n    }\r\n\r\n    for (i = 0; i < length; i++) {\r\n      p1 = positions[i];\r\n      p2 = positions[(i + 1) % length];\r\n\r\n      let tempPositions;\r\n      let tempTexcoords;\r\n\r\n      if (hasTexcoords) {\r\n        t1 = texcoords[i];\r\n        t2 = texcoords[(i + 1) % length];\r\n      }\r\n\r\n      if (arcType === ArcType.GEODESIC) {\r\n        tempPositions = PolygonGeometryLibrary.subdivideLine(\r\n          p1,\r\n          p2,\r\n          minDistance,\r\n          computeWallIndicesSubdivided\r\n        );\r\n        if (hasTexcoords) {\r\n          tempTexcoords = PolygonGeometryLibrary.subdivideTexcoordLine(\r\n            t1,\r\n            t2,\r\n            p1,\r\n            p2,\r\n            minDistance,\r\n            computeWallTexcoordsSubdivided\r\n          );\r\n        }\r\n      } else if (arcType === ArcType.RHUMB) {\r\n        tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(\r\n          ellipsoid,\r\n          p1,\r\n          p2,\r\n          minDistance,\r\n          computeWallIndicesSubdivided\r\n        );\r\n        if (hasTexcoords) {\r\n          tempTexcoords = PolygonGeometryLibrary.subdivideTexcoordRhumbLine(\r\n            t1,\r\n            t2,\r\n            ellipsoid,\r\n            p1,\r\n            p2,\r\n            minDistance,\r\n            computeWallTexcoordsSubdivided\r\n          );\r\n        }\r\n      }\r\n      const tempPositionsLength = tempPositions.length;\r\n      for (let j = 0; j < tempPositionsLength; ++j, ++index) {\r\n        edgePositions[index] = tempPositions[j];\r\n        edgePositions[index + topEdgeLength] = tempPositions[j];\r\n      }\r\n\r\n      edgePositions[index] = p2.x;\r\n      edgePositions[index + topEdgeLength] = p2.x;\r\n      ++index;\r\n\r\n      edgePositions[index] = p2.y;\r\n      edgePositions[index + topEdgeLength] = p2.y;\r\n      ++index;\r\n\r\n      edgePositions[index] = p2.z;\r\n      edgePositions[index + topEdgeLength] = p2.z;\r\n      ++index;\r\n\r\n      if (hasTexcoords) {\r\n        const tempTexcoordsLength = tempTexcoords.length;\r\n        for (let k = 0; k < tempTexcoordsLength; ++k, ++textureIndex) {\r\n          edgeTexcoords[textureIndex] = tempTexcoords[k];\r\n          edgeTexcoords[textureIndex + topEdgeTexcoordLength] =\r\n            tempTexcoords[k];\r\n        }\r\n\r\n        edgeTexcoords[textureIndex] = t2.x;\r\n        edgeTexcoords[textureIndex + topEdgeTexcoordLength] = t2.x;\r\n        ++textureIndex;\r\n\r\n        edgeTexcoords[textureIndex] = t2.y;\r\n        edgeTexcoords[textureIndex + topEdgeTexcoordLength] = t2.y;\r\n        ++textureIndex;\r\n      }\r\n    }\r\n  } else {\r\n    topEdgeLength = length * 3 * 2;\r\n    edgePositions = new Array(topEdgeLength * 2);\r\n\r\n    if (hasTexcoords) {\r\n      topEdgeTexcoordLength = length * 2 * 2;\r\n      edgeTexcoords = new Array(topEdgeTexcoordLength * 2);\r\n    }\r\n\r\n    for (i = 0; i < length; i++) {\r\n      p1 = positions[i];\r\n      p2 = positions[(i + 1) % length];\r\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p1.x;\r\n      ++index;\r\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p1.y;\r\n      ++index;\r\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p1.z;\r\n      ++index;\r\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p2.x;\r\n      ++index;\r\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p2.y;\r\n      ++index;\r\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p2.z;\r\n      ++index;\r\n\r\n      if (hasTexcoords) {\r\n        t1 = texcoords[i];\r\n        t2 = texcoords[(i + 1) % length];\r\n        edgeTexcoords[textureIndex] = edgeTexcoords[\r\n          textureIndex + topEdgeTexcoordLength\r\n        ] = t1.x;\r\n        ++textureIndex;\r\n        edgeTexcoords[textureIndex] = edgeTexcoords[\r\n          textureIndex + topEdgeTexcoordLength\r\n        ] = t1.y;\r\n        ++textureIndex;\r\n        edgeTexcoords[textureIndex] = edgeTexcoords[\r\n          textureIndex + topEdgeTexcoordLength\r\n        ] = t2.x;\r\n        ++textureIndex;\r\n        edgeTexcoords[textureIndex] = edgeTexcoords[\r\n          textureIndex + topEdgeTexcoordLength\r\n        ] = t2.y;\r\n        ++textureIndex;\r\n      }\r\n    }\r\n  }\r\n\r\n  length = edgePositions.length;\r\n  const indices = IndexDatatype.createTypedArray(\r\n    length / 3,\r\n    length - positions.length * 6\r\n  );\r\n  let edgeIndex = 0;\r\n  length /= 6;\r\n\r\n  for (i = 0; i < length; i++) {\r\n    const UL = i;\r\n    const UR = UL + 1;\r\n    const LL = UL + length;\r\n    const LR = LL + 1;\r\n\r\n    p1 = Cartesian3.fromArray(edgePositions, UL * 3, p1Scratch);\r\n    p2 = Cartesian3.fromArray(edgePositions, UR * 3, p2Scratch);\r\n    if (\r\n      Cartesian3.equalsEpsilon(\r\n        p1,\r\n        p2,\r\n        CesiumMath.EPSILON10,\r\n        CesiumMath.EPSILON10\r\n      )\r\n    ) {\r\n      //skip corner\r\n      continue;\r\n    }\r\n\r\n    indices[edgeIndex++] = UL;\r\n    indices[edgeIndex++] = LL;\r\n    indices[edgeIndex++] = UR;\r\n    indices[edgeIndex++] = UR;\r\n    indices[edgeIndex++] = LL;\r\n    indices[edgeIndex++] = LR;\r\n  }\r\n\r\n  const geometryOptions = {\r\n    attributes: new GeometryAttributes({\r\n      position: new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: edgePositions,\r\n      }),\r\n    }),\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n  };\r\n\r\n  if (hasTexcoords) {\r\n    geometryOptions.attributes.st = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: edgeTexcoords,\r\n    });\r\n  }\r\n\r\n  const geometry = new Geometry(geometryOptions);\r\n\r\n  return geometry;\r\n};\r\nexport default PolygonGeometryLibrary;\r\n"],"names":["defined","Cartesian2","Cartesian3","CesiumMath","Cartographic","EllipsoidRhumbLine","defaultValue","Ellipsoid","arrayRemoveDuplicates","PolygonPipeline","WindingOrder","Quaternion","Matrix3","GeometryAttribute","ComponentDatatype","PrimitiveType","Geometry","GeometryPipeline","ArcType","IndexDatatype","GeometryAttributes"],"mappings":"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"}