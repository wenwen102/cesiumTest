{"version":3,"file":"GeometryPipeline-34435fcf.js","sources":["../../../packages/engine/Source/Core/barycentricCoordinates.js","../../../packages/engine/Source/Core/Tipsify.js","../../../packages/engine/Source/Core/GeometryPipeline.js"],"sourcesContent":["import Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defined from \"./defined.js\";\r\nimport CesiumMath from \"./Math.js\";\r\n\r\nconst scratchCartesian1 = new Cartesian3();\r\nconst scratchCartesian2 = new Cartesian3();\r\nconst scratchCartesian3 = new Cartesian3();\r\n\r\n/**\r\n * Computes the barycentric coordinates for a point with respect to a triangle.\r\n *\r\n * @function\r\n *\r\n * @param {Cartesian2|Cartesian3} point The point to test.\r\n * @param {Cartesian2|Cartesian3} p0 The first point of the triangle, corresponding to the barycentric x-axis.\r\n * @param {Cartesian2|Cartesian3} p1 The second point of the triangle, corresponding to the barycentric y-axis.\r\n * @param {Cartesian2|Cartesian3} p2 The third point of the triangle, corresponding to the barycentric z-axis.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3|undefined} The modified result parameter or a new Cartesian3 instance if one was not provided. If the triangle is degenerate the function will return undefined.\r\n *\r\n * @example\r\n * // Returns Cartesian3.UNIT_X\r\n * const p = new Cesium.Cartesian3(-1.0, 0.0, 0.0);\r\n * const b = Cesium.barycentricCoordinates(p,\r\n *   new Cesium.Cartesian3(-1.0, 0.0, 0.0),\r\n *   new Cesium.Cartesian3( 1.0, 0.0, 0.0),\r\n *   new Cesium.Cartesian3( 0.0, 1.0, 1.0));\r\n */\r\nfunction barycentricCoordinates(point, p0, p1, p2, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"point\", point);\r\n  Check.defined(\"p0\", p0);\r\n  Check.defined(\"p1\", p1);\r\n  Check.defined(\"p2\", p2);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  // Implementation based on http://www.blackpawn.com/texts/pointinpoly/default.html.\r\n  let v0;\r\n  let v1;\r\n  let v2;\r\n  let dot00;\r\n  let dot01;\r\n  let dot02;\r\n  let dot11;\r\n  let dot12;\r\n\r\n  if (!defined(p0.z)) {\r\n    if (Cartesian2.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\r\n      return Cartesian3.clone(Cartesian3.UNIT_X, result);\r\n    }\r\n    if (Cartesian2.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\r\n      return Cartesian3.clone(Cartesian3.UNIT_Y, result);\r\n    }\r\n    if (Cartesian2.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\r\n      return Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n    }\r\n\r\n    v0 = Cartesian2.subtract(p1, p0, scratchCartesian1);\r\n    v1 = Cartesian2.subtract(p2, p0, scratchCartesian2);\r\n    v2 = Cartesian2.subtract(point, p0, scratchCartesian3);\r\n\r\n    dot00 = Cartesian2.dot(v0, v0);\r\n    dot01 = Cartesian2.dot(v0, v1);\r\n    dot02 = Cartesian2.dot(v0, v2);\r\n    dot11 = Cartesian2.dot(v1, v1);\r\n    dot12 = Cartesian2.dot(v1, v2);\r\n  } else {\r\n    if (Cartesian3.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\r\n      return Cartesian3.clone(Cartesian3.UNIT_X, result);\r\n    }\r\n    if (Cartesian3.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\r\n      return Cartesian3.clone(Cartesian3.UNIT_Y, result);\r\n    }\r\n    if (Cartesian3.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\r\n      return Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n    }\r\n\r\n    v0 = Cartesian3.subtract(p1, p0, scratchCartesian1);\r\n    v1 = Cartesian3.subtract(p2, p0, scratchCartesian2);\r\n    v2 = Cartesian3.subtract(point, p0, scratchCartesian3);\r\n\r\n    dot00 = Cartesian3.dot(v0, v0);\r\n    dot01 = Cartesian3.dot(v0, v1);\r\n    dot02 = Cartesian3.dot(v0, v2);\r\n    dot11 = Cartesian3.dot(v1, v1);\r\n    dot12 = Cartesian3.dot(v1, v2);\r\n  }\r\n\r\n  result.y = dot11 * dot02 - dot01 * dot12;\r\n  result.z = dot00 * dot12 - dot01 * dot02;\r\n  const q = dot00 * dot11 - dot01 * dot01;\r\n\r\n  // Triangle is degenerate\r\n  if (q === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  result.y /= q;\r\n  result.z /= q;\r\n  result.x = 1.0 - result.y - result.z;\r\n  return result;\r\n}\r\nexport default barycentricCoordinates;\r\n","import defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\n\r\n/**\r\n * Encapsulates an algorithm to optimize triangles for the post\r\n * vertex-shader cache.  This is based on the 2007 SIGGRAPH paper\r\n * 'Fast Triangle Reordering for Vertex Locality and Reduced Overdraw.'\r\n * The runtime is linear but several passes are made.\r\n *\r\n * @namespace Tipsify\r\n *\r\n * @see <a href='http://gfx.cs.princeton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf'>\r\n * Fast Triangle Reordering for Vertex Locality and Reduced Overdraw</a>\r\n * by Sander, Nehab, and Barczak\r\n *\r\n * @private\r\n */\r\nconst Tipsify = {};\r\n\r\n/**\r\n * Calculates the average cache miss ratio (ACMR) for a given set of indices.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\r\n *                        in the vertex buffer that define the geometry's triangles.\r\n * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\r\n *                                     If not supplied, this value will be computed.\r\n * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\r\n * @returns {Number} The average cache miss ratio (ACMR).\r\n *\r\n * @exception {DeveloperError} indices length must be a multiple of three.\r\n * @exception {DeveloperError} cacheSize must be greater than two.\r\n *\r\n * @example\r\n * const indices = [0, 1, 2, 3, 4, 5];\r\n * const maxIndex = 5;\r\n * const cacheSize = 3;\r\n * const acmr = Cesium.Tipsify.calculateACMR({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\r\n */\r\nTipsify.calculateACMR = function (options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const indices = options.indices;\r\n  let maximumIndex = options.maximumIndex;\r\n  const cacheSize = defaultValue(options.cacheSize, 24);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(indices)) {\r\n    throw new DeveloperError(\"indices is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const numIndices = indices.length;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (numIndices < 3 || numIndices % 3 !== 0) {\r\n    throw new DeveloperError(\"indices length must be a multiple of three.\");\r\n  }\r\n  if (maximumIndex <= 0) {\r\n    throw new DeveloperError(\"maximumIndex must be greater than zero.\");\r\n  }\r\n  if (cacheSize < 3) {\r\n    throw new DeveloperError(\"cacheSize must be greater than two.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  // Compute the maximumIndex if not given\r\n  if (!defined(maximumIndex)) {\r\n    maximumIndex = 0;\r\n    let currentIndex = 0;\r\n    let intoIndices = indices[currentIndex];\r\n    while (currentIndex < numIndices) {\r\n      if (intoIndices > maximumIndex) {\r\n        maximumIndex = intoIndices;\r\n      }\r\n      ++currentIndex;\r\n      intoIndices = indices[currentIndex];\r\n    }\r\n  }\r\n\r\n  // Vertex time stamps\r\n  const vertexTimeStamps = [];\r\n  for (let i = 0; i < maximumIndex + 1; i++) {\r\n    vertexTimeStamps[i] = 0;\r\n  }\r\n\r\n  // Cache processing\r\n  let s = cacheSize + 1;\r\n  for (let j = 0; j < numIndices; ++j) {\r\n    if (s - vertexTimeStamps[indices[j]] > cacheSize) {\r\n      vertexTimeStamps[indices[j]] = s;\r\n      ++s;\r\n    }\r\n  }\r\n\r\n  return (s - cacheSize + 1) / (numIndices / 3);\r\n};\r\n\r\n/**\r\n * Optimizes triangles for the post-vertex shader cache.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\r\n *                        in the vertex buffer that define the geometry's triangles.\r\n * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\r\n *                                     If not supplied, this value will be computed.\r\n * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\r\n * @returns {Number[]} A list of the input indices in an optimized order.\r\n *\r\n * @exception {DeveloperError} indices length must be a multiple of three.\r\n * @exception {DeveloperError} cacheSize must be greater than two.\r\n *\r\n * @example\r\n * const indices = [0, 1, 2, 3, 4, 5];\r\n * const maxIndex = 5;\r\n * const cacheSize = 3;\r\n * const reorderedIndices = Cesium.Tipsify.tipsify({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\r\n */\r\nTipsify.tipsify = function (options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const indices = options.indices;\r\n  const maximumIndex = options.maximumIndex;\r\n  const cacheSize = defaultValue(options.cacheSize, 24);\r\n\r\n  let cursor;\r\n\r\n  function skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne) {\r\n    while (deadEnd.length >= 1) {\r\n      // while the stack is not empty\r\n      const d = deadEnd[deadEnd.length - 1]; // top of the stack\r\n      deadEnd.splice(deadEnd.length - 1, 1); // pop the stack\r\n\r\n      if (vertices[d].numLiveTriangles > 0) {\r\n        return d;\r\n      }\r\n    }\r\n\r\n    while (cursor < maximumIndexPlusOne) {\r\n      if (vertices[cursor].numLiveTriangles > 0) {\r\n        ++cursor;\r\n        return cursor - 1;\r\n      }\r\n      ++cursor;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  function getNextVertex(\r\n    indices,\r\n    cacheSize,\r\n    oneRing,\r\n    vertices,\r\n    s,\r\n    deadEnd,\r\n    maximumIndexPlusOne\r\n  ) {\r\n    let n = -1;\r\n    let p;\r\n    let m = -1;\r\n    let itOneRing = 0;\r\n    while (itOneRing < oneRing.length) {\r\n      const index = oneRing[itOneRing];\r\n      if (vertices[index].numLiveTriangles) {\r\n        p = 0;\r\n        if (\r\n          s -\r\n            vertices[index].timeStamp +\r\n            2 * vertices[index].numLiveTriangles <=\r\n          cacheSize\r\n        ) {\r\n          p = s - vertices[index].timeStamp;\r\n        }\r\n        if (p > m || m === -1) {\r\n          m = p;\r\n          n = index;\r\n        }\r\n      }\r\n      ++itOneRing;\r\n    }\r\n    if (n === -1) {\r\n      return skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne);\r\n    }\r\n    return n;\r\n  }\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(indices)) {\r\n    throw new DeveloperError(\"indices is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const numIndices = indices.length;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (numIndices < 3 || numIndices % 3 !== 0) {\r\n    throw new DeveloperError(\"indices length must be a multiple of three.\");\r\n  }\r\n  if (maximumIndex <= 0) {\r\n    throw new DeveloperError(\"maximumIndex must be greater than zero.\");\r\n  }\r\n  if (cacheSize < 3) {\r\n    throw new DeveloperError(\"cacheSize must be greater than two.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  // Determine maximum index\r\n  let maximumIndexPlusOne = 0;\r\n  let currentIndex = 0;\r\n  let intoIndices = indices[currentIndex];\r\n  const endIndex = numIndices;\r\n  if (defined(maximumIndex)) {\r\n    maximumIndexPlusOne = maximumIndex + 1;\r\n  } else {\r\n    while (currentIndex < endIndex) {\r\n      if (intoIndices > maximumIndexPlusOne) {\r\n        maximumIndexPlusOne = intoIndices;\r\n      }\r\n      ++currentIndex;\r\n      intoIndices = indices[currentIndex];\r\n    }\r\n    if (maximumIndexPlusOne === -1) {\r\n      return 0;\r\n    }\r\n    ++maximumIndexPlusOne;\r\n  }\r\n\r\n  // Vertices\r\n  const vertices = [];\r\n  let i;\r\n  for (i = 0; i < maximumIndexPlusOne; i++) {\r\n    vertices[i] = {\r\n      numLiveTriangles: 0,\r\n      timeStamp: 0,\r\n      vertexTriangles: [],\r\n    };\r\n  }\r\n  currentIndex = 0;\r\n  let triangle = 0;\r\n  while (currentIndex < endIndex) {\r\n    vertices[indices[currentIndex]].vertexTriangles.push(triangle);\r\n    ++vertices[indices[currentIndex]].numLiveTriangles;\r\n    vertices[indices[currentIndex + 1]].vertexTriangles.push(triangle);\r\n    ++vertices[indices[currentIndex + 1]].numLiveTriangles;\r\n    vertices[indices[currentIndex + 2]].vertexTriangles.push(triangle);\r\n    ++vertices[indices[currentIndex + 2]].numLiveTriangles;\r\n    ++triangle;\r\n    currentIndex += 3;\r\n  }\r\n\r\n  // Starting index\r\n  let f = 0;\r\n\r\n  // Time Stamp\r\n  let s = cacheSize + 1;\r\n  cursor = 1;\r\n\r\n  // Process\r\n  let oneRing = [];\r\n  const deadEnd = []; //Stack\r\n  let vertex;\r\n  let intoVertices;\r\n  let currentOutputIndex = 0;\r\n  const outputIndices = [];\r\n  const numTriangles = numIndices / 3;\r\n  const triangleEmitted = [];\r\n  for (i = 0; i < numTriangles; i++) {\r\n    triangleEmitted[i] = false;\r\n  }\r\n  let index;\r\n  let limit;\r\n  while (f !== -1) {\r\n    oneRing = [];\r\n    intoVertices = vertices[f];\r\n    limit = intoVertices.vertexTriangles.length;\r\n    for (let k = 0; k < limit; ++k) {\r\n      triangle = intoVertices.vertexTriangles[k];\r\n      if (!triangleEmitted[triangle]) {\r\n        triangleEmitted[triangle] = true;\r\n        currentIndex = triangle + triangle + triangle;\r\n        for (let j = 0; j < 3; ++j) {\r\n          // Set this index as a possible next index\r\n          index = indices[currentIndex];\r\n          oneRing.push(index);\r\n          deadEnd.push(index);\r\n\r\n          // Output index\r\n          outputIndices[currentOutputIndex] = index;\r\n          ++currentOutputIndex;\r\n\r\n          // Cache processing\r\n          vertex = vertices[index];\r\n          --vertex.numLiveTriangles;\r\n          if (s - vertex.timeStamp > cacheSize) {\r\n            vertex.timeStamp = s;\r\n            ++s;\r\n          }\r\n          ++currentIndex;\r\n        }\r\n      }\r\n    }\r\n    f = getNextVertex(\r\n      indices,\r\n      cacheSize,\r\n      oneRing,\r\n      vertices,\r\n      s,\r\n      deadEnd,\r\n      maximumIndexPlusOne\r\n    );\r\n  }\r\n\r\n  return outputIndices;\r\n};\r\nexport default Tipsify;\r\n","import AttributeCompression from \"./AttributeCompression.js\";\r\nimport barycentricCoordinates from \"./barycentricCoordinates.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartesian4 from \"./Cartesian4.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport EncodedCartesian3 from \"./EncodedCartesian3.js\";\r\nimport GeographicProjection from \"./GeographicProjection.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryType from \"./GeometryType.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport Intersect from \"./Intersect.js\";\r\nimport IntersectionTests from \"./IntersectionTests.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix3 from \"./Matrix3.js\";\r\nimport Matrix4 from \"./Matrix4.js\";\r\nimport Plane from \"./Plane.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport Tipsify from \"./Tipsify.js\";\r\n\r\n/**\r\n * Content pipeline functions for geometries.\r\n *\r\n * @namespace GeometryPipeline\r\n *\r\n * @see Geometry\r\n */\r\nconst GeometryPipeline = {};\r\n\r\nfunction addTriangle(lines, index, i0, i1, i2) {\r\n  lines[index++] = i0;\r\n  lines[index++] = i1;\r\n\r\n  lines[index++] = i1;\r\n  lines[index++] = i2;\r\n\r\n  lines[index++] = i2;\r\n  lines[index] = i0;\r\n}\r\n\r\nfunction trianglesToLines(triangles) {\r\n  const count = triangles.length;\r\n  const size = (count / 3) * 6;\r\n  const lines = IndexDatatype.createTypedArray(count, size);\r\n\r\n  let index = 0;\r\n  for (let i = 0; i < count; i += 3, index += 6) {\r\n    addTriangle(lines, index, triangles[i], triangles[i + 1], triangles[i + 2]);\r\n  }\r\n\r\n  return lines;\r\n}\r\n\r\nfunction triangleStripToLines(triangles) {\r\n  const count = triangles.length;\r\n  if (count >= 3) {\r\n    const size = (count - 2) * 6;\r\n    const lines = IndexDatatype.createTypedArray(count, size);\r\n\r\n    addTriangle(lines, 0, triangles[0], triangles[1], triangles[2]);\r\n    let index = 6;\r\n\r\n    for (let i = 3; i < count; ++i, index += 6) {\r\n      addTriangle(\r\n        lines,\r\n        index,\r\n        triangles[i - 1],\r\n        triangles[i],\r\n        triangles[i - 2]\r\n      );\r\n    }\r\n\r\n    return lines;\r\n  }\r\n\r\n  return new Uint16Array();\r\n}\r\n\r\nfunction triangleFanToLines(triangles) {\r\n  if (triangles.length > 0) {\r\n    const count = triangles.length - 1;\r\n    const size = (count - 1) * 6;\r\n    const lines = IndexDatatype.createTypedArray(count, size);\r\n\r\n    const base = triangles[0];\r\n    let index = 0;\r\n    for (let i = 1; i < count; ++i, index += 6) {\r\n      addTriangle(lines, index, base, triangles[i], triangles[i + 1]);\r\n    }\r\n\r\n    return lines;\r\n  }\r\n\r\n  return new Uint16Array();\r\n}\r\n\r\n/**\r\n * Converts a geometry's triangle indices to line indices.  If the geometry has an <code>indices</code>\r\n * and its <code>primitiveType</code> is <code>TRIANGLES</code>, <code>TRIANGLE_STRIP</code>,\r\n * <code>TRIANGLE_FAN</code>, it is converted to <code>LINES</code>; otherwise, the geometry is not changed.\r\n * <p>\r\n * This is commonly used to create a wireframe geometry for visual debugging.\r\n * </p>\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @returns {Geometry} The modified <code>geometry</code> argument, with its triangle indices converted to lines.\r\n *\r\n * @exception {DeveloperError} geometry.primitiveType must be TRIANGLES, TRIANGLE_STRIP, or TRIANGLE_FAN.\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.toWireframe(geometry);\r\n */\r\nGeometryPipeline.toWireframe = function (geometry) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const indices = geometry.indices;\r\n  if (defined(indices)) {\r\n    switch (geometry.primitiveType) {\r\n      case PrimitiveType.TRIANGLES:\r\n        geometry.indices = trianglesToLines(indices);\r\n        break;\r\n      case PrimitiveType.TRIANGLE_STRIP:\r\n        geometry.indices = triangleStripToLines(indices);\r\n        break;\r\n      case PrimitiveType.TRIANGLE_FAN:\r\n        geometry.indices = triangleFanToLines(indices);\r\n        break;\r\n      //>>includeStart('debug', pragmas.debug);\r\n      default:\r\n        throw new DeveloperError(\r\n          \"geometry.primitiveType must be TRIANGLES, TRIANGLE_STRIP, or TRIANGLE_FAN.\"\r\n        );\r\n      //>>includeEnd('debug');\r\n    }\r\n\r\n    geometry.primitiveType = PrimitiveType.LINES;\r\n  }\r\n\r\n  return geometry;\r\n};\r\n\r\n/**\r\n * Creates a new {@link Geometry} with <code>LINES</code> representing the provided\r\n * attribute (<code>attributeName</code>) for the provided geometry.  This is used to\r\n * visualize vector attributes like normals, tangents, and bitangents.\r\n *\r\n * @param {Geometry} geometry The <code>Geometry</code> instance with the attribute.\r\n * @param {String} [attributeName='normal'] The name of the attribute.\r\n * @param {Number} [length=10000.0] The length of each line segment in meters.  This can be negative to point the vector in the opposite direction.\r\n * @returns {Geometry} A new <code>Geometry</code> instance with line segments for the vector.\r\n *\r\n * @exception {DeveloperError} geometry.attributes must have an attribute with the same name as the attributeName parameter.\r\n *\r\n * @example\r\n * const geometry = Cesium.GeometryPipeline.createLineSegmentsForVectors(instance.geometry, 'bitangent', 100000.0);\r\n */\r\nGeometryPipeline.createLineSegmentsForVectors = function (\r\n  geometry,\r\n  attributeName,\r\n  length\r\n) {\r\n  attributeName = defaultValue(attributeName, \"normal\");\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  if (!defined(geometry.attributes.position)) {\r\n    throw new DeveloperError(\"geometry.attributes.position is required.\");\r\n  }\r\n  if (!defined(geometry.attributes[attributeName])) {\r\n    throw new DeveloperError(\r\n      `geometry.attributes must have an attribute with the same name as the attributeName parameter, ${attributeName}.`\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  length = defaultValue(length, 10000.0);\r\n\r\n  const positions = geometry.attributes.position.values;\r\n  const vectors = geometry.attributes[attributeName].values;\r\n  const positionsLength = positions.length;\r\n\r\n  const newPositions = new Float64Array(2 * positionsLength);\r\n\r\n  let j = 0;\r\n  for (let i = 0; i < positionsLength; i += 3) {\r\n    newPositions[j++] = positions[i];\r\n    newPositions[j++] = positions[i + 1];\r\n    newPositions[j++] = positions[i + 2];\r\n\r\n    newPositions[j++] = positions[i] + vectors[i] * length;\r\n    newPositions[j++] = positions[i + 1] + vectors[i + 1] * length;\r\n    newPositions[j++] = positions[i + 2] + vectors[i + 2] * length;\r\n  }\r\n\r\n  let newBoundingSphere;\r\n  const bs = geometry.boundingSphere;\r\n  if (defined(bs)) {\r\n    newBoundingSphere = new BoundingSphere(bs.center, bs.radius + length);\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: {\r\n      position: new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: newPositions,\r\n      }),\r\n    },\r\n    primitiveType: PrimitiveType.LINES,\r\n    boundingSphere: newBoundingSphere,\r\n  });\r\n};\r\n\r\n/**\r\n * Creates an object that maps attribute names to unique locations (indices)\r\n * for matching vertex attributes and shader programs.\r\n *\r\n * @param {Geometry} geometry The geometry, which is not modified, to create the object for.\r\n * @returns {Object} An object with attribute name / index pairs.\r\n *\r\n * @example\r\n * const attributeLocations = Cesium.GeometryPipeline.createAttributeLocations(geometry);\r\n * // Example output\r\n * // {\r\n * //   'position' : 0,\r\n * //   'normal' : 1\r\n * // }\r\n */\r\nGeometryPipeline.createAttributeLocations = function (geometry) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  //>>includeEnd('debug')\r\n\r\n  // There can be a WebGL performance hit when attribute 0 is disabled, so\r\n  // assign attribute locations to well-known attributes.\r\n  const semantics = [\r\n    \"position\",\r\n    \"positionHigh\",\r\n    \"positionLow\",\r\n\r\n    // From VertexFormat.position - after 2D projection and high-precision encoding\r\n    \"position3DHigh\",\r\n    \"position3DLow\",\r\n    \"position2DHigh\",\r\n    \"position2DLow\",\r\n\r\n    // From Primitive\r\n    \"pickColor\",\r\n\r\n    // From VertexFormat\r\n    \"normal\",\r\n    \"st\",\r\n    \"tangent\",\r\n    \"bitangent\",\r\n\r\n    // For shadow volumes\r\n    \"extrudeDirection\",\r\n\r\n    // From compressing texture coordinates and normals\r\n    \"compressedAttributes\",\r\n  ];\r\n\r\n  const attributes = geometry.attributes;\r\n  const indices = {};\r\n  let j = 0;\r\n  let i;\r\n  const len = semantics.length;\r\n\r\n  // Attribute locations for well-known attributes\r\n  for (i = 0; i < len; ++i) {\r\n    const semantic = semantics[i];\r\n\r\n    if (defined(attributes[semantic])) {\r\n      indices[semantic] = j++;\r\n    }\r\n  }\r\n\r\n  // Locations for custom attributes\r\n  for (const name in attributes) {\r\n    if (attributes.hasOwnProperty(name) && !defined(indices[name])) {\r\n      indices[name] = j++;\r\n    }\r\n  }\r\n\r\n  return indices;\r\n};\r\n\r\n/**\r\n * Reorders a geometry's attributes and <code>indices</code> to achieve better performance from the GPU's pre-vertex-shader cache.\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @returns {Geometry} The modified <code>geometry</code> argument, with its attributes and indices reordered for the GPU's pre-vertex-shader cache.\r\n *\r\n * @exception {DeveloperError} Each attribute array in geometry.attributes must have the same number of attributes.\r\n *\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.reorderForPreVertexCache(geometry);\r\n *\r\n * @see GeometryPipeline.reorderForPostVertexCache\r\n */\r\nGeometryPipeline.reorderForPreVertexCache = function (geometry) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const numVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n  const indices = geometry.indices;\r\n  if (defined(indices)) {\r\n    const indexCrossReferenceOldToNew = new Int32Array(numVertices);\r\n    for (let i = 0; i < numVertices; i++) {\r\n      indexCrossReferenceOldToNew[i] = -1;\r\n    }\r\n\r\n    // Construct cross reference and reorder indices\r\n    const indicesIn = indices;\r\n    const numIndices = indicesIn.length;\r\n    const indicesOut = IndexDatatype.createTypedArray(numVertices, numIndices);\r\n\r\n    let intoIndicesIn = 0;\r\n    let intoIndicesOut = 0;\r\n    let nextIndex = 0;\r\n    let tempIndex;\r\n    while (intoIndicesIn < numIndices) {\r\n      tempIndex = indexCrossReferenceOldToNew[indicesIn[intoIndicesIn]];\r\n      if (tempIndex !== -1) {\r\n        indicesOut[intoIndicesOut] = tempIndex;\r\n      } else {\r\n        tempIndex = indicesIn[intoIndicesIn];\r\n        indexCrossReferenceOldToNew[tempIndex] = nextIndex;\r\n\r\n        indicesOut[intoIndicesOut] = nextIndex;\r\n        ++nextIndex;\r\n      }\r\n      ++intoIndicesIn;\r\n      ++intoIndicesOut;\r\n    }\r\n    geometry.indices = indicesOut;\r\n\r\n    // Reorder attributes\r\n    const attributes = geometry.attributes;\r\n    for (const property in attributes) {\r\n      if (\r\n        attributes.hasOwnProperty(property) &&\r\n        defined(attributes[property]) &&\r\n        defined(attributes[property].values)\r\n      ) {\r\n        const attribute = attributes[property];\r\n        const elementsIn = attribute.values;\r\n        let intoElementsIn = 0;\r\n        const numComponents = attribute.componentsPerAttribute;\r\n        const elementsOut = ComponentDatatype.createTypedArray(\r\n          attribute.componentDatatype,\r\n          nextIndex * numComponents\r\n        );\r\n        while (intoElementsIn < numVertices) {\r\n          const temp = indexCrossReferenceOldToNew[intoElementsIn];\r\n          if (temp !== -1) {\r\n            for (let j = 0; j < numComponents; j++) {\r\n              elementsOut[numComponents * temp + j] =\r\n                elementsIn[numComponents * intoElementsIn + j];\r\n            }\r\n          }\r\n          ++intoElementsIn;\r\n        }\r\n        attribute.values = elementsOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return geometry;\r\n};\r\n\r\n/**\r\n * Reorders a geometry's <code>indices</code> to achieve better performance from the GPU's\r\n * post vertex-shader cache by using the Tipsify algorithm.  If the geometry <code>primitiveType</code>\r\n * is not <code>TRIANGLES</code> or the geometry does not have an <code>indices</code>, this function has no effect.\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @param {Number} [cacheCapacity=24] The number of vertices that can be held in the GPU's vertex cache.\r\n * @returns {Geometry} The modified <code>geometry</code> argument, with its indices reordered for the post-vertex-shader cache.\r\n *\r\n * @exception {DeveloperError} cacheCapacity must be greater than two.\r\n *\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.reorderForPostVertexCache(geometry);\r\n *\r\n * @see GeometryPipeline.reorderForPreVertexCache\r\n * @see {@link http://gfx.cs.princ0eton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf|Fast Triangle Reordering for Vertex Locality and Reduced Overdraw}\r\n * by Sander, Nehab, and Barczak\r\n */\r\nGeometryPipeline.reorderForPostVertexCache = function (\r\n  geometry,\r\n  cacheCapacity\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const indices = geometry.indices;\r\n  if (geometry.primitiveType === PrimitiveType.TRIANGLES && defined(indices)) {\r\n    const numIndices = indices.length;\r\n    let maximumIndex = 0;\r\n    for (let j = 0; j < numIndices; j++) {\r\n      if (indices[j] > maximumIndex) {\r\n        maximumIndex = indices[j];\r\n      }\r\n    }\r\n    geometry.indices = Tipsify.tipsify({\r\n      indices: indices,\r\n      maximumIndex: maximumIndex,\r\n      cacheSize: cacheCapacity,\r\n    });\r\n  }\r\n\r\n  return geometry;\r\n};\r\n\r\nfunction copyAttributesDescriptions(attributes) {\r\n  const newAttributes = {};\r\n\r\n  for (const attribute in attributes) {\r\n    if (\r\n      attributes.hasOwnProperty(attribute) &&\r\n      defined(attributes[attribute]) &&\r\n      defined(attributes[attribute].values)\r\n    ) {\r\n      const attr = attributes[attribute];\r\n      newAttributes[attribute] = new GeometryAttribute({\r\n        componentDatatype: attr.componentDatatype,\r\n        componentsPerAttribute: attr.componentsPerAttribute,\r\n        normalize: attr.normalize,\r\n        values: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  return newAttributes;\r\n}\r\n\r\nfunction copyVertex(destinationAttributes, sourceAttributes, index) {\r\n  for (const attribute in sourceAttributes) {\r\n    if (\r\n      sourceAttributes.hasOwnProperty(attribute) &&\r\n      defined(sourceAttributes[attribute]) &&\r\n      defined(sourceAttributes[attribute].values)\r\n    ) {\r\n      const attr = sourceAttributes[attribute];\r\n\r\n      for (let k = 0; k < attr.componentsPerAttribute; ++k) {\r\n        destinationAttributes[attribute].values.push(\r\n          attr.values[index * attr.componentsPerAttribute + k]\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Splits a geometry into multiple geometries, if necessary, to ensure that indices in the\r\n * <code>indices</code> fit into unsigned shorts.  This is used to meet the WebGL requirements\r\n * when unsigned int indices are not supported.\r\n * <p>\r\n * If the geometry does not have any <code>indices</code>, this function has no effect.\r\n * </p>\r\n *\r\n * @param {Geometry} geometry The geometry to be split into multiple geometries.\r\n * @returns {Geometry[]} An array of geometries, each with indices that fit into unsigned shorts.\r\n *\r\n * @exception {DeveloperError} geometry.primitiveType must equal to PrimitiveType.TRIANGLES, PrimitiveType.LINES, or PrimitiveType.POINTS\r\n * @exception {DeveloperError} All geometry attribute lists must have the same number of attributes.\r\n *\r\n * @example\r\n * const geometries = Cesium.GeometryPipeline.fitToUnsignedShortIndices(geometry);\r\n */\r\nGeometryPipeline.fitToUnsignedShortIndices = function (geometry) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  if (\r\n    defined(geometry.indices) &&\r\n    geometry.primitiveType !== PrimitiveType.TRIANGLES &&\r\n    geometry.primitiveType !== PrimitiveType.LINES &&\r\n    geometry.primitiveType !== PrimitiveType.POINTS\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"geometry.primitiveType must equal to PrimitiveType.TRIANGLES, PrimitiveType.LINES, or PrimitiveType.POINTS.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const geometries = [];\r\n\r\n  // If there's an index list and more than 64K attributes, it is possible that\r\n  // some indices are outside the range of unsigned short [0, 64K - 1]\r\n  const numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n  if (\r\n    defined(geometry.indices) &&\r\n    numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES\r\n  ) {\r\n    let oldToNewIndex = [];\r\n    let newIndices = [];\r\n    let currentIndex = 0;\r\n    let newAttributes = copyAttributesDescriptions(geometry.attributes);\r\n\r\n    const originalIndices = geometry.indices;\r\n    const numberOfIndices = originalIndices.length;\r\n\r\n    let indicesPerPrimitive;\r\n\r\n    if (geometry.primitiveType === PrimitiveType.TRIANGLES) {\r\n      indicesPerPrimitive = 3;\r\n    } else if (geometry.primitiveType === PrimitiveType.LINES) {\r\n      indicesPerPrimitive = 2;\r\n    } else if (geometry.primitiveType === PrimitiveType.POINTS) {\r\n      indicesPerPrimitive = 1;\r\n    }\r\n\r\n    for (let j = 0; j < numberOfIndices; j += indicesPerPrimitive) {\r\n      for (let k = 0; k < indicesPerPrimitive; ++k) {\r\n        const x = originalIndices[j + k];\r\n        let i = oldToNewIndex[x];\r\n        if (!defined(i)) {\r\n          i = currentIndex++;\r\n          oldToNewIndex[x] = i;\r\n          copyVertex(newAttributes, geometry.attributes, x);\r\n        }\r\n        newIndices.push(i);\r\n      }\r\n\r\n      if (\r\n        currentIndex + indicesPerPrimitive >=\r\n        CesiumMath.SIXTY_FOUR_KILOBYTES\r\n      ) {\r\n        geometries.push(\r\n          new Geometry({\r\n            attributes: newAttributes,\r\n            indices: newIndices,\r\n            primitiveType: geometry.primitiveType,\r\n            boundingSphere: geometry.boundingSphere,\r\n            boundingSphereCV: geometry.boundingSphereCV,\r\n          })\r\n        );\r\n\r\n        // Reset for next vertex-array\r\n        oldToNewIndex = [];\r\n        newIndices = [];\r\n        currentIndex = 0;\r\n        newAttributes = copyAttributesDescriptions(geometry.attributes);\r\n      }\r\n    }\r\n\r\n    if (newIndices.length !== 0) {\r\n      geometries.push(\r\n        new Geometry({\r\n          attributes: newAttributes,\r\n          indices: newIndices,\r\n          primitiveType: geometry.primitiveType,\r\n          boundingSphere: geometry.boundingSphere,\r\n          boundingSphereCV: geometry.boundingSphereCV,\r\n        })\r\n      );\r\n    }\r\n  } else {\r\n    // No need to split into multiple geometries\r\n    geometries.push(geometry);\r\n  }\r\n\r\n  return geometries;\r\n};\r\n\r\nconst scratchProjectTo2DCartesian3 = new Cartesian3();\r\nconst scratchProjectTo2DCartographic = new Cartographic();\r\n\r\n/**\r\n * Projects a geometry's 3D <code>position</code> attribute to 2D, replacing the <code>position</code>\r\n * attribute with separate <code>position3D</code> and <code>position2D</code> attributes.\r\n * <p>\r\n * If the geometry does not have a <code>position</code>, this function has no effect.\r\n * </p>\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @param {String} attributeName The name of the attribute.\r\n * @param {String} attributeName3D The name of the attribute in 3D.\r\n * @param {String} attributeName2D The name of the attribute in 2D.\r\n * @param {Object} [projection=new GeographicProjection()] The projection to use.\r\n * @returns {Geometry} The modified <code>geometry</code> argument with <code>position3D</code> and <code>position2D</code> attributes.\r\n *\r\n * @exception {DeveloperError} geometry must have attribute matching the attributeName argument.\r\n * @exception {DeveloperError} The attribute componentDatatype must be ComponentDatatype.DOUBLE.\r\n * @exception {DeveloperError} Could not project a point to 2D.\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.projectTo2D(geometry, 'position', 'position3D', 'position2D');\r\n */\r\nGeometryPipeline.projectTo2D = function (\r\n  geometry,\r\n  attributeName,\r\n  attributeName3D,\r\n  attributeName2D,\r\n  projection\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  if (!defined(attributeName)) {\r\n    throw new DeveloperError(\"attributeName is required.\");\r\n  }\r\n  if (!defined(attributeName3D)) {\r\n    throw new DeveloperError(\"attributeName3D is required.\");\r\n  }\r\n  if (!defined(attributeName2D)) {\r\n    throw new DeveloperError(\"attributeName2D is required.\");\r\n  }\r\n  if (!defined(geometry.attributes[attributeName])) {\r\n    throw new DeveloperError(\r\n      `geometry must have attribute matching the attributeName argument: ${attributeName}.`\r\n    );\r\n  }\r\n  if (\r\n    geometry.attributes[attributeName].componentDatatype !==\r\n    ComponentDatatype.DOUBLE\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"The attribute componentDatatype must be ComponentDatatype.DOUBLE.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const attribute = geometry.attributes[attributeName];\r\n  projection = defined(projection) ? projection : new GeographicProjection();\r\n  const ellipsoid = projection.ellipsoid;\r\n\r\n  // Project original values to 2D.\r\n  const values3D = attribute.values;\r\n  const projectedValues = new Float64Array(values3D.length);\r\n  let index = 0;\r\n\r\n  for (let i = 0; i < values3D.length; i += 3) {\r\n    const value = Cartesian3.fromArray(\r\n      values3D,\r\n      i,\r\n      scratchProjectTo2DCartesian3\r\n    );\r\n\r\n    const lonLat = ellipsoid.cartesianToCartographic(\r\n      value,\r\n      scratchProjectTo2DCartographic\r\n    );\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(lonLat)) {\r\n      throw new DeveloperError(\r\n        `Could not project point (${value.x}, ${value.y}, ${value.z}) to 2D.`\r\n      );\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    const projectedLonLat = projection.project(\r\n      lonLat,\r\n      scratchProjectTo2DCartesian3\r\n    );\r\n\r\n    projectedValues[index++] = projectedLonLat.x;\r\n    projectedValues[index++] = projectedLonLat.y;\r\n    projectedValues[index++] = projectedLonLat.z;\r\n  }\r\n\r\n  // Rename original cartesians to WGS84 cartesians.\r\n  geometry.attributes[attributeName3D] = attribute;\r\n\r\n  // Replace original cartesians with 2D projected cartesians\r\n  geometry.attributes[attributeName2D] = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: projectedValues,\r\n  });\r\n  delete geometry.attributes[attributeName];\r\n\r\n  return geometry;\r\n};\r\n\r\nconst encodedResult = {\r\n  high: 0.0,\r\n  low: 0.0,\r\n};\r\n\r\n/**\r\n * Encodes floating-point geometry attribute values as two separate attributes to improve\r\n * rendering precision.\r\n * <p>\r\n * This is commonly used to create high-precision position vertex attributes.\r\n * </p>\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @param {String} attributeName The name of the attribute.\r\n * @param {String} attributeHighName The name of the attribute for the encoded high bits.\r\n * @param {String} attributeLowName The name of the attribute for the encoded low bits.\r\n * @returns {Geometry} The modified <code>geometry</code> argument, with its encoded attribute.\r\n *\r\n * @exception {DeveloperError} geometry must have attribute matching the attributeName argument.\r\n * @exception {DeveloperError} The attribute componentDatatype must be ComponentDatatype.DOUBLE.\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.encodeAttribute(geometry, 'position3D', 'position3DHigh', 'position3DLow');\r\n */\r\nGeometryPipeline.encodeAttribute = function (\r\n  geometry,\r\n  attributeName,\r\n  attributeHighName,\r\n  attributeLowName\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  if (!defined(attributeName)) {\r\n    throw new DeveloperError(\"attributeName is required.\");\r\n  }\r\n  if (!defined(attributeHighName)) {\r\n    throw new DeveloperError(\"attributeHighName is required.\");\r\n  }\r\n  if (!defined(attributeLowName)) {\r\n    throw new DeveloperError(\"attributeLowName is required.\");\r\n  }\r\n  if (!defined(geometry.attributes[attributeName])) {\r\n    throw new DeveloperError(\r\n      `geometry must have attribute matching the attributeName argument: ${attributeName}.`\r\n    );\r\n  }\r\n  if (\r\n    geometry.attributes[attributeName].componentDatatype !==\r\n    ComponentDatatype.DOUBLE\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"The attribute componentDatatype must be ComponentDatatype.DOUBLE.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const attribute = geometry.attributes[attributeName];\r\n  const values = attribute.values;\r\n  const length = values.length;\r\n  const highValues = new Float32Array(length);\r\n  const lowValues = new Float32Array(length);\r\n\r\n  for (let i = 0; i < length; ++i) {\r\n    EncodedCartesian3.encode(values[i], encodedResult);\r\n    highValues[i] = encodedResult.high;\r\n    lowValues[i] = encodedResult.low;\r\n  }\r\n\r\n  const componentsPerAttribute = attribute.componentsPerAttribute;\r\n\r\n  geometry.attributes[attributeHighName] = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.FLOAT,\r\n    componentsPerAttribute: componentsPerAttribute,\r\n    values: highValues,\r\n  });\r\n  geometry.attributes[attributeLowName] = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.FLOAT,\r\n    componentsPerAttribute: componentsPerAttribute,\r\n    values: lowValues,\r\n  });\r\n  delete geometry.attributes[attributeName];\r\n\r\n  return geometry;\r\n};\r\n\r\nlet scratchCartesian3 = new Cartesian3();\r\n\r\nfunction transformPoint(matrix, attribute) {\r\n  if (defined(attribute)) {\r\n    const values = attribute.values;\r\n    const length = values.length;\r\n    for (let i = 0; i < length; i += 3) {\r\n      Cartesian3.unpack(values, i, scratchCartesian3);\r\n      Matrix4.multiplyByPoint(matrix, scratchCartesian3, scratchCartesian3);\r\n      Cartesian3.pack(scratchCartesian3, values, i);\r\n    }\r\n  }\r\n}\r\n\r\nfunction transformVector(matrix, attribute) {\r\n  if (defined(attribute)) {\r\n    const values = attribute.values;\r\n    const length = values.length;\r\n    for (let i = 0; i < length; i += 3) {\r\n      Cartesian3.unpack(values, i, scratchCartesian3);\r\n      Matrix3.multiplyByVector(matrix, scratchCartesian3, scratchCartesian3);\r\n      scratchCartesian3 = Cartesian3.normalize(\r\n        scratchCartesian3,\r\n        scratchCartesian3\r\n      );\r\n      Cartesian3.pack(scratchCartesian3, values, i);\r\n    }\r\n  }\r\n}\r\n\r\nconst inverseTranspose = new Matrix4();\r\nconst normalMatrix = new Matrix3();\r\n\r\n/**\r\n * Transforms a geometry instance to world coordinates.  This changes\r\n * the instance's <code>modelMatrix</code> to {@link Matrix4.IDENTITY} and transforms the\r\n * following attributes if they are present: <code>position</code>, <code>normal</code>,\r\n * <code>tangent</code>, and <code>bitangent</code>.\r\n *\r\n * @param {GeometryInstance} instance The geometry instance to modify.\r\n * @returns {GeometryInstance} The modified <code>instance</code> argument, with its attributes transforms to world coordinates.\r\n *\r\n * @example\r\n * Cesium.GeometryPipeline.transformToWorldCoordinates(instance);\r\n */\r\nGeometryPipeline.transformToWorldCoordinates = function (instance) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(instance)) {\r\n    throw new DeveloperError(\"instance is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const modelMatrix = instance.modelMatrix;\r\n\r\n  if (Matrix4.equals(modelMatrix, Matrix4.IDENTITY)) {\r\n    // Already in world coordinates\r\n    return instance;\r\n  }\r\n\r\n  const attributes = instance.geometry.attributes;\r\n\r\n  // Transform attributes in known vertex formats\r\n  transformPoint(modelMatrix, attributes.position);\r\n  transformPoint(modelMatrix, attributes.prevPosition);\r\n  transformPoint(modelMatrix, attributes.nextPosition);\r\n\r\n  if (\r\n    defined(attributes.normal) ||\r\n    defined(attributes.tangent) ||\r\n    defined(attributes.bitangent)\r\n  ) {\r\n    Matrix4.inverse(modelMatrix, inverseTranspose);\r\n    Matrix4.transpose(inverseTranspose, inverseTranspose);\r\n    Matrix4.getMatrix3(inverseTranspose, normalMatrix);\r\n\r\n    transformVector(normalMatrix, attributes.normal);\r\n    transformVector(normalMatrix, attributes.tangent);\r\n    transformVector(normalMatrix, attributes.bitangent);\r\n  }\r\n\r\n  const boundingSphere = instance.geometry.boundingSphere;\r\n  if (defined(boundingSphere)) {\r\n    instance.geometry.boundingSphere = BoundingSphere.transform(\r\n      boundingSphere,\r\n      modelMatrix,\r\n      boundingSphere\r\n    );\r\n  }\r\n\r\n  instance.modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\r\n\r\n  return instance;\r\n};\r\n\r\nfunction findAttributesInAllGeometries(instances, propertyName) {\r\n  const length = instances.length;\r\n\r\n  const attributesInAllGeometries = {};\r\n\r\n  const attributes0 = instances[0][propertyName].attributes;\r\n  let name;\r\n\r\n  for (name in attributes0) {\r\n    if (\r\n      attributes0.hasOwnProperty(name) &&\r\n      defined(attributes0[name]) &&\r\n      defined(attributes0[name].values)\r\n    ) {\r\n      const attribute = attributes0[name];\r\n      let numberOfComponents = attribute.values.length;\r\n      let inAllGeometries = true;\r\n\r\n      // Does this same attribute exist in all geometries?\r\n      for (let i = 1; i < length; ++i) {\r\n        const otherAttribute = instances[i][propertyName].attributes[name];\r\n\r\n        if (\r\n          !defined(otherAttribute) ||\r\n          attribute.componentDatatype !== otherAttribute.componentDatatype ||\r\n          attribute.componentsPerAttribute !==\r\n            otherAttribute.componentsPerAttribute ||\r\n          attribute.normalize !== otherAttribute.normalize\r\n        ) {\r\n          inAllGeometries = false;\r\n          break;\r\n        }\r\n\r\n        numberOfComponents += otherAttribute.values.length;\r\n      }\r\n\r\n      if (inAllGeometries) {\r\n        attributesInAllGeometries[name] = new GeometryAttribute({\r\n          componentDatatype: attribute.componentDatatype,\r\n          componentsPerAttribute: attribute.componentsPerAttribute,\r\n          normalize: attribute.normalize,\r\n          values: ComponentDatatype.createTypedArray(\r\n            attribute.componentDatatype,\r\n            numberOfComponents\r\n          ),\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return attributesInAllGeometries;\r\n}\r\n\r\nconst tempScratch = new Cartesian3();\r\n\r\nfunction combineGeometries(instances, propertyName) {\r\n  const length = instances.length;\r\n\r\n  let name;\r\n  let i;\r\n  let j;\r\n  let k;\r\n\r\n  const m = instances[0].modelMatrix;\r\n  const haveIndices = defined(instances[0][propertyName].indices);\r\n  const primitiveType = instances[0][propertyName].primitiveType;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  for (i = 1; i < length; ++i) {\r\n    if (!Matrix4.equals(instances[i].modelMatrix, m)) {\r\n      throw new DeveloperError(\"All instances must have the same modelMatrix.\");\r\n    }\r\n    if (defined(instances[i][propertyName].indices) !== haveIndices) {\r\n      throw new DeveloperError(\r\n        \"All instance geometries must have an indices or not have one.\"\r\n      );\r\n    }\r\n    if (instances[i][propertyName].primitiveType !== primitiveType) {\r\n      throw new DeveloperError(\r\n        \"All instance geometries must have the same primitiveType.\"\r\n      );\r\n    }\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  // Find subset of attributes in all geometries\r\n  const attributes = findAttributesInAllGeometries(instances, propertyName);\r\n  let values;\r\n  let sourceValues;\r\n  let sourceValuesLength;\r\n\r\n  // Combine attributes from each geometry into a single typed array\r\n  for (name in attributes) {\r\n    if (attributes.hasOwnProperty(name)) {\r\n      values = attributes[name].values;\r\n\r\n      k = 0;\r\n      for (i = 0; i < length; ++i) {\r\n        sourceValues = instances[i][propertyName].attributes[name].values;\r\n        sourceValuesLength = sourceValues.length;\r\n\r\n        for (j = 0; j < sourceValuesLength; ++j) {\r\n          values[k++] = sourceValues[j];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Combine index lists\r\n  let indices;\r\n\r\n  if (haveIndices) {\r\n    let numberOfIndices = 0;\r\n    for (i = 0; i < length; ++i) {\r\n      numberOfIndices += instances[i][propertyName].indices.length;\r\n    }\r\n\r\n    const numberOfVertices = Geometry.computeNumberOfVertices(\r\n      new Geometry({\r\n        attributes: attributes,\r\n        primitiveType: PrimitiveType.POINTS,\r\n      })\r\n    );\r\n    const destIndices = IndexDatatype.createTypedArray(\r\n      numberOfVertices,\r\n      numberOfIndices\r\n    );\r\n\r\n    let destOffset = 0;\r\n    let offset = 0;\r\n\r\n    for (i = 0; i < length; ++i) {\r\n      const sourceIndices = instances[i][propertyName].indices;\r\n      const sourceIndicesLen = sourceIndices.length;\r\n\r\n      for (k = 0; k < sourceIndicesLen; ++k) {\r\n        destIndices[destOffset++] = offset + sourceIndices[k];\r\n      }\r\n\r\n      offset += Geometry.computeNumberOfVertices(instances[i][propertyName]);\r\n    }\r\n\r\n    indices = destIndices;\r\n  }\r\n\r\n  // Create bounding sphere that includes all instances\r\n  let center = new Cartesian3();\r\n  let radius = 0.0;\r\n  let bs;\r\n\r\n  for (i = 0; i < length; ++i) {\r\n    bs = instances[i][propertyName].boundingSphere;\r\n    if (!defined(bs)) {\r\n      // If any geometries have an undefined bounding sphere, then so does the combined geometry\r\n      center = undefined;\r\n      break;\r\n    }\r\n\r\n    Cartesian3.add(bs.center, center, center);\r\n  }\r\n\r\n  if (defined(center)) {\r\n    Cartesian3.divideByScalar(center, length, center);\r\n\r\n    for (i = 0; i < length; ++i) {\r\n      bs = instances[i][propertyName].boundingSphere;\r\n      const tempRadius =\r\n        Cartesian3.magnitude(\r\n          Cartesian3.subtract(bs.center, center, tempScratch)\r\n        ) + bs.radius;\r\n\r\n      if (tempRadius > radius) {\r\n        radius = tempRadius;\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: primitiveType,\r\n    boundingSphere: defined(center)\r\n      ? new BoundingSphere(center, radius)\r\n      : undefined,\r\n  });\r\n}\r\n\r\n/**\r\n * Combines geometry from several {@link GeometryInstance} objects into one geometry.\r\n * This concatenates the attributes, concatenates and adjusts the indices, and creates\r\n * a bounding sphere encompassing all instances.\r\n * <p>\r\n * If the instances do not have the same attributes, a subset of attributes common\r\n * to all instances is used, and the others are ignored.\r\n * </p>\r\n * <p>\r\n * This is used by {@link Primitive} to efficiently render a large amount of static data.\r\n * </p>\r\n *\r\n * @private\r\n *\r\n * @param {GeometryInstance[]} [instances] The array of {@link GeometryInstance} objects whose geometry will be combined.\r\n * @returns {Geometry} A single geometry created from the provided geometry instances.\r\n *\r\n * @exception {DeveloperError} All instances must have the same modelMatrix.\r\n * @exception {DeveloperError} All instance geometries must have an indices or not have one.\r\n * @exception {DeveloperError} All instance geometries must have the same primitiveType.\r\n *\r\n *\r\n * @example\r\n * for (let i = 0; i < instances.length; ++i) {\r\n *   Cesium.GeometryPipeline.transformToWorldCoordinates(instances[i]);\r\n * }\r\n * const geometries = Cesium.GeometryPipeline.combineInstances(instances);\r\n *\r\n * @see GeometryPipeline.transformToWorldCoordinates\r\n */\r\nGeometryPipeline.combineInstances = function (instances) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(instances) || instances.length < 1) {\r\n    throw new DeveloperError(\r\n      \"instances is required and must have length greater than zero.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const instanceGeometry = [];\r\n  const instanceSplitGeometry = [];\r\n  const length = instances.length;\r\n  for (let i = 0; i < length; ++i) {\r\n    const instance = instances[i];\r\n\r\n    if (defined(instance.geometry)) {\r\n      instanceGeometry.push(instance);\r\n    } else if (\r\n      defined(instance.westHemisphereGeometry) &&\r\n      defined(instance.eastHemisphereGeometry)\r\n    ) {\r\n      instanceSplitGeometry.push(instance);\r\n    }\r\n  }\r\n\r\n  const geometries = [];\r\n  if (instanceGeometry.length > 0) {\r\n    geometries.push(combineGeometries(instanceGeometry, \"geometry\"));\r\n  }\r\n\r\n  if (instanceSplitGeometry.length > 0) {\r\n    geometries.push(\r\n      combineGeometries(instanceSplitGeometry, \"westHemisphereGeometry\")\r\n    );\r\n    geometries.push(\r\n      combineGeometries(instanceSplitGeometry, \"eastHemisphereGeometry\")\r\n    );\r\n  }\r\n\r\n  return geometries;\r\n};\r\n\r\nconst normal = new Cartesian3();\r\nconst v0 = new Cartesian3();\r\nconst v1 = new Cartesian3();\r\nconst v2 = new Cartesian3();\r\n\r\n/**\r\n * Computes per-vertex normals for a geometry containing <code>TRIANGLES</code> by averaging the normals of\r\n * all triangles incident to the vertex.  The result is a new <code>normal</code> attribute added to the geometry.\r\n * This assumes a counter-clockwise winding order.\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @returns {Geometry} The modified <code>geometry</code> argument with the computed <code>normal</code> attribute.\r\n *\r\n * @exception {DeveloperError} geometry.indices length must be greater than 0 and be a multiple of 3.\r\n * @exception {DeveloperError} geometry.primitiveType must be {@link PrimitiveType.TRIANGLES}.\r\n *\r\n * @example\r\n * Cesium.GeometryPipeline.computeNormal(geometry);\r\n */\r\nGeometryPipeline.computeNormal = function (geometry) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  if (\r\n    !defined(geometry.attributes.position) ||\r\n    !defined(geometry.attributes.position.values)\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"geometry.attributes.position.values is required.\"\r\n    );\r\n  }\r\n  if (!defined(geometry.indices)) {\r\n    throw new DeveloperError(\"geometry.indices is required.\");\r\n  }\r\n  if (geometry.indices.length < 2 || geometry.indices.length % 3 !== 0) {\r\n    throw new DeveloperError(\r\n      \"geometry.indices length must be greater than 0 and be a multiple of 3.\"\r\n    );\r\n  }\r\n  if (geometry.primitiveType !== PrimitiveType.TRIANGLES) {\r\n    throw new DeveloperError(\r\n      \"geometry.primitiveType must be PrimitiveType.TRIANGLES.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const indices = geometry.indices;\r\n  const attributes = geometry.attributes;\r\n  const vertices = attributes.position.values;\r\n  const numVertices = attributes.position.values.length / 3;\r\n  const numIndices = indices.length;\r\n  const normalsPerVertex = new Array(numVertices);\r\n  const normalsPerTriangle = new Array(numIndices / 3);\r\n  const normalIndices = new Array(numIndices);\r\n  let i;\r\n  for (i = 0; i < numVertices; i++) {\r\n    normalsPerVertex[i] = {\r\n      indexOffset: 0,\r\n      count: 0,\r\n      currentCount: 0,\r\n    };\r\n  }\r\n\r\n  let j = 0;\r\n  for (i = 0; i < numIndices; i += 3) {\r\n    const i0 = indices[i];\r\n    const i1 = indices[i + 1];\r\n    const i2 = indices[i + 2];\r\n    const i03 = i0 * 3;\r\n    const i13 = i1 * 3;\r\n    const i23 = i2 * 3;\r\n\r\n    v0.x = vertices[i03];\r\n    v0.y = vertices[i03 + 1];\r\n    v0.z = vertices[i03 + 2];\r\n    v1.x = vertices[i13];\r\n    v1.y = vertices[i13 + 1];\r\n    v1.z = vertices[i13 + 2];\r\n    v2.x = vertices[i23];\r\n    v2.y = vertices[i23 + 1];\r\n    v2.z = vertices[i23 + 2];\r\n\r\n    normalsPerVertex[i0].count++;\r\n    normalsPerVertex[i1].count++;\r\n    normalsPerVertex[i2].count++;\r\n\r\n    Cartesian3.subtract(v1, v0, v1);\r\n    Cartesian3.subtract(v2, v0, v2);\r\n    normalsPerTriangle[j] = Cartesian3.cross(v1, v2, new Cartesian3());\r\n    j++;\r\n  }\r\n\r\n  let indexOffset = 0;\r\n  for (i = 0; i < numVertices; i++) {\r\n    normalsPerVertex[i].indexOffset += indexOffset;\r\n    indexOffset += normalsPerVertex[i].count;\r\n  }\r\n\r\n  j = 0;\r\n  let vertexNormalData;\r\n  for (i = 0; i < numIndices; i += 3) {\r\n    vertexNormalData = normalsPerVertex[indices[i]];\r\n    let index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\r\n    normalIndices[index] = j;\r\n    vertexNormalData.currentCount++;\r\n\r\n    vertexNormalData = normalsPerVertex[indices[i + 1]];\r\n    index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\r\n    normalIndices[index] = j;\r\n    vertexNormalData.currentCount++;\r\n\r\n    vertexNormalData = normalsPerVertex[indices[i + 2]];\r\n    index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\r\n    normalIndices[index] = j;\r\n    vertexNormalData.currentCount++;\r\n\r\n    j++;\r\n  }\r\n\r\n  const normalValues = new Float32Array(numVertices * 3);\r\n  for (i = 0; i < numVertices; i++) {\r\n    const i3 = i * 3;\r\n    vertexNormalData = normalsPerVertex[i];\r\n    Cartesian3.clone(Cartesian3.ZERO, normal);\r\n    if (vertexNormalData.count > 0) {\r\n      for (j = 0; j < vertexNormalData.count; j++) {\r\n        Cartesian3.add(\r\n          normal,\r\n          normalsPerTriangle[normalIndices[vertexNormalData.indexOffset + j]],\r\n          normal\r\n        );\r\n      }\r\n\r\n      // We can run into an issue where a vertex is used with 2 primitives that have opposite winding order.\r\n      if (\r\n        Cartesian3.equalsEpsilon(Cartesian3.ZERO, normal, CesiumMath.EPSILON10)\r\n      ) {\r\n        Cartesian3.clone(\r\n          normalsPerTriangle[normalIndices[vertexNormalData.indexOffset]],\r\n          normal\r\n        );\r\n      }\r\n    }\r\n\r\n    // We end up with a zero vector probably because of a degenerate triangle\r\n    if (\r\n      Cartesian3.equalsEpsilon(Cartesian3.ZERO, normal, CesiumMath.EPSILON10)\r\n    ) {\r\n      // Default to (0,0,1)\r\n      normal.z = 1.0;\r\n    }\r\n\r\n    Cartesian3.normalize(normal, normal);\r\n    normalValues[i3] = normal.x;\r\n    normalValues[i3 + 1] = normal.y;\r\n    normalValues[i3 + 2] = normal.z;\r\n  }\r\n\r\n  geometry.attributes.normal = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.FLOAT,\r\n    componentsPerAttribute: 3,\r\n    values: normalValues,\r\n  });\r\n\r\n  return geometry;\r\n};\r\n\r\nconst normalScratch = new Cartesian3();\r\nconst normalScale = new Cartesian3();\r\nconst tScratch = new Cartesian3();\r\n\r\n/**\r\n * Computes per-vertex tangents and bitangents for a geometry containing <code>TRIANGLES</code>.\r\n * The result is new <code>tangent</code> and <code>bitangent</code> attributes added to the geometry.\r\n * This assumes a counter-clockwise winding order.\r\n * <p>\r\n * Based on <a href=\"http://www.terathon.com/code/tangent.html\">Computing Tangent Space Basis Vectors\r\n * for an Arbitrary Mesh</a> by Eric Lengyel.\r\n * </p>\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @returns {Geometry} The modified <code>geometry</code> argument with the computed <code>tangent</code> and <code>bitangent</code> attributes.\r\n *\r\n * @exception {DeveloperError} geometry.indices length must be greater than 0 and be a multiple of 3.\r\n * @exception {DeveloperError} geometry.primitiveType must be {@link PrimitiveType.TRIANGLES}.\r\n *\r\n * @example\r\n * Cesium.GeometryPipeline.computeTangentAndBiTangent(geometry);\r\n */\r\nGeometryPipeline.computeTangentAndBitangent = function (geometry) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const attributes = geometry.attributes;\r\n  const indices = geometry.indices;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(attributes.position) || !defined(attributes.position.values)) {\r\n    throw new DeveloperError(\r\n      \"geometry.attributes.position.values is required.\"\r\n    );\r\n  }\r\n  if (!defined(attributes.normal) || !defined(attributes.normal.values)) {\r\n    throw new DeveloperError(\"geometry.attributes.normal.values is required.\");\r\n  }\r\n  if (!defined(attributes.st) || !defined(attributes.st.values)) {\r\n    throw new DeveloperError(\"geometry.attributes.st.values is required.\");\r\n  }\r\n  if (!defined(indices)) {\r\n    throw new DeveloperError(\"geometry.indices is required.\");\r\n  }\r\n  if (indices.length < 2 || indices.length % 3 !== 0) {\r\n    throw new DeveloperError(\r\n      \"geometry.indices length must be greater than 0 and be a multiple of 3.\"\r\n    );\r\n  }\r\n  if (geometry.primitiveType !== PrimitiveType.TRIANGLES) {\r\n    throw new DeveloperError(\r\n      \"geometry.primitiveType must be PrimitiveType.TRIANGLES.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const vertices = geometry.attributes.position.values;\r\n  const normals = geometry.attributes.normal.values;\r\n  const st = geometry.attributes.st.values;\r\n\r\n  const numVertices = geometry.attributes.position.values.length / 3;\r\n  const numIndices = indices.length;\r\n  const tan1 = new Array(numVertices * 3);\r\n\r\n  let i;\r\n  for (i = 0; i < tan1.length; i++) {\r\n    tan1[i] = 0;\r\n  }\r\n\r\n  let i03;\r\n  let i13;\r\n  let i23;\r\n  for (i = 0; i < numIndices; i += 3) {\r\n    const i0 = indices[i];\r\n    const i1 = indices[i + 1];\r\n    const i2 = indices[i + 2];\r\n    i03 = i0 * 3;\r\n    i13 = i1 * 3;\r\n    i23 = i2 * 3;\r\n    const i02 = i0 * 2;\r\n    const i12 = i1 * 2;\r\n    const i22 = i2 * 2;\r\n\r\n    const ux = vertices[i03];\r\n    const uy = vertices[i03 + 1];\r\n    const uz = vertices[i03 + 2];\r\n\r\n    const wx = st[i02];\r\n    const wy = st[i02 + 1];\r\n    const t1 = st[i12 + 1] - wy;\r\n    const t2 = st[i22 + 1] - wy;\r\n\r\n    const r = 1.0 / ((st[i12] - wx) * t2 - (st[i22] - wx) * t1);\r\n    const sdirx = (t2 * (vertices[i13] - ux) - t1 * (vertices[i23] - ux)) * r;\r\n    const sdiry =\r\n      (t2 * (vertices[i13 + 1] - uy) - t1 * (vertices[i23 + 1] - uy)) * r;\r\n    const sdirz =\r\n      (t2 * (vertices[i13 + 2] - uz) - t1 * (vertices[i23 + 2] - uz)) * r;\r\n\r\n    tan1[i03] += sdirx;\r\n    tan1[i03 + 1] += sdiry;\r\n    tan1[i03 + 2] += sdirz;\r\n\r\n    tan1[i13] += sdirx;\r\n    tan1[i13 + 1] += sdiry;\r\n    tan1[i13 + 2] += sdirz;\r\n\r\n    tan1[i23] += sdirx;\r\n    tan1[i23 + 1] += sdiry;\r\n    tan1[i23 + 2] += sdirz;\r\n  }\r\n\r\n  const tangentValues = new Float32Array(numVertices * 3);\r\n  const bitangentValues = new Float32Array(numVertices * 3);\r\n\r\n  for (i = 0; i < numVertices; i++) {\r\n    i03 = i * 3;\r\n    i13 = i03 + 1;\r\n    i23 = i03 + 2;\r\n\r\n    const n = Cartesian3.fromArray(normals, i03, normalScratch);\r\n    const t = Cartesian3.fromArray(tan1, i03, tScratch);\r\n    const scalar = Cartesian3.dot(n, t);\r\n    Cartesian3.multiplyByScalar(n, scalar, normalScale);\r\n    Cartesian3.normalize(Cartesian3.subtract(t, normalScale, t), t);\r\n\r\n    tangentValues[i03] = t.x;\r\n    tangentValues[i13] = t.y;\r\n    tangentValues[i23] = t.z;\r\n\r\n    Cartesian3.normalize(Cartesian3.cross(n, t, t), t);\r\n\r\n    bitangentValues[i03] = t.x;\r\n    bitangentValues[i13] = t.y;\r\n    bitangentValues[i23] = t.z;\r\n  }\r\n\r\n  geometry.attributes.tangent = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.FLOAT,\r\n    componentsPerAttribute: 3,\r\n    values: tangentValues,\r\n  });\r\n\r\n  geometry.attributes.bitangent = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.FLOAT,\r\n    componentsPerAttribute: 3,\r\n    values: bitangentValues,\r\n  });\r\n\r\n  return geometry;\r\n};\r\n\r\nconst scratchCartesian2 = new Cartesian2();\r\nconst toEncode1 = new Cartesian3();\r\nconst toEncode2 = new Cartesian3();\r\nconst toEncode3 = new Cartesian3();\r\nlet encodeResult2 = new Cartesian2();\r\n/**\r\n * Compresses and packs geometry normal attribute values to save memory.\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @returns {Geometry} The modified <code>geometry</code> argument, with its normals compressed and packed.\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.compressVertices(geometry);\r\n */\r\nGeometryPipeline.compressVertices = function (geometry) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(geometry)) {\r\n    throw new DeveloperError(\"geometry is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const extrudeAttribute = geometry.attributes.extrudeDirection;\r\n  let i;\r\n  let numVertices;\r\n  if (defined(extrudeAttribute)) {\r\n    //only shadow volumes use extrudeDirection, and shadow volumes use vertexFormat: POSITION_ONLY so we don't need to check other attributes\r\n    const extrudeDirections = extrudeAttribute.values;\r\n    numVertices = extrudeDirections.length / 3.0;\r\n    const compressedDirections = new Float32Array(numVertices * 2);\r\n\r\n    let i2 = 0;\r\n    for (i = 0; i < numVertices; ++i) {\r\n      Cartesian3.fromArray(extrudeDirections, i * 3.0, toEncode1);\r\n      if (Cartesian3.equals(toEncode1, Cartesian3.ZERO)) {\r\n        i2 += 2;\r\n        continue;\r\n      }\r\n      encodeResult2 = AttributeCompression.octEncodeInRange(\r\n        toEncode1,\r\n        65535,\r\n        encodeResult2\r\n      );\r\n      compressedDirections[i2++] = encodeResult2.x;\r\n      compressedDirections[i2++] = encodeResult2.y;\r\n    }\r\n\r\n    geometry.attributes.compressedAttributes = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: compressedDirections,\r\n    });\r\n    delete geometry.attributes.extrudeDirection;\r\n    return geometry;\r\n  }\r\n\r\n  const normalAttribute = geometry.attributes.normal;\r\n  const stAttribute = geometry.attributes.st;\r\n\r\n  const hasNormal = defined(normalAttribute);\r\n  const hasSt = defined(stAttribute);\r\n  if (!hasNormal && !hasSt) {\r\n    return geometry;\r\n  }\r\n\r\n  const tangentAttribute = geometry.attributes.tangent;\r\n  const bitangentAttribute = geometry.attributes.bitangent;\r\n\r\n  const hasTangent = defined(tangentAttribute);\r\n  const hasBitangent = defined(bitangentAttribute);\r\n\r\n  let normals;\r\n  let st;\r\n  let tangents;\r\n  let bitangents;\r\n\r\n  if (hasNormal) {\r\n    normals = normalAttribute.values;\r\n  }\r\n  if (hasSt) {\r\n    st = stAttribute.values;\r\n  }\r\n  if (hasTangent) {\r\n    tangents = tangentAttribute.values;\r\n  }\r\n  if (hasBitangent) {\r\n    bitangents = bitangentAttribute.values;\r\n  }\r\n\r\n  const length = hasNormal ? normals.length : st.length;\r\n  const numComponents = hasNormal ? 3.0 : 2.0;\r\n  numVertices = length / numComponents;\r\n\r\n  let compressedLength = numVertices;\r\n  let numCompressedComponents = hasSt && hasNormal ? 2.0 : 1.0;\r\n  numCompressedComponents += hasTangent || hasBitangent ? 1.0 : 0.0;\r\n  compressedLength *= numCompressedComponents;\r\n\r\n  const compressedAttributes = new Float32Array(compressedLength);\r\n\r\n  let normalIndex = 0;\r\n  for (i = 0; i < numVertices; ++i) {\r\n    if (hasSt) {\r\n      Cartesian2.fromArray(st, i * 2.0, scratchCartesian2);\r\n      compressedAttributes[\r\n        normalIndex++\r\n      ] = AttributeCompression.compressTextureCoordinates(scratchCartesian2);\r\n    }\r\n\r\n    const index = i * 3.0;\r\n    if (hasNormal && defined(tangents) && defined(bitangents)) {\r\n      Cartesian3.fromArray(normals, index, toEncode1);\r\n      Cartesian3.fromArray(tangents, index, toEncode2);\r\n      Cartesian3.fromArray(bitangents, index, toEncode3);\r\n\r\n      AttributeCompression.octPack(\r\n        toEncode1,\r\n        toEncode2,\r\n        toEncode3,\r\n        scratchCartesian2\r\n      );\r\n      compressedAttributes[normalIndex++] = scratchCartesian2.x;\r\n      compressedAttributes[normalIndex++] = scratchCartesian2.y;\r\n    } else {\r\n      if (hasNormal) {\r\n        Cartesian3.fromArray(normals, index, toEncode1);\r\n        compressedAttributes[\r\n          normalIndex++\r\n        ] = AttributeCompression.octEncodeFloat(toEncode1);\r\n      }\r\n\r\n      if (hasTangent) {\r\n        Cartesian3.fromArray(tangents, index, toEncode1);\r\n        compressedAttributes[\r\n          normalIndex++\r\n        ] = AttributeCompression.octEncodeFloat(toEncode1);\r\n      }\r\n\r\n      if (hasBitangent) {\r\n        Cartesian3.fromArray(bitangents, index, toEncode1);\r\n        compressedAttributes[\r\n          normalIndex++\r\n        ] = AttributeCompression.octEncodeFloat(toEncode1);\r\n      }\r\n    }\r\n  }\r\n\r\n  geometry.attributes.compressedAttributes = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.FLOAT,\r\n    componentsPerAttribute: numCompressedComponents,\r\n    values: compressedAttributes,\r\n  });\r\n\r\n  if (hasNormal) {\r\n    delete geometry.attributes.normal;\r\n  }\r\n  if (hasSt) {\r\n    delete geometry.attributes.st;\r\n  }\r\n  if (hasBitangent) {\r\n    delete geometry.attributes.bitangent;\r\n  }\r\n  if (hasTangent) {\r\n    delete geometry.attributes.tangent;\r\n  }\r\n\r\n  return geometry;\r\n};\r\n\r\nfunction indexTriangles(geometry) {\r\n  if (defined(geometry.indices)) {\r\n    return geometry;\r\n  }\r\n  const numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (numberOfVertices < 3) {\r\n    throw new DeveloperError(\"The number of vertices must be at least three.\");\r\n  }\r\n  if (numberOfVertices % 3 !== 0) {\r\n    throw new DeveloperError(\r\n      \"The number of vertices must be a multiple of three.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const indices = IndexDatatype.createTypedArray(\r\n    numberOfVertices,\r\n    numberOfVertices\r\n  );\r\n  for (let i = 0; i < numberOfVertices; ++i) {\r\n    indices[i] = i;\r\n  }\r\n\r\n  geometry.indices = indices;\r\n  return geometry;\r\n}\r\n\r\nfunction indexTriangleFan(geometry) {\r\n  const numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (numberOfVertices < 3) {\r\n    throw new DeveloperError(\"The number of vertices must be at least three.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const indices = IndexDatatype.createTypedArray(\r\n    numberOfVertices,\r\n    (numberOfVertices - 2) * 3\r\n  );\r\n  indices[0] = 1;\r\n  indices[1] = 0;\r\n  indices[2] = 2;\r\n\r\n  let indicesIndex = 3;\r\n  for (let i = 3; i < numberOfVertices; ++i) {\r\n    indices[indicesIndex++] = i - 1;\r\n    indices[indicesIndex++] = 0;\r\n    indices[indicesIndex++] = i;\r\n  }\r\n\r\n  geometry.indices = indices;\r\n  geometry.primitiveType = PrimitiveType.TRIANGLES;\r\n  return geometry;\r\n}\r\n\r\nfunction indexTriangleStrip(geometry) {\r\n  const numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (numberOfVertices < 3) {\r\n    throw new DeveloperError(\"The number of vertices must be at least 3.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const indices = IndexDatatype.createTypedArray(\r\n    numberOfVertices,\r\n    (numberOfVertices - 2) * 3\r\n  );\r\n  indices[0] = 0;\r\n  indices[1] = 1;\r\n  indices[2] = 2;\r\n\r\n  if (numberOfVertices > 3) {\r\n    indices[3] = 0;\r\n    indices[4] = 2;\r\n    indices[5] = 3;\r\n  }\r\n\r\n  let indicesIndex = 6;\r\n  for (let i = 3; i < numberOfVertices - 1; i += 2) {\r\n    indices[indicesIndex++] = i;\r\n    indices[indicesIndex++] = i - 1;\r\n    indices[indicesIndex++] = i + 1;\r\n\r\n    if (i + 2 < numberOfVertices) {\r\n      indices[indicesIndex++] = i;\r\n      indices[indicesIndex++] = i + 1;\r\n      indices[indicesIndex++] = i + 2;\r\n    }\r\n  }\r\n\r\n  geometry.indices = indices;\r\n  geometry.primitiveType = PrimitiveType.TRIANGLES;\r\n  return geometry;\r\n}\r\n\r\nfunction indexLines(geometry) {\r\n  if (defined(geometry.indices)) {\r\n    return geometry;\r\n  }\r\n  const numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (numberOfVertices < 2) {\r\n    throw new DeveloperError(\"The number of vertices must be at least two.\");\r\n  }\r\n  if (numberOfVertices % 2 !== 0) {\r\n    throw new DeveloperError(\"The number of vertices must be a multiple of 2.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const indices = IndexDatatype.createTypedArray(\r\n    numberOfVertices,\r\n    numberOfVertices\r\n  );\r\n  for (let i = 0; i < numberOfVertices; ++i) {\r\n    indices[i] = i;\r\n  }\r\n\r\n  geometry.indices = indices;\r\n  return geometry;\r\n}\r\n\r\nfunction indexLineStrip(geometry) {\r\n  const numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (numberOfVertices < 2) {\r\n    throw new DeveloperError(\"The number of vertices must be at least two.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const indices = IndexDatatype.createTypedArray(\r\n    numberOfVertices,\r\n    (numberOfVertices - 1) * 2\r\n  );\r\n  indices[0] = 0;\r\n  indices[1] = 1;\r\n  let indicesIndex = 2;\r\n  for (let i = 2; i < numberOfVertices; ++i) {\r\n    indices[indicesIndex++] = i - 1;\r\n    indices[indicesIndex++] = i;\r\n  }\r\n\r\n  geometry.indices = indices;\r\n  geometry.primitiveType = PrimitiveType.LINES;\r\n  return geometry;\r\n}\r\n\r\nfunction indexLineLoop(geometry) {\r\n  const numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (numberOfVertices < 2) {\r\n    throw new DeveloperError(\"The number of vertices must be at least two.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const indices = IndexDatatype.createTypedArray(\r\n    numberOfVertices,\r\n    numberOfVertices * 2\r\n  );\r\n\r\n  indices[0] = 0;\r\n  indices[1] = 1;\r\n\r\n  let indicesIndex = 2;\r\n  for (let i = 2; i < numberOfVertices; ++i) {\r\n    indices[indicesIndex++] = i - 1;\r\n    indices[indicesIndex++] = i;\r\n  }\r\n\r\n  indices[indicesIndex++] = numberOfVertices - 1;\r\n  indices[indicesIndex] = 0;\r\n\r\n  geometry.indices = indices;\r\n  geometry.primitiveType = PrimitiveType.LINES;\r\n  return geometry;\r\n}\r\n\r\nfunction indexPrimitive(geometry) {\r\n  switch (geometry.primitiveType) {\r\n    case PrimitiveType.TRIANGLE_FAN:\r\n      return indexTriangleFan(geometry);\r\n    case PrimitiveType.TRIANGLE_STRIP:\r\n      return indexTriangleStrip(geometry);\r\n    case PrimitiveType.TRIANGLES:\r\n      return indexTriangles(geometry);\r\n    case PrimitiveType.LINE_STRIP:\r\n      return indexLineStrip(geometry);\r\n    case PrimitiveType.LINE_LOOP:\r\n      return indexLineLoop(geometry);\r\n    case PrimitiveType.LINES:\r\n      return indexLines(geometry);\r\n  }\r\n\r\n  return geometry;\r\n}\r\n\r\nfunction offsetPointFromXZPlane(p, isBehind) {\r\n  if (Math.abs(p.y) < CesiumMath.EPSILON6) {\r\n    if (isBehind) {\r\n      p.y = -CesiumMath.EPSILON6;\r\n    } else {\r\n      p.y = CesiumMath.EPSILON6;\r\n    }\r\n  }\r\n}\r\n\r\nfunction offsetTriangleFromXZPlane(p0, p1, p2) {\r\n  if (p0.y !== 0.0 && p1.y !== 0.0 && p2.y !== 0.0) {\r\n    offsetPointFromXZPlane(p0, p0.y < 0.0);\r\n    offsetPointFromXZPlane(p1, p1.y < 0.0);\r\n    offsetPointFromXZPlane(p2, p2.y < 0.0);\r\n    return;\r\n  }\r\n\r\n  const p0y = Math.abs(p0.y);\r\n  const p1y = Math.abs(p1.y);\r\n  const p2y = Math.abs(p2.y);\r\n\r\n  let sign;\r\n  if (p0y > p1y) {\r\n    if (p0y > p2y) {\r\n      sign = CesiumMath.sign(p0.y);\r\n    } else {\r\n      sign = CesiumMath.sign(p2.y);\r\n    }\r\n  } else if (p1y > p2y) {\r\n    sign = CesiumMath.sign(p1.y);\r\n  } else {\r\n    sign = CesiumMath.sign(p2.y);\r\n  }\r\n\r\n  const isBehind = sign < 0.0;\r\n  offsetPointFromXZPlane(p0, isBehind);\r\n  offsetPointFromXZPlane(p1, isBehind);\r\n  offsetPointFromXZPlane(p2, isBehind);\r\n}\r\n\r\nconst c3 = new Cartesian3();\r\nfunction getXZIntersectionOffsetPoints(p, p1, u1, v1) {\r\n  Cartesian3.add(\r\n    p,\r\n    Cartesian3.multiplyByScalar(\r\n      Cartesian3.subtract(p1, p, c3),\r\n      p.y / (p.y - p1.y),\r\n      c3\r\n    ),\r\n    u1\r\n  );\r\n  Cartesian3.clone(u1, v1);\r\n  offsetPointFromXZPlane(u1, true);\r\n  offsetPointFromXZPlane(v1, false);\r\n}\r\n\r\nconst u1 = new Cartesian3();\r\nconst u2 = new Cartesian3();\r\nconst q1 = new Cartesian3();\r\nconst q2 = new Cartesian3();\r\n\r\nconst splitTriangleResult = {\r\n  positions: new Array(7),\r\n  indices: new Array(3 * 3),\r\n};\r\n\r\nfunction splitTriangle(p0, p1, p2) {\r\n  // In WGS84 coordinates, for a triangle approximately on the\r\n  // ellipsoid to cross the IDL, first it needs to be on the\r\n  // negative side of the plane x = 0.\r\n  if (p0.x >= 0.0 || p1.x >= 0.0 || p2.x >= 0.0) {\r\n    return undefined;\r\n  }\r\n\r\n  offsetTriangleFromXZPlane(p0, p1, p2);\r\n\r\n  const p0Behind = p0.y < 0.0;\r\n  const p1Behind = p1.y < 0.0;\r\n  const p2Behind = p2.y < 0.0;\r\n\r\n  let numBehind = 0;\r\n  numBehind += p0Behind ? 1 : 0;\r\n  numBehind += p1Behind ? 1 : 0;\r\n  numBehind += p2Behind ? 1 : 0;\r\n\r\n  const indices = splitTriangleResult.indices;\r\n\r\n  if (numBehind === 1) {\r\n    indices[1] = 3;\r\n    indices[2] = 4;\r\n    indices[5] = 6;\r\n    indices[7] = 6;\r\n    indices[8] = 5;\r\n\r\n    if (p0Behind) {\r\n      getXZIntersectionOffsetPoints(p0, p1, u1, q1);\r\n      getXZIntersectionOffsetPoints(p0, p2, u2, q2);\r\n\r\n      indices[0] = 0;\r\n      indices[3] = 1;\r\n      indices[4] = 2;\r\n      indices[6] = 1;\r\n    } else if (p1Behind) {\r\n      getXZIntersectionOffsetPoints(p1, p2, u1, q1);\r\n      getXZIntersectionOffsetPoints(p1, p0, u2, q2);\r\n\r\n      indices[0] = 1;\r\n      indices[3] = 2;\r\n      indices[4] = 0;\r\n      indices[6] = 2;\r\n    } else if (p2Behind) {\r\n      getXZIntersectionOffsetPoints(p2, p0, u1, q1);\r\n      getXZIntersectionOffsetPoints(p2, p1, u2, q2);\r\n\r\n      indices[0] = 2;\r\n      indices[3] = 0;\r\n      indices[4] = 1;\r\n      indices[6] = 0;\r\n    }\r\n  } else if (numBehind === 2) {\r\n    indices[2] = 4;\r\n    indices[4] = 4;\r\n    indices[5] = 3;\r\n    indices[7] = 5;\r\n    indices[8] = 6;\r\n\r\n    if (!p0Behind) {\r\n      getXZIntersectionOffsetPoints(p0, p1, u1, q1);\r\n      getXZIntersectionOffsetPoints(p0, p2, u2, q2);\r\n\r\n      indices[0] = 1;\r\n      indices[1] = 2;\r\n      indices[3] = 1;\r\n      indices[6] = 0;\r\n    } else if (!p1Behind) {\r\n      getXZIntersectionOffsetPoints(p1, p2, u1, q1);\r\n      getXZIntersectionOffsetPoints(p1, p0, u2, q2);\r\n\r\n      indices[0] = 2;\r\n      indices[1] = 0;\r\n      indices[3] = 2;\r\n      indices[6] = 1;\r\n    } else if (!p2Behind) {\r\n      getXZIntersectionOffsetPoints(p2, p0, u1, q1);\r\n      getXZIntersectionOffsetPoints(p2, p1, u2, q2);\r\n\r\n      indices[0] = 0;\r\n      indices[1] = 1;\r\n      indices[3] = 0;\r\n      indices[6] = 2;\r\n    }\r\n  }\r\n\r\n  const positions = splitTriangleResult.positions;\r\n  positions[0] = p0;\r\n  positions[1] = p1;\r\n  positions[2] = p2;\r\n  positions.length = 3;\r\n\r\n  if (numBehind === 1 || numBehind === 2) {\r\n    positions[3] = u1;\r\n    positions[4] = u2;\r\n    positions[5] = q1;\r\n    positions[6] = q2;\r\n    positions.length = 7;\r\n  }\r\n\r\n  return splitTriangleResult;\r\n}\r\n\r\nfunction updateGeometryAfterSplit(geometry, computeBoundingSphere) {\r\n  const attributes = geometry.attributes;\r\n\r\n  if (attributes.position.values.length === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  for (const property in attributes) {\r\n    if (\r\n      attributes.hasOwnProperty(property) &&\r\n      defined(attributes[property]) &&\r\n      defined(attributes[property].values)\r\n    ) {\r\n      const attribute = attributes[property];\r\n      attribute.values = ComponentDatatype.createTypedArray(\r\n        attribute.componentDatatype,\r\n        attribute.values\r\n      );\r\n    }\r\n  }\r\n\r\n  const numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n  geometry.indices = IndexDatatype.createTypedArray(\r\n    numberOfVertices,\r\n    geometry.indices\r\n  );\r\n\r\n  if (computeBoundingSphere) {\r\n    geometry.boundingSphere = BoundingSphere.fromVertices(\r\n      attributes.position.values\r\n    );\r\n  }\r\n\r\n  return geometry;\r\n}\r\n\r\nfunction copyGeometryForSplit(geometry) {\r\n  const attributes = geometry.attributes;\r\n  const copiedAttributes = {};\r\n\r\n  for (const property in attributes) {\r\n    if (\r\n      attributes.hasOwnProperty(property) &&\r\n      defined(attributes[property]) &&\r\n      defined(attributes[property].values)\r\n    ) {\r\n      const attribute = attributes[property];\r\n      copiedAttributes[property] = new GeometryAttribute({\r\n        componentDatatype: attribute.componentDatatype,\r\n        componentsPerAttribute: attribute.componentsPerAttribute,\r\n        normalize: attribute.normalize,\r\n        values: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: copiedAttributes,\r\n    indices: [],\r\n    primitiveType: geometry.primitiveType,\r\n  });\r\n}\r\n\r\nfunction updateInstanceAfterSplit(instance, westGeometry, eastGeometry) {\r\n  const computeBoundingSphere = defined(instance.geometry.boundingSphere);\r\n\r\n  westGeometry = updateGeometryAfterSplit(westGeometry, computeBoundingSphere);\r\n  eastGeometry = updateGeometryAfterSplit(eastGeometry, computeBoundingSphere);\r\n\r\n  if (defined(eastGeometry) && !defined(westGeometry)) {\r\n    instance.geometry = eastGeometry;\r\n  } else if (!defined(eastGeometry) && defined(westGeometry)) {\r\n    instance.geometry = westGeometry;\r\n  } else {\r\n    instance.westHemisphereGeometry = westGeometry;\r\n    instance.eastHemisphereGeometry = eastGeometry;\r\n    instance.geometry = undefined;\r\n  }\r\n}\r\n\r\nfunction generateBarycentricInterpolateFunction(\r\n  CartesianType,\r\n  numberOfComponents\r\n) {\r\n  const v0Scratch = new CartesianType();\r\n  const v1Scratch = new CartesianType();\r\n  const v2Scratch = new CartesianType();\r\n\r\n  return function (\r\n    i0,\r\n    i1,\r\n    i2,\r\n    coords,\r\n    sourceValues,\r\n    currentValues,\r\n    insertedIndex,\r\n    normalize\r\n  ) {\r\n    const v0 = CartesianType.fromArray(\r\n      sourceValues,\r\n      i0 * numberOfComponents,\r\n      v0Scratch\r\n    );\r\n    const v1 = CartesianType.fromArray(\r\n      sourceValues,\r\n      i1 * numberOfComponents,\r\n      v1Scratch\r\n    );\r\n    const v2 = CartesianType.fromArray(\r\n      sourceValues,\r\n      i2 * numberOfComponents,\r\n      v2Scratch\r\n    );\r\n\r\n    CartesianType.multiplyByScalar(v0, coords.x, v0);\r\n    CartesianType.multiplyByScalar(v1, coords.y, v1);\r\n    CartesianType.multiplyByScalar(v2, coords.z, v2);\r\n\r\n    const value = CartesianType.add(v0, v1, v0);\r\n    CartesianType.add(value, v2, value);\r\n\r\n    if (normalize) {\r\n      CartesianType.normalize(value, value);\r\n    }\r\n\r\n    CartesianType.pack(\r\n      value,\r\n      currentValues,\r\n      insertedIndex * numberOfComponents\r\n    );\r\n  };\r\n}\r\n\r\nconst interpolateAndPackCartesian4 = generateBarycentricInterpolateFunction(\r\n  Cartesian4,\r\n  4\r\n);\r\nconst interpolateAndPackCartesian3 = generateBarycentricInterpolateFunction(\r\n  Cartesian3,\r\n  3\r\n);\r\nconst interpolateAndPackCartesian2 = generateBarycentricInterpolateFunction(\r\n  Cartesian2,\r\n  2\r\n);\r\nconst interpolateAndPackBoolean = function (\r\n  i0,\r\n  i1,\r\n  i2,\r\n  coords,\r\n  sourceValues,\r\n  currentValues,\r\n  insertedIndex\r\n) {\r\n  const v1 = sourceValues[i0] * coords.x;\r\n  const v2 = sourceValues[i1] * coords.y;\r\n  const v3 = sourceValues[i2] * coords.z;\r\n  currentValues[insertedIndex] = v1 + v2 + v3 > CesiumMath.EPSILON6 ? 1 : 0;\r\n};\r\n\r\nconst p0Scratch = new Cartesian3();\r\nconst p1Scratch = new Cartesian3();\r\nconst p2Scratch = new Cartesian3();\r\nconst barycentricScratch = new Cartesian3();\r\n\r\nfunction computeTriangleAttributes(\r\n  i0,\r\n  i1,\r\n  i2,\r\n  point,\r\n  positions,\r\n  normals,\r\n  tangents,\r\n  bitangents,\r\n  texCoords,\r\n  extrudeDirections,\r\n  applyOffset,\r\n  currentAttributes,\r\n  customAttributeNames,\r\n  customAttributesLength,\r\n  allAttributes,\r\n  insertedIndex\r\n) {\r\n  if (\r\n    !defined(normals) &&\r\n    !defined(tangents) &&\r\n    !defined(bitangents) &&\r\n    !defined(texCoords) &&\r\n    !defined(extrudeDirections) &&\r\n    customAttributesLength === 0\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\r\n  const p1 = Cartesian3.fromArray(positions, i1 * 3, p1Scratch);\r\n  const p2 = Cartesian3.fromArray(positions, i2 * 3, p2Scratch);\r\n  const coords = barycentricCoordinates(point, p0, p1, p2, barycentricScratch);\r\n  if (!defined(coords)) {\r\n    return;\r\n  }\r\n\r\n  if (defined(normals)) {\r\n    interpolateAndPackCartesian3(\r\n      i0,\r\n      i1,\r\n      i2,\r\n      coords,\r\n      normals,\r\n      currentAttributes.normal.values,\r\n      insertedIndex,\r\n      true\r\n    );\r\n  }\r\n\r\n  if (defined(extrudeDirections)) {\r\n    const d0 = Cartesian3.fromArray(extrudeDirections, i0 * 3, p0Scratch);\r\n    const d1 = Cartesian3.fromArray(extrudeDirections, i1 * 3, p1Scratch);\r\n    const d2 = Cartesian3.fromArray(extrudeDirections, i2 * 3, p2Scratch);\r\n\r\n    Cartesian3.multiplyByScalar(d0, coords.x, d0);\r\n    Cartesian3.multiplyByScalar(d1, coords.y, d1);\r\n    Cartesian3.multiplyByScalar(d2, coords.z, d2);\r\n\r\n    let direction;\r\n    if (\r\n      !Cartesian3.equals(d0, Cartesian3.ZERO) ||\r\n      !Cartesian3.equals(d1, Cartesian3.ZERO) ||\r\n      !Cartesian3.equals(d2, Cartesian3.ZERO)\r\n    ) {\r\n      direction = Cartesian3.add(d0, d1, d0);\r\n      Cartesian3.add(direction, d2, direction);\r\n      Cartesian3.normalize(direction, direction);\r\n    } else {\r\n      direction = p0Scratch;\r\n      direction.x = 0;\r\n      direction.y = 0;\r\n      direction.z = 0;\r\n    }\r\n    Cartesian3.pack(\r\n      direction,\r\n      currentAttributes.extrudeDirection.values,\r\n      insertedIndex * 3\r\n    );\r\n  }\r\n\r\n  if (defined(applyOffset)) {\r\n    interpolateAndPackBoolean(\r\n      i0,\r\n      i1,\r\n      i2,\r\n      coords,\r\n      applyOffset,\r\n      currentAttributes.applyOffset.values,\r\n      insertedIndex\r\n    );\r\n  }\r\n\r\n  if (defined(tangents)) {\r\n    interpolateAndPackCartesian3(\r\n      i0,\r\n      i1,\r\n      i2,\r\n      coords,\r\n      tangents,\r\n      currentAttributes.tangent.values,\r\n      insertedIndex,\r\n      true\r\n    );\r\n  }\r\n\r\n  if (defined(bitangents)) {\r\n    interpolateAndPackCartesian3(\r\n      i0,\r\n      i1,\r\n      i2,\r\n      coords,\r\n      bitangents,\r\n      currentAttributes.bitangent.values,\r\n      insertedIndex,\r\n      true\r\n    );\r\n  }\r\n\r\n  if (defined(texCoords)) {\r\n    interpolateAndPackCartesian2(\r\n      i0,\r\n      i1,\r\n      i2,\r\n      coords,\r\n      texCoords,\r\n      currentAttributes.st.values,\r\n      insertedIndex\r\n    );\r\n  }\r\n\r\n  if (customAttributesLength > 0) {\r\n    for (let i = 0; i < customAttributesLength; i++) {\r\n      const attributeName = customAttributeNames[i];\r\n      genericInterpolate(\r\n        i0,\r\n        i1,\r\n        i2,\r\n        coords,\r\n        insertedIndex,\r\n        allAttributes[attributeName],\r\n        currentAttributes[attributeName]\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction genericInterpolate(\r\n  i0,\r\n  i1,\r\n  i2,\r\n  coords,\r\n  insertedIndex,\r\n  sourceAttribute,\r\n  currentAttribute\r\n) {\r\n  const componentsPerAttribute = sourceAttribute.componentsPerAttribute;\r\n  const sourceValues = sourceAttribute.values;\r\n  const currentValues = currentAttribute.values;\r\n  switch (componentsPerAttribute) {\r\n    case 4:\r\n      interpolateAndPackCartesian4(\r\n        i0,\r\n        i1,\r\n        i2,\r\n        coords,\r\n        sourceValues,\r\n        currentValues,\r\n        insertedIndex,\r\n        false\r\n      );\r\n      break;\r\n    case 3:\r\n      interpolateAndPackCartesian3(\r\n        i0,\r\n        i1,\r\n        i2,\r\n        coords,\r\n        sourceValues,\r\n        currentValues,\r\n        insertedIndex,\r\n        false\r\n      );\r\n      break;\r\n    case 2:\r\n      interpolateAndPackCartesian2(\r\n        i0,\r\n        i1,\r\n        i2,\r\n        coords,\r\n        sourceValues,\r\n        currentValues,\r\n        insertedIndex,\r\n        false\r\n      );\r\n      break;\r\n    default:\r\n      currentValues[insertedIndex] =\r\n        sourceValues[i0] * coords.x +\r\n        sourceValues[i1] * coords.y +\r\n        sourceValues[i2] * coords.z;\r\n  }\r\n}\r\n\r\nfunction insertSplitPoint(\r\n  currentAttributes,\r\n  currentIndices,\r\n  currentIndexMap,\r\n  indices,\r\n  currentIndex,\r\n  point\r\n) {\r\n  const insertIndex = currentAttributes.position.values.length / 3;\r\n\r\n  if (currentIndex !== -1) {\r\n    const prevIndex = indices[currentIndex];\r\n    const newIndex = currentIndexMap[prevIndex];\r\n\r\n    if (newIndex === -1) {\r\n      currentIndexMap[prevIndex] = insertIndex;\r\n      currentAttributes.position.values.push(point.x, point.y, point.z);\r\n      currentIndices.push(insertIndex);\r\n      return insertIndex;\r\n    }\r\n\r\n    currentIndices.push(newIndex);\r\n    return newIndex;\r\n  }\r\n\r\n  currentAttributes.position.values.push(point.x, point.y, point.z);\r\n  currentIndices.push(insertIndex);\r\n  return insertIndex;\r\n}\r\n\r\nconst NAMED_ATTRIBUTES = {\r\n  position: true,\r\n  normal: true,\r\n  bitangent: true,\r\n  tangent: true,\r\n  st: true,\r\n  extrudeDirection: true,\r\n  applyOffset: true,\r\n};\r\nfunction splitLongitudeTriangles(instance) {\r\n  const geometry = instance.geometry;\r\n  const attributes = geometry.attributes;\r\n  const positions = attributes.position.values;\r\n  const normals = defined(attributes.normal)\r\n    ? attributes.normal.values\r\n    : undefined;\r\n  const bitangents = defined(attributes.bitangent)\r\n    ? attributes.bitangent.values\r\n    : undefined;\r\n  const tangents = defined(attributes.tangent)\r\n    ? attributes.tangent.values\r\n    : undefined;\r\n  const texCoords = defined(attributes.st) ? attributes.st.values : undefined;\r\n  const extrudeDirections = defined(attributes.extrudeDirection)\r\n    ? attributes.extrudeDirection.values\r\n    : undefined;\r\n  const applyOffset = defined(attributes.applyOffset)\r\n    ? attributes.applyOffset.values\r\n    : undefined;\r\n  const indices = geometry.indices;\r\n\r\n  const customAttributeNames = [];\r\n  for (const attributeName in attributes) {\r\n    if (\r\n      attributes.hasOwnProperty(attributeName) &&\r\n      !NAMED_ATTRIBUTES[attributeName] &&\r\n      defined(attributes[attributeName])\r\n    ) {\r\n      customAttributeNames.push(attributeName);\r\n    }\r\n  }\r\n  const customAttributesLength = customAttributeNames.length;\r\n\r\n  const eastGeometry = copyGeometryForSplit(geometry);\r\n  const westGeometry = copyGeometryForSplit(geometry);\r\n\r\n  let currentAttributes;\r\n  let currentIndices;\r\n  let currentIndexMap;\r\n  let insertedIndex;\r\n  let i;\r\n\r\n  const westGeometryIndexMap = [];\r\n  westGeometryIndexMap.length = positions.length / 3;\r\n\r\n  const eastGeometryIndexMap = [];\r\n  eastGeometryIndexMap.length = positions.length / 3;\r\n\r\n  for (i = 0; i < westGeometryIndexMap.length; ++i) {\r\n    westGeometryIndexMap[i] = -1;\r\n    eastGeometryIndexMap[i] = -1;\r\n  }\r\n\r\n  const len = indices.length;\r\n  for (i = 0; i < len; i += 3) {\r\n    const i0 = indices[i];\r\n    const i1 = indices[i + 1];\r\n    const i2 = indices[i + 2];\r\n\r\n    let p0 = Cartesian3.fromArray(positions, i0 * 3);\r\n    let p1 = Cartesian3.fromArray(positions, i1 * 3);\r\n    let p2 = Cartesian3.fromArray(positions, i2 * 3);\r\n\r\n    const result = splitTriangle(p0, p1, p2);\r\n    if (defined(result) && result.positions.length > 3) {\r\n      const resultPositions = result.positions;\r\n      const resultIndices = result.indices;\r\n      const resultLength = resultIndices.length;\r\n\r\n      for (let j = 0; j < resultLength; ++j) {\r\n        const resultIndex = resultIndices[j];\r\n        const point = resultPositions[resultIndex];\r\n\r\n        if (point.y < 0.0) {\r\n          currentAttributes = westGeometry.attributes;\r\n          currentIndices = westGeometry.indices;\r\n          currentIndexMap = westGeometryIndexMap;\r\n        } else {\r\n          currentAttributes = eastGeometry.attributes;\r\n          currentIndices = eastGeometry.indices;\r\n          currentIndexMap = eastGeometryIndexMap;\r\n        }\r\n\r\n        insertedIndex = insertSplitPoint(\r\n          currentAttributes,\r\n          currentIndices,\r\n          currentIndexMap,\r\n          indices,\r\n          resultIndex < 3 ? i + resultIndex : -1,\r\n          point\r\n        );\r\n        computeTriangleAttributes(\r\n          i0,\r\n          i1,\r\n          i2,\r\n          point,\r\n          positions,\r\n          normals,\r\n          tangents,\r\n          bitangents,\r\n          texCoords,\r\n          extrudeDirections,\r\n          applyOffset,\r\n          currentAttributes,\r\n          customAttributeNames,\r\n          customAttributesLength,\r\n          attributes,\r\n          insertedIndex\r\n        );\r\n      }\r\n    } else {\r\n      if (defined(result)) {\r\n        p0 = result.positions[0];\r\n        p1 = result.positions[1];\r\n        p2 = result.positions[2];\r\n      }\r\n\r\n      if (p0.y < 0.0) {\r\n        currentAttributes = westGeometry.attributes;\r\n        currentIndices = westGeometry.indices;\r\n        currentIndexMap = westGeometryIndexMap;\r\n      } else {\r\n        currentAttributes = eastGeometry.attributes;\r\n        currentIndices = eastGeometry.indices;\r\n        currentIndexMap = eastGeometryIndexMap;\r\n      }\r\n\r\n      insertedIndex = insertSplitPoint(\r\n        currentAttributes,\r\n        currentIndices,\r\n        currentIndexMap,\r\n        indices,\r\n        i,\r\n        p0\r\n      );\r\n      computeTriangleAttributes(\r\n        i0,\r\n        i1,\r\n        i2,\r\n        p0,\r\n        positions,\r\n        normals,\r\n        tangents,\r\n        bitangents,\r\n        texCoords,\r\n        extrudeDirections,\r\n        applyOffset,\r\n        currentAttributes,\r\n        customAttributeNames,\r\n        customAttributesLength,\r\n        attributes,\r\n        insertedIndex\r\n      );\r\n\r\n      insertedIndex = insertSplitPoint(\r\n        currentAttributes,\r\n        currentIndices,\r\n        currentIndexMap,\r\n        indices,\r\n        i + 1,\r\n        p1\r\n      );\r\n      computeTriangleAttributes(\r\n        i0,\r\n        i1,\r\n        i2,\r\n        p1,\r\n        positions,\r\n        normals,\r\n        tangents,\r\n        bitangents,\r\n        texCoords,\r\n        extrudeDirections,\r\n        applyOffset,\r\n        currentAttributes,\r\n        customAttributeNames,\r\n        customAttributesLength,\r\n        attributes,\r\n        insertedIndex\r\n      );\r\n\r\n      insertedIndex = insertSplitPoint(\r\n        currentAttributes,\r\n        currentIndices,\r\n        currentIndexMap,\r\n        indices,\r\n        i + 2,\r\n        p2\r\n      );\r\n      computeTriangleAttributes(\r\n        i0,\r\n        i1,\r\n        i2,\r\n        p2,\r\n        positions,\r\n        normals,\r\n        tangents,\r\n        bitangents,\r\n        texCoords,\r\n        extrudeDirections,\r\n        applyOffset,\r\n        currentAttributes,\r\n        customAttributeNames,\r\n        customAttributesLength,\r\n        attributes,\r\n        insertedIndex\r\n      );\r\n    }\r\n  }\r\n\r\n  updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\r\n}\r\n\r\nconst xzPlane = Plane.fromPointNormal(Cartesian3.ZERO, Cartesian3.UNIT_Y);\r\n\r\nconst offsetScratch = new Cartesian3();\r\nconst offsetPointScratch = new Cartesian3();\r\n\r\nfunction computeLineAttributes(\r\n  i0,\r\n  i1,\r\n  point,\r\n  positions,\r\n  insertIndex,\r\n  currentAttributes,\r\n  applyOffset\r\n) {\r\n  if (!defined(applyOffset)) {\r\n    return;\r\n  }\r\n\r\n  const p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\r\n  if (Cartesian3.equalsEpsilon(p0, point, CesiumMath.EPSILON10)) {\r\n    currentAttributes.applyOffset.values[insertIndex] = applyOffset[i0];\r\n  } else {\r\n    currentAttributes.applyOffset.values[insertIndex] = applyOffset[i1];\r\n  }\r\n}\r\n\r\nfunction splitLongitudeLines(instance) {\r\n  const geometry = instance.geometry;\r\n  const attributes = geometry.attributes;\r\n  const positions = attributes.position.values;\r\n  const applyOffset = defined(attributes.applyOffset)\r\n    ? attributes.applyOffset.values\r\n    : undefined;\r\n  const indices = geometry.indices;\r\n\r\n  const eastGeometry = copyGeometryForSplit(geometry);\r\n  const westGeometry = copyGeometryForSplit(geometry);\r\n\r\n  let i;\r\n  const length = indices.length;\r\n\r\n  const westGeometryIndexMap = [];\r\n  westGeometryIndexMap.length = positions.length / 3;\r\n\r\n  const eastGeometryIndexMap = [];\r\n  eastGeometryIndexMap.length = positions.length / 3;\r\n\r\n  for (i = 0; i < westGeometryIndexMap.length; ++i) {\r\n    westGeometryIndexMap[i] = -1;\r\n    eastGeometryIndexMap[i] = -1;\r\n  }\r\n\r\n  for (i = 0; i < length; i += 2) {\r\n    const i0 = indices[i];\r\n    const i1 = indices[i + 1];\r\n\r\n    const p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\r\n    const p1 = Cartesian3.fromArray(positions, i1 * 3, p1Scratch);\r\n    let insertIndex;\r\n\r\n    if (Math.abs(p0.y) < CesiumMath.EPSILON6) {\r\n      if (p0.y < 0.0) {\r\n        p0.y = -CesiumMath.EPSILON6;\r\n      } else {\r\n        p0.y = CesiumMath.EPSILON6;\r\n      }\r\n    }\r\n\r\n    if (Math.abs(p1.y) < CesiumMath.EPSILON6) {\r\n      if (p1.y < 0.0) {\r\n        p1.y = -CesiumMath.EPSILON6;\r\n      } else {\r\n        p1.y = CesiumMath.EPSILON6;\r\n      }\r\n    }\r\n\r\n    let p0Attributes = eastGeometry.attributes;\r\n    let p0Indices = eastGeometry.indices;\r\n    let p0IndexMap = eastGeometryIndexMap;\r\n    let p1Attributes = westGeometry.attributes;\r\n    let p1Indices = westGeometry.indices;\r\n    let p1IndexMap = westGeometryIndexMap;\r\n\r\n    const intersection = IntersectionTests.lineSegmentPlane(\r\n      p0,\r\n      p1,\r\n      xzPlane,\r\n      p2Scratch\r\n    );\r\n    if (defined(intersection)) {\r\n      // move point on the xz-plane slightly away from the plane\r\n      const offset = Cartesian3.multiplyByScalar(\r\n        Cartesian3.UNIT_Y,\r\n        5.0 * CesiumMath.EPSILON9,\r\n        offsetScratch\r\n      );\r\n      if (p0.y < 0.0) {\r\n        Cartesian3.negate(offset, offset);\r\n\r\n        p0Attributes = westGeometry.attributes;\r\n        p0Indices = westGeometry.indices;\r\n        p0IndexMap = westGeometryIndexMap;\r\n        p1Attributes = eastGeometry.attributes;\r\n        p1Indices = eastGeometry.indices;\r\n        p1IndexMap = eastGeometryIndexMap;\r\n      }\r\n\r\n      const offsetPoint = Cartesian3.add(\r\n        intersection,\r\n        offset,\r\n        offsetPointScratch\r\n      );\r\n\r\n      insertIndex = insertSplitPoint(\r\n        p0Attributes,\r\n        p0Indices,\r\n        p0IndexMap,\r\n        indices,\r\n        i,\r\n        p0\r\n      );\r\n      computeLineAttributes(\r\n        i0,\r\n        i1,\r\n        p0,\r\n        positions,\r\n        insertIndex,\r\n        p0Attributes,\r\n        applyOffset\r\n      );\r\n\r\n      insertIndex = insertSplitPoint(\r\n        p0Attributes,\r\n        p0Indices,\r\n        p0IndexMap,\r\n        indices,\r\n        -1,\r\n        offsetPoint\r\n      );\r\n      computeLineAttributes(\r\n        i0,\r\n        i1,\r\n        offsetPoint,\r\n        positions,\r\n        insertIndex,\r\n        p0Attributes,\r\n        applyOffset\r\n      );\r\n\r\n      Cartesian3.negate(offset, offset);\r\n      Cartesian3.add(intersection, offset, offsetPoint);\r\n      insertIndex = insertSplitPoint(\r\n        p1Attributes,\r\n        p1Indices,\r\n        p1IndexMap,\r\n        indices,\r\n        -1,\r\n        offsetPoint\r\n      );\r\n      computeLineAttributes(\r\n        i0,\r\n        i1,\r\n        offsetPoint,\r\n        positions,\r\n        insertIndex,\r\n        p1Attributes,\r\n        applyOffset\r\n      );\r\n\r\n      insertIndex = insertSplitPoint(\r\n        p1Attributes,\r\n        p1Indices,\r\n        p1IndexMap,\r\n        indices,\r\n        i + 1,\r\n        p1\r\n      );\r\n      computeLineAttributes(\r\n        i0,\r\n        i1,\r\n        p1,\r\n        positions,\r\n        insertIndex,\r\n        p1Attributes,\r\n        applyOffset\r\n      );\r\n    } else {\r\n      let currentAttributes;\r\n      let currentIndices;\r\n      let currentIndexMap;\r\n\r\n      if (p0.y < 0.0) {\r\n        currentAttributes = westGeometry.attributes;\r\n        currentIndices = westGeometry.indices;\r\n        currentIndexMap = westGeometryIndexMap;\r\n      } else {\r\n        currentAttributes = eastGeometry.attributes;\r\n        currentIndices = eastGeometry.indices;\r\n        currentIndexMap = eastGeometryIndexMap;\r\n      }\r\n\r\n      insertIndex = insertSplitPoint(\r\n        currentAttributes,\r\n        currentIndices,\r\n        currentIndexMap,\r\n        indices,\r\n        i,\r\n        p0\r\n      );\r\n      computeLineAttributes(\r\n        i0,\r\n        i1,\r\n        p0,\r\n        positions,\r\n        insertIndex,\r\n        currentAttributes,\r\n        applyOffset\r\n      );\r\n\r\n      insertIndex = insertSplitPoint(\r\n        currentAttributes,\r\n        currentIndices,\r\n        currentIndexMap,\r\n        indices,\r\n        i + 1,\r\n        p1\r\n      );\r\n      computeLineAttributes(\r\n        i0,\r\n        i1,\r\n        p1,\r\n        positions,\r\n        insertIndex,\r\n        currentAttributes,\r\n        applyOffset\r\n      );\r\n    }\r\n  }\r\n\r\n  updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\r\n}\r\n\r\nconst cartesian2Scratch0 = new Cartesian2();\r\nconst cartesian2Scratch1 = new Cartesian2();\r\n\r\nconst cartesian3Scratch0 = new Cartesian3();\r\nconst cartesian3Scratch2 = new Cartesian3();\r\nconst cartesian3Scratch3 = new Cartesian3();\r\nconst cartesian3Scratch4 = new Cartesian3();\r\nconst cartesian3Scratch5 = new Cartesian3();\r\nconst cartesian3Scratch6 = new Cartesian3();\r\n\r\nconst cartesian4Scratch0 = new Cartesian4();\r\n\r\nfunction updateAdjacencyAfterSplit(geometry) {\r\n  const attributes = geometry.attributes;\r\n  const positions = attributes.position.values;\r\n  const prevPositions = attributes.prevPosition.values;\r\n  const nextPositions = attributes.nextPosition.values;\r\n\r\n  const length = positions.length;\r\n  for (let j = 0; j < length; j += 3) {\r\n    const position = Cartesian3.unpack(positions, j, cartesian3Scratch0);\r\n    if (position.x > 0.0) {\r\n      continue;\r\n    }\r\n\r\n    const prevPosition = Cartesian3.unpack(\r\n      prevPositions,\r\n      j,\r\n      cartesian3Scratch2\r\n    );\r\n    if (\r\n      (position.y < 0.0 && prevPosition.y > 0.0) ||\r\n      (position.y > 0.0 && prevPosition.y < 0.0)\r\n    ) {\r\n      if (j - 3 > 0) {\r\n        prevPositions[j] = positions[j - 3];\r\n        prevPositions[j + 1] = positions[j - 2];\r\n        prevPositions[j + 2] = positions[j - 1];\r\n      } else {\r\n        Cartesian3.pack(position, prevPositions, j);\r\n      }\r\n    }\r\n\r\n    const nextPosition = Cartesian3.unpack(\r\n      nextPositions,\r\n      j,\r\n      cartesian3Scratch3\r\n    );\r\n    if (\r\n      (position.y < 0.0 && nextPosition.y > 0.0) ||\r\n      (position.y > 0.0 && nextPosition.y < 0.0)\r\n    ) {\r\n      if (j + 3 < length) {\r\n        nextPositions[j] = positions[j + 3];\r\n        nextPositions[j + 1] = positions[j + 4];\r\n        nextPositions[j + 2] = positions[j + 5];\r\n      } else {\r\n        Cartesian3.pack(position, nextPositions, j);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst offsetScalar = 5.0 * CesiumMath.EPSILON9;\r\nconst coplanarOffset = CesiumMath.EPSILON6;\r\n\r\nfunction splitLongitudePolyline(instance) {\r\n  const geometry = instance.geometry;\r\n  const attributes = geometry.attributes;\r\n  const positions = attributes.position.values;\r\n  const prevPositions = attributes.prevPosition.values;\r\n  const nextPositions = attributes.nextPosition.values;\r\n  const expandAndWidths = attributes.expandAndWidth.values;\r\n\r\n  const texCoords = defined(attributes.st) ? attributes.st.values : undefined;\r\n  const colors = defined(attributes.color)\r\n    ? attributes.color.values\r\n    : undefined;\r\n\r\n  const eastGeometry = copyGeometryForSplit(geometry);\r\n  const westGeometry = copyGeometryForSplit(geometry);\r\n\r\n  let i;\r\n  let j;\r\n  let index;\r\n\r\n  let intersectionFound = false;\r\n\r\n  const length = positions.length / 3;\r\n  for (i = 0; i < length; i += 4) {\r\n    const i0 = i;\r\n    const i2 = i + 2;\r\n\r\n    const p0 = Cartesian3.fromArray(positions, i0 * 3, cartesian3Scratch0);\r\n    const p2 = Cartesian3.fromArray(positions, i2 * 3, cartesian3Scratch2);\r\n\r\n    // Offset points that are close to the 180 longitude and change the previous/next point\r\n    // to be the same offset point so it can be projected to 2D. There is special handling in the\r\n    // shader for when position == prevPosition || position == nextPosition.\r\n    if (Math.abs(p0.y) < coplanarOffset) {\r\n      p0.y = coplanarOffset * (p2.y < 0.0 ? -1.0 : 1.0);\r\n      positions[i * 3 + 1] = p0.y;\r\n      positions[(i + 1) * 3 + 1] = p0.y;\r\n\r\n      for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {\r\n        prevPositions[j] = positions[i * 3];\r\n        prevPositions[j + 1] = positions[i * 3 + 1];\r\n        prevPositions[j + 2] = positions[i * 3 + 2];\r\n      }\r\n    }\r\n\r\n    // Do the same but for when the line crosses 180 longitude in the opposite direction.\r\n    if (Math.abs(p2.y) < coplanarOffset) {\r\n      p2.y = coplanarOffset * (p0.y < 0.0 ? -1.0 : 1.0);\r\n      positions[(i + 2) * 3 + 1] = p2.y;\r\n      positions[(i + 3) * 3 + 1] = p2.y;\r\n\r\n      for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {\r\n        nextPositions[j] = positions[(i + 2) * 3];\r\n        nextPositions[j + 1] = positions[(i + 2) * 3 + 1];\r\n        nextPositions[j + 2] = positions[(i + 2) * 3 + 2];\r\n      }\r\n    }\r\n\r\n    let p0Attributes = eastGeometry.attributes;\r\n    let p0Indices = eastGeometry.indices;\r\n    let p2Attributes = westGeometry.attributes;\r\n    let p2Indices = westGeometry.indices;\r\n\r\n    const intersection = IntersectionTests.lineSegmentPlane(\r\n      p0,\r\n      p2,\r\n      xzPlane,\r\n      cartesian3Scratch4\r\n    );\r\n    if (defined(intersection)) {\r\n      intersectionFound = true;\r\n\r\n      // move point on the xz-plane slightly away from the plane\r\n      const offset = Cartesian3.multiplyByScalar(\r\n        Cartesian3.UNIT_Y,\r\n        offsetScalar,\r\n        cartesian3Scratch5\r\n      );\r\n      if (p0.y < 0.0) {\r\n        Cartesian3.negate(offset, offset);\r\n        p0Attributes = westGeometry.attributes;\r\n        p0Indices = westGeometry.indices;\r\n        p2Attributes = eastGeometry.attributes;\r\n        p2Indices = eastGeometry.indices;\r\n      }\r\n\r\n      const offsetPoint = Cartesian3.add(\r\n        intersection,\r\n        offset,\r\n        cartesian3Scratch6\r\n      );\r\n      p0Attributes.position.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);\r\n      p0Attributes.position.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n      p0Attributes.position.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n\r\n      p0Attributes.prevPosition.values.push(\r\n        prevPositions[i0 * 3],\r\n        prevPositions[i0 * 3 + 1],\r\n        prevPositions[i0 * 3 + 2]\r\n      );\r\n      p0Attributes.prevPosition.values.push(\r\n        prevPositions[i0 * 3 + 3],\r\n        prevPositions[i0 * 3 + 4],\r\n        prevPositions[i0 * 3 + 5]\r\n      );\r\n      p0Attributes.prevPosition.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);\r\n\r\n      p0Attributes.nextPosition.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n      p0Attributes.nextPosition.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n      p0Attributes.nextPosition.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n      p0Attributes.nextPosition.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n\r\n      Cartesian3.negate(offset, offset);\r\n      Cartesian3.add(intersection, offset, offsetPoint);\r\n      p2Attributes.position.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n      p2Attributes.position.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n      p2Attributes.position.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);\r\n\r\n      p2Attributes.prevPosition.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n      p2Attributes.prevPosition.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n      p2Attributes.prevPosition.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n      p2Attributes.prevPosition.values.push(\r\n        offsetPoint.x,\r\n        offsetPoint.y,\r\n        offsetPoint.z\r\n      );\r\n\r\n      p2Attributes.nextPosition.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);\r\n      p2Attributes.nextPosition.values.push(\r\n        nextPositions[i2 * 3],\r\n        nextPositions[i2 * 3 + 1],\r\n        nextPositions[i2 * 3 + 2]\r\n      );\r\n      p2Attributes.nextPosition.values.push(\r\n        nextPositions[i2 * 3 + 3],\r\n        nextPositions[i2 * 3 + 4],\r\n        nextPositions[i2 * 3 + 5]\r\n      );\r\n\r\n      const ew0 = Cartesian2.fromArray(\r\n        expandAndWidths,\r\n        i0 * 2,\r\n        cartesian2Scratch0\r\n      );\r\n      const width = Math.abs(ew0.y);\r\n\r\n      p0Attributes.expandAndWidth.values.push(-1, width, 1, width);\r\n      p0Attributes.expandAndWidth.values.push(-1, -width, 1, -width);\r\n      p2Attributes.expandAndWidth.values.push(-1, width, 1, width);\r\n      p2Attributes.expandAndWidth.values.push(-1, -width, 1, -width);\r\n\r\n      let t = Cartesian3.magnitudeSquared(\r\n        Cartesian3.subtract(intersection, p0, cartesian3Scratch3)\r\n      );\r\n      t /= Cartesian3.magnitudeSquared(\r\n        Cartesian3.subtract(p2, p0, cartesian3Scratch3)\r\n      );\r\n\r\n      if (defined(colors)) {\r\n        const c0 = Cartesian4.fromArray(colors, i0 * 4, cartesian4Scratch0);\r\n        const c2 = Cartesian4.fromArray(colors, i2 * 4, cartesian4Scratch0);\r\n\r\n        const r = CesiumMath.lerp(c0.x, c2.x, t);\r\n        const g = CesiumMath.lerp(c0.y, c2.y, t);\r\n        const b = CesiumMath.lerp(c0.z, c2.z, t);\r\n        const a = CesiumMath.lerp(c0.w, c2.w, t);\r\n\r\n        for (j = i0 * 4; j < i0 * 4 + 2 * 4; ++j) {\r\n          p0Attributes.color.values.push(colors[j]);\r\n        }\r\n        p0Attributes.color.values.push(r, g, b, a);\r\n        p0Attributes.color.values.push(r, g, b, a);\r\n        p2Attributes.color.values.push(r, g, b, a);\r\n        p2Attributes.color.values.push(r, g, b, a);\r\n        for (j = i2 * 4; j < i2 * 4 + 2 * 4; ++j) {\r\n          p2Attributes.color.values.push(colors[j]);\r\n        }\r\n      }\r\n\r\n      if (defined(texCoords)) {\r\n        const s0 = Cartesian2.fromArray(texCoords, i0 * 2, cartesian2Scratch0);\r\n        const s3 = Cartesian2.fromArray(\r\n          texCoords,\r\n          (i + 3) * 2,\r\n          cartesian2Scratch1\r\n        );\r\n\r\n        const sx = CesiumMath.lerp(s0.x, s3.x, t);\r\n\r\n        for (j = i0 * 2; j < i0 * 2 + 2 * 2; ++j) {\r\n          p0Attributes.st.values.push(texCoords[j]);\r\n        }\r\n        p0Attributes.st.values.push(sx, s0.y);\r\n        p0Attributes.st.values.push(sx, s3.y);\r\n        p2Attributes.st.values.push(sx, s0.y);\r\n        p2Attributes.st.values.push(sx, s3.y);\r\n        for (j = i2 * 2; j < i2 * 2 + 2 * 2; ++j) {\r\n          p2Attributes.st.values.push(texCoords[j]);\r\n        }\r\n      }\r\n\r\n      index = p0Attributes.position.values.length / 3 - 4;\r\n      p0Indices.push(index, index + 2, index + 1);\r\n      p0Indices.push(index + 1, index + 2, index + 3);\r\n\r\n      index = p2Attributes.position.values.length / 3 - 4;\r\n      p2Indices.push(index, index + 2, index + 1);\r\n      p2Indices.push(index + 1, index + 2, index + 3);\r\n    } else {\r\n      let currentAttributes;\r\n      let currentIndices;\r\n\r\n      if (p0.y < 0.0) {\r\n        currentAttributes = westGeometry.attributes;\r\n        currentIndices = westGeometry.indices;\r\n      } else {\r\n        currentAttributes = eastGeometry.attributes;\r\n        currentIndices = eastGeometry.indices;\r\n      }\r\n\r\n      currentAttributes.position.values.push(p0.x, p0.y, p0.z);\r\n      currentAttributes.position.values.push(p0.x, p0.y, p0.z);\r\n      currentAttributes.position.values.push(p2.x, p2.y, p2.z);\r\n      currentAttributes.position.values.push(p2.x, p2.y, p2.z);\r\n\r\n      for (j = i * 3; j < i * 3 + 4 * 3; ++j) {\r\n        currentAttributes.prevPosition.values.push(prevPositions[j]);\r\n        currentAttributes.nextPosition.values.push(nextPositions[j]);\r\n      }\r\n\r\n      for (j = i * 2; j < i * 2 + 4 * 2; ++j) {\r\n        currentAttributes.expandAndWidth.values.push(expandAndWidths[j]);\r\n        if (defined(texCoords)) {\r\n          currentAttributes.st.values.push(texCoords[j]);\r\n        }\r\n      }\r\n\r\n      if (defined(colors)) {\r\n        for (j = i * 4; j < i * 4 + 4 * 4; ++j) {\r\n          currentAttributes.color.values.push(colors[j]);\r\n        }\r\n      }\r\n\r\n      index = currentAttributes.position.values.length / 3 - 4;\r\n      currentIndices.push(index, index + 2, index + 1);\r\n      currentIndices.push(index + 1, index + 2, index + 3);\r\n    }\r\n  }\r\n\r\n  if (intersectionFound) {\r\n    updateAdjacencyAfterSplit(westGeometry);\r\n    updateAdjacencyAfterSplit(eastGeometry);\r\n  }\r\n\r\n  updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\r\n}\r\n\r\n/**\r\n * Splits the instances's geometry, by introducing new vertices and indices,that\r\n * intersect the International Date Line and Prime Meridian so that no primitives cross longitude\r\n * -180/180 degrees.  This is not required for 3D drawing, but is required for\r\n * correcting drawing in 2D and Columbus view.\r\n *\r\n * @private\r\n *\r\n * @param {GeometryInstance} instance The instance to modify.\r\n * @returns {GeometryInstance} The modified <code>instance</code> argument, with it's geometry split at the International Date Line.\r\n *\r\n * @example\r\n * instance = Cesium.GeometryPipeline.splitLongitude(instance);\r\n */\r\nGeometryPipeline.splitLongitude = function (instance) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(instance)) {\r\n    throw new DeveloperError(\"instance is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const geometry = instance.geometry;\r\n  const boundingSphere = geometry.boundingSphere;\r\n  if (defined(boundingSphere)) {\r\n    const minX = boundingSphere.center.x - boundingSphere.radius;\r\n    if (\r\n      minX > 0 ||\r\n      BoundingSphere.intersectPlane(boundingSphere, Plane.ORIGIN_ZX_PLANE) !==\r\n        Intersect.INTERSECTING\r\n    ) {\r\n      return instance;\r\n    }\r\n  }\r\n\r\n  if (geometry.geometryType !== GeometryType.NONE) {\r\n    switch (geometry.geometryType) {\r\n      case GeometryType.POLYLINES:\r\n        splitLongitudePolyline(instance);\r\n        break;\r\n      case GeometryType.TRIANGLES:\r\n        splitLongitudeTriangles(instance);\r\n        break;\r\n      case GeometryType.LINES:\r\n        splitLongitudeLines(instance);\r\n        break;\r\n    }\r\n  } else {\r\n    indexPrimitive(geometry);\r\n    if (geometry.primitiveType === PrimitiveType.TRIANGLES) {\r\n      splitLongitudeTriangles(instance);\r\n    } else if (geometry.primitiveType === PrimitiveType.LINES) {\r\n      splitLongitudeLines(instance);\r\n    }\r\n  }\r\n\r\n  return instance;\r\n};\r\nexport default GeometryPipeline;\r\n"],"names":["Cartesian3","scratchCartesian2","scratchCartesian3","Check","defined","Cartesian2","CesiumMath","defaultValue","DeveloperError","IndexDatatype","PrimitiveType","BoundingSphere","Geometry","GeometryAttribute","ComponentDatatype","Tipsify","Cartographic","GeographicProjection","EncodedCartesian3","Matrix4","Matrix3","AttributeCompression","Cartesian4","Plane","IntersectionTests","Intersect","GeometryType"],"mappings":"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"}