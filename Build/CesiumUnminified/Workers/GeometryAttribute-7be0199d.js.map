{"version":3,"file":"GeometryAttribute-7be0199d.js","sources":["../../../packages/engine/Source/Core/GeometryType.js","../../../packages/engine/Source/Core/PrimitiveType.js","../../../packages/engine/Source/Core/Geometry.js","../../../packages/engine/Source/Core/GeometryAttribute.js"],"sourcesContent":["/**\r\n * @private\r\n */\r\nconst GeometryType = {\r\n  NONE: 0,\r\n  TRIANGLES: 1,\r\n  LINES: 2,\r\n  POLYLINES: 3,\r\n};\r\nexport default Object.freeze(GeometryType);\r\n","import WebGLConstants from \"./WebGLConstants.js\";\r\n\r\n/**\r\n * The type of a geometric primitive, i.e., points, lines, and triangles.\r\n *\r\n * @enum {Number}\r\n */\r\nconst PrimitiveType = {\r\n  /**\r\n   * Points primitive where each vertex (or index) is a separate point.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  POINTS: WebGLConstants.POINTS,\r\n\r\n  /**\r\n   * Lines primitive where each two vertices (or indices) is a line segment.  Line segments are not necessarily connected.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  LINES: WebGLConstants.LINES,\r\n\r\n  /**\r\n   * Line loop primitive where each vertex (or index) after the first connects a line to\r\n   * the previous vertex, and the last vertex implicitly connects to the first.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  LINE_LOOP: WebGLConstants.LINE_LOOP,\r\n\r\n  /**\r\n   * Line strip primitive where each vertex (or index) after the first connects a line to the previous vertex.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  LINE_STRIP: WebGLConstants.LINE_STRIP,\r\n\r\n  /**\r\n   * Triangles primitive where each three vertices (or indices) is a triangle.  Triangles do not necessarily share edges.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  TRIANGLES: WebGLConstants.TRIANGLES,\r\n\r\n  /**\r\n   * Triangle strip primitive where each vertex (or index) after the first two connect to\r\n   * the previous two vertices forming a triangle.  For example, this can be used to model a wall.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  TRIANGLE_STRIP: WebGLConstants.TRIANGLE_STRIP,\r\n\r\n  /**\r\n   * Triangle fan primitive where each vertex (or index) after the first two connect to\r\n   * the previous vertex and the first vertex forming a triangle.  For example, this can be used\r\n   * to model a cone or circle.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  TRIANGLE_FAN: WebGLConstants.TRIANGLE_FAN,\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nPrimitiveType.isLines = function (primitiveType) {\r\n  return (\r\n    primitiveType === PrimitiveType.LINES ||\r\n    primitiveType === PrimitiveType.LINE_LOOP ||\r\n    primitiveType === PrimitiveType.LINE_STRIP\r\n  );\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nPrimitiveType.isTriangles = function (primitiveType) {\r\n  return (\r\n    primitiveType === PrimitiveType.TRIANGLES ||\r\n    primitiveType === PrimitiveType.TRIANGLE_STRIP ||\r\n    primitiveType === PrimitiveType.TRIANGLE_FAN\r\n  );\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nPrimitiveType.validate = function (primitiveType) {\r\n  return (\r\n    primitiveType === PrimitiveType.POINTS ||\r\n    primitiveType === PrimitiveType.LINES ||\r\n    primitiveType === PrimitiveType.LINE_LOOP ||\r\n    primitiveType === PrimitiveType.LINE_STRIP ||\r\n    primitiveType === PrimitiveType.TRIANGLES ||\r\n    primitiveType === PrimitiveType.TRIANGLE_STRIP ||\r\n    primitiveType === PrimitiveType.TRIANGLE_FAN\r\n  );\r\n};\r\n\r\nexport default Object.freeze(PrimitiveType);\r\n","import Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport GeometryType from \"./GeometryType.js\";\r\nimport Matrix2 from \"./Matrix2.js\";\r\nimport Matrix3 from \"./Matrix3.js\";\r\nimport Matrix4 from \"./Matrix4.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport Quaternion from \"./Quaternion.js\";\r\nimport Rectangle from \"./Rectangle.js\";\r\nimport Transforms from \"./Transforms.js\";\r\n\r\n/**\r\n * A geometry representation with attributes forming vertices and optional index data\r\n * defining primitives.  Geometries and an {@link Appearance}, which describes the shading,\r\n * can be assigned to a {@link Primitive} for visualization.  A <code>Primitive</code> can\r\n * be created from many heterogeneous - in many cases - geometries for performance.\r\n * <p>\r\n * Geometries can be transformed and optimized using functions in {@link GeometryPipeline}.\r\n * </p>\r\n *\r\n * @alias Geometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {GeometryAttributes} options.attributes Attributes, which make up the geometry's vertices.\r\n * @param {PrimitiveType} [options.primitiveType=PrimitiveType.TRIANGLES] The type of primitives in the geometry.\r\n * @param {Uint16Array|Uint32Array} [options.indices] Optional index data that determines the primitives in the geometry.\r\n * @param {BoundingSphere} [options.boundingSphere] An optional bounding sphere that fully enclosed the geometry.\r\n *\r\n * @see PolygonGeometry\r\n * @see RectangleGeometry\r\n * @see EllipseGeometry\r\n * @see CircleGeometry\r\n * @see WallGeometry\r\n * @see SimplePolylineGeometry\r\n * @see BoxGeometry\r\n * @see EllipsoidGeometry\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Geometry%20and%20Appearances.html|Geometry and Appearances Demo}\r\n *\r\n * @example\r\n * // Create geometry with a position attribute and indexed lines.\r\n * const positions = new Float64Array([\r\n *   0.0, 0.0, 0.0,\r\n *   7500000.0, 0.0, 0.0,\r\n *   0.0, 7500000.0, 0.0\r\n * ]);\r\n *\r\n * const geometry = new Cesium.Geometry({\r\n *   attributes : {\r\n *     position : new Cesium.GeometryAttribute({\r\n *       componentDatatype : Cesium.ComponentDatatype.DOUBLE,\r\n *       componentsPerAttribute : 3,\r\n *       values : positions\r\n *     })\r\n *   },\r\n *   indices : new Uint16Array([0, 1, 1, 2, 2, 0]),\r\n *   primitiveType : Cesium.PrimitiveType.LINES,\r\n *   boundingSphere : Cesium.BoundingSphere.fromVertices(positions)\r\n * });\r\n */\r\nfunction Geometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"options.attributes\", options.attributes);\r\n  //>>includeEnd('debug');\r\n\r\n  /**\r\n   * Attributes, which make up the geometry's vertices.  Each property in this object corresponds to a\r\n   * {@link GeometryAttribute} containing the attribute's data.\r\n   * <p>\r\n   * Attributes are always stored non-interleaved in a Geometry.\r\n   * </p>\r\n   * <p>\r\n   * There are reserved attribute names with well-known semantics.  The following attributes\r\n   * are created by a Geometry (depending on the provided {@link VertexFormat}.\r\n   * <ul>\r\n   *    <li><code>position</code> - 3D vertex position.  64-bit floating-point (for precision).  3 components per attribute.  See {@link VertexFormat#position}.</li>\r\n   *    <li><code>normal</code> - Normal (normalized), commonly used for lighting.  32-bit floating-point.  3 components per attribute.  See {@link VertexFormat#normal}.</li>\r\n   *    <li><code>st</code> - 2D texture coordinate.  32-bit floating-point.  2 components per attribute.  See {@link VertexFormat#st}.</li>\r\n   *    <li><code>bitangent</code> - Bitangent (normalized), used for tangent-space effects like bump mapping.  32-bit floating-point.  3 components per attribute.  See {@link VertexFormat#bitangent}.</li>\r\n   *    <li><code>tangent</code> - Tangent (normalized), used for tangent-space effects like bump mapping.  32-bit floating-point.  3 components per attribute.  See {@link VertexFormat#tangent}.</li>\r\n   * </ul>\r\n   * </p>\r\n   * <p>\r\n   * The following attribute names are generally not created by a Geometry, but are added\r\n   * to a Geometry by a {@link Primitive} or {@link GeometryPipeline} functions to prepare\r\n   * the geometry for rendering.\r\n   * <ul>\r\n   *    <li><code>position3DHigh</code> - High 32 bits for encoded 64-bit position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\r\n   *    <li><code>position3DLow</code> - Low 32 bits for encoded 64-bit position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\r\n   *    <li><code>position3DHigh</code> - High 32 bits for encoded 64-bit 2D (Columbus view) position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\r\n   *    <li><code>position2DLow</code> - Low 32 bits for encoded 64-bit 2D (Columbus view) position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\r\n   *    <li><code>color</code> - RGBA color (normalized) usually from {@link GeometryInstance#color}.  32-bit floating-point.  4 components per attribute.</li>\r\n   *    <li><code>pickColor</code> - RGBA color used for picking.  32-bit floating-point.  4 components per attribute.</li>\r\n   * </ul>\r\n   * </p>\r\n   *\r\n   * @type GeometryAttributes\r\n   *\r\n   * @default undefined\r\n   *\r\n   *\r\n   * @example\r\n   * geometry.attributes.position = new Cesium.GeometryAttribute({\r\n   *   componentDatatype : Cesium.ComponentDatatype.FLOAT,\r\n   *   componentsPerAttribute : 3,\r\n   *   values : new Float32Array(0)\r\n   * });\r\n   *\r\n   * @see GeometryAttribute\r\n   * @see VertexFormat\r\n   */\r\n  this.attributes = options.attributes;\r\n\r\n  /**\r\n   * Optional index data that - along with {@link Geometry#primitiveType} -\r\n   * determines the primitives in the geometry.\r\n   *\r\n   * @type Array\r\n   *\r\n   * @default undefined\r\n   */\r\n  this.indices = options.indices;\r\n\r\n  /**\r\n   * The type of primitives in the geometry.  This is most often {@link PrimitiveType.TRIANGLES},\r\n   * but can varying based on the specific geometry.\r\n   *\r\n   * @type PrimitiveType\r\n   *\r\n   * @default undefined\r\n   */\r\n  this.primitiveType = defaultValue(\r\n    options.primitiveType,\r\n    PrimitiveType.TRIANGLES\r\n  );\r\n\r\n  /**\r\n   * An optional bounding sphere that fully encloses the geometry.  This is\r\n   * commonly used for culling.\r\n   *\r\n   * @type BoundingSphere\r\n   *\r\n   * @default undefined\r\n   */\r\n  this.boundingSphere = options.boundingSphere;\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  this.geometryType = defaultValue(options.geometryType, GeometryType.NONE);\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  this.boundingSphereCV = options.boundingSphereCV;\r\n\r\n  /**\r\n   * Used for computing the bounding sphere for geometry using the applyOffset vertex attribute\r\n   * @private\r\n   */\r\n  this.offsetAttribute = options.offsetAttribute;\r\n}\r\n\r\n/**\r\n * Computes the number of vertices in a geometry.  The runtime is linear with\r\n * respect to the number of attributes in a vertex, not the number of vertices.\r\n *\r\n * @param {Geometry} geometry The geometry.\r\n * @returns {Number} The number of vertices in the geometry.\r\n *\r\n * @example\r\n * const numVertices = Cesium.Geometry.computeNumberOfVertices(geometry);\r\n */\r\nGeometry.computeNumberOfVertices = function (geometry) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"geometry\", geometry);\r\n  //>>includeEnd('debug');\r\n\r\n  let numberOfVertices = -1;\r\n  for (const property in geometry.attributes) {\r\n    if (\r\n      geometry.attributes.hasOwnProperty(property) &&\r\n      defined(geometry.attributes[property]) &&\r\n      defined(geometry.attributes[property].values)\r\n    ) {\r\n      const attribute = geometry.attributes[property];\r\n      const num = attribute.values.length / attribute.componentsPerAttribute;\r\n      //>>includeStart('debug', pragmas.debug);\r\n      if (numberOfVertices !== num && numberOfVertices !== -1) {\r\n        throw new DeveloperError(\r\n          \"All attribute lists must have the same number of attributes.\"\r\n        );\r\n      }\r\n      //>>includeEnd('debug');\r\n      numberOfVertices = num;\r\n    }\r\n  }\r\n\r\n  return numberOfVertices;\r\n};\r\n\r\nconst rectangleCenterScratch = new Cartographic();\r\nconst enuCenterScratch = new Cartesian3();\r\nconst fixedFrameToEnuScratch = new Matrix4();\r\nconst boundingRectanglePointsCartographicScratch = [\r\n  new Cartographic(),\r\n  new Cartographic(),\r\n  new Cartographic(),\r\n];\r\nconst boundingRectanglePointsEnuScratch = [\r\n  new Cartesian2(),\r\n  new Cartesian2(),\r\n  new Cartesian2(),\r\n];\r\nconst points2DScratch = [new Cartesian2(), new Cartesian2(), new Cartesian2()];\r\nconst pointEnuScratch = new Cartesian3();\r\nconst enuRotationScratch = new Quaternion();\r\nconst enuRotationMatrixScratch = new Matrix4();\r\nconst rotation2DScratch = new Matrix2();\r\n\r\n/**\r\n * For remapping texture coordinates when rendering GroundPrimitives with materials.\r\n * GroundPrimitive texture coordinates are computed to align with the cartographic coordinate system on the globe.\r\n * However, EllipseGeometry, RectangleGeometry, and PolygonGeometry all bake rotations to per-vertex texture coordinates\r\n * using different strategies.\r\n *\r\n * This method is used by EllipseGeometry and PolygonGeometry to approximate the same visual effect.\r\n * We encapsulate rotation and scale by computing a \"transformed\" texture coordinate system and computing\r\n * a set of reference points from which \"cartographic\" texture coordinates can be remapped to the \"transformed\"\r\n * system using distances to lines in 2D.\r\n *\r\n * This approximation becomes less accurate as the covered area increases, especially for GroundPrimitives near the poles,\r\n * but is generally reasonable for polygons and ellipses around the size of USA states.\r\n *\r\n * RectangleGeometry has its own version of this method that computes remapping coordinates using cartographic space\r\n * as an intermediary instead of local ENU, which is more accurate for large-area rectangles.\r\n *\r\n * @param {Cartesian3[]} positions Array of positions outlining the geometry\r\n * @param {Number} stRotation Texture coordinate rotation.\r\n * @param {Ellipsoid} ellipsoid Ellipsoid for projecting and generating local vectors.\r\n * @param {Rectangle} boundingRectangle Bounding rectangle around the positions.\r\n * @returns {Number[]} An array of 6 numbers specifying [minimum point, u extent, v extent] as points in the \"cartographic\" system.\r\n * @private\r\n */\r\nGeometry._textureCoordinateRotationPoints = function (\r\n  positions,\r\n  stRotation,\r\n  ellipsoid,\r\n  boundingRectangle\r\n) {\r\n  let i;\r\n\r\n  // Create a local east-north-up coordinate system centered on the polygon's bounding rectangle.\r\n  // Project the southwest, northwest, and southeast corners of the bounding rectangle into the plane of ENU as 2D points.\r\n  // These are the equivalents of (0,0), (0,1), and (1,0) in the texture coordiante system computed in ShadowVolumeAppearanceFS,\r\n  // aka \"ENU texture space.\"\r\n  const rectangleCenter = Rectangle.center(\r\n    boundingRectangle,\r\n    rectangleCenterScratch\r\n  );\r\n  const enuCenter = Cartographic.toCartesian(\r\n    rectangleCenter,\r\n    ellipsoid,\r\n    enuCenterScratch\r\n  );\r\n  const enuToFixedFrame = Transforms.eastNorthUpToFixedFrame(\r\n    enuCenter,\r\n    ellipsoid,\r\n    fixedFrameToEnuScratch\r\n  );\r\n  const fixedFrameToEnu = Matrix4.inverse(\r\n    enuToFixedFrame,\r\n    fixedFrameToEnuScratch\r\n  );\r\n\r\n  const boundingPointsEnu = boundingRectanglePointsEnuScratch;\r\n  const boundingPointsCarto = boundingRectanglePointsCartographicScratch;\r\n\r\n  boundingPointsCarto[0].longitude = boundingRectangle.west;\r\n  boundingPointsCarto[0].latitude = boundingRectangle.south;\r\n\r\n  boundingPointsCarto[1].longitude = boundingRectangle.west;\r\n  boundingPointsCarto[1].latitude = boundingRectangle.north;\r\n\r\n  boundingPointsCarto[2].longitude = boundingRectangle.east;\r\n  boundingPointsCarto[2].latitude = boundingRectangle.south;\r\n\r\n  let posEnu = pointEnuScratch;\r\n\r\n  for (i = 0; i < 3; i++) {\r\n    Cartographic.toCartesian(boundingPointsCarto[i], ellipsoid, posEnu);\r\n    posEnu = Matrix4.multiplyByPointAsVector(fixedFrameToEnu, posEnu, posEnu);\r\n    boundingPointsEnu[i].x = posEnu.x;\r\n    boundingPointsEnu[i].y = posEnu.y;\r\n  }\r\n\r\n  // Rotate each point in the polygon around the up vector in the ENU by -stRotation and project into ENU as 2D.\r\n  // Compute the bounding box of these rotated points in the 2D ENU plane.\r\n  // Rotate the corners back by stRotation, then compute their equivalents in the ENU texture space using the corners computed earlier.\r\n  const rotation = Quaternion.fromAxisAngle(\r\n    Cartesian3.UNIT_Z,\r\n    -stRotation,\r\n    enuRotationScratch\r\n  );\r\n  const textureMatrix = Matrix3.fromQuaternion(\r\n    rotation,\r\n    enuRotationMatrixScratch\r\n  );\r\n\r\n  const positionsLength = positions.length;\r\n  let enuMinX = Number.POSITIVE_INFINITY;\r\n  let enuMinY = Number.POSITIVE_INFINITY;\r\n  let enuMaxX = Number.NEGATIVE_INFINITY;\r\n  let enuMaxY = Number.NEGATIVE_INFINITY;\r\n  for (i = 0; i < positionsLength; i++) {\r\n    posEnu = Matrix4.multiplyByPointAsVector(\r\n      fixedFrameToEnu,\r\n      positions[i],\r\n      posEnu\r\n    );\r\n    posEnu = Matrix3.multiplyByVector(textureMatrix, posEnu, posEnu);\r\n\r\n    enuMinX = Math.min(enuMinX, posEnu.x);\r\n    enuMinY = Math.min(enuMinY, posEnu.y);\r\n    enuMaxX = Math.max(enuMaxX, posEnu.x);\r\n    enuMaxY = Math.max(enuMaxY, posEnu.y);\r\n  }\r\n\r\n  const toDesiredInComputed = Matrix2.fromRotation(\r\n    stRotation,\r\n    rotation2DScratch\r\n  );\r\n\r\n  const points2D = points2DScratch;\r\n  points2D[0].x = enuMinX;\r\n  points2D[0].y = enuMinY;\r\n\r\n  points2D[1].x = enuMinX;\r\n  points2D[1].y = enuMaxY;\r\n\r\n  points2D[2].x = enuMaxX;\r\n  points2D[2].y = enuMinY;\r\n\r\n  const boundingEnuMin = boundingPointsEnu[0];\r\n  const boundingPointsWidth = boundingPointsEnu[2].x - boundingEnuMin.x;\r\n  const boundingPointsHeight = boundingPointsEnu[1].y - boundingEnuMin.y;\r\n\r\n  for (i = 0; i < 3; i++) {\r\n    const point2D = points2D[i];\r\n    // rotate back\r\n    Matrix2.multiplyByVector(toDesiredInComputed, point2D, point2D);\r\n\r\n    // Convert point into east-north texture coordinate space\r\n    point2D.x = (point2D.x - boundingEnuMin.x) / boundingPointsWidth;\r\n    point2D.y = (point2D.y - boundingEnuMin.y) / boundingPointsHeight;\r\n  }\r\n\r\n  const minXYCorner = points2D[0];\r\n  const maxYCorner = points2D[1];\r\n  const maxXCorner = points2D[2];\r\n  const result = new Array(6);\r\n  Cartesian2.pack(minXYCorner, result);\r\n  Cartesian2.pack(maxYCorner, result, 2);\r\n  Cartesian2.pack(maxXCorner, result, 4);\r\n\r\n  return result;\r\n};\r\nexport default Geometry;\r\n","import defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\n\r\n/**\r\n * Values and type information for geometry attributes.  A {@link Geometry}\r\n * generally contains one or more attributes.  All attributes together form\r\n * the geometry's vertices.\r\n *\r\n * @alias GeometryAttribute\r\n * @constructor\r\n *\r\n * @param {Object} [options] Object with the following properties:\r\n * @param {ComponentDatatype} [options.componentDatatype] The datatype of each component in the attribute, e.g., individual elements in values.\r\n * @param {Number} [options.componentsPerAttribute] A number between 1 and 4 that defines the number of components in an attributes.\r\n * @param {Boolean} [options.normalize=false] When <code>true</code> and <code>componentDatatype</code> is an integer format, indicate that the components should be mapped to the range [0, 1] (unsigned) or [-1, 1] (signed) when they are accessed as floating-point for rendering.\r\n * @param {number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} [options.values] The values for the attributes stored in a typed array.\r\n *\r\n * @exception {DeveloperError} options.componentsPerAttribute must be between 1 and 4.\r\n *\r\n *\r\n * @example\r\n * const geometry = new Cesium.Geometry({\r\n *   attributes : {\r\n *     position : new Cesium.GeometryAttribute({\r\n *       componentDatatype : Cesium.ComponentDatatype.FLOAT,\r\n *       componentsPerAttribute : 3,\r\n *       values : new Float32Array([\r\n *         0.0, 0.0, 0.0,\r\n *         7500000.0, 0.0, 0.0,\r\n *         0.0, 7500000.0, 0.0\r\n *       ])\r\n *     })\r\n *   },\r\n *   primitiveType : Cesium.PrimitiveType.LINE_LOOP\r\n * });\r\n *\r\n * @see Geometry\r\n */\r\nfunction GeometryAttribute(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(options.componentDatatype)) {\r\n    throw new DeveloperError(\"options.componentDatatype is required.\");\r\n  }\r\n  if (!defined(options.componentsPerAttribute)) {\r\n    throw new DeveloperError(\"options.componentsPerAttribute is required.\");\r\n  }\r\n  if (\r\n    options.componentsPerAttribute < 1 ||\r\n    options.componentsPerAttribute > 4\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"options.componentsPerAttribute must be between 1 and 4.\"\r\n    );\r\n  }\r\n  if (!defined(options.values)) {\r\n    throw new DeveloperError(\"options.values is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  /**\r\n   * The datatype of each component in the attribute, e.g., individual elements in\r\n   * {@link GeometryAttribute#values}.\r\n   *\r\n   * @type ComponentDatatype\r\n   *\r\n   * @default undefined\r\n   */\r\n  this.componentDatatype = options.componentDatatype;\r\n\r\n  /**\r\n   * A number between 1 and 4 that defines the number of components in an attributes.\r\n   * For example, a position attribute with x, y, and z components would have 3 as\r\n   * shown in the code example.\r\n   *\r\n   * @type Number\r\n   *\r\n   * @default undefined\r\n   *\r\n   * @example\r\n   * attribute.componentDatatype = Cesium.ComponentDatatype.FLOAT;\r\n   * attribute.componentsPerAttribute = 3;\r\n   * attribute.values = new Float32Array([\r\n   *   0.0, 0.0, 0.0,\r\n   *   7500000.0, 0.0, 0.0,\r\n   *   0.0, 7500000.0, 0.0\r\n   * ]);\r\n   */\r\n  this.componentsPerAttribute = options.componentsPerAttribute;\r\n\r\n  /**\r\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\r\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\r\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\r\n   * <p>\r\n   * This is commonly used when storing colors using {@link ComponentDatatype.UNSIGNED_BYTE}.\r\n   * </p>\r\n   *\r\n   * @type Boolean\r\n   *\r\n   * @default false\r\n   *\r\n   * @example\r\n   * attribute.componentDatatype = Cesium.ComponentDatatype.UNSIGNED_BYTE;\r\n   * attribute.componentsPerAttribute = 4;\r\n   * attribute.normalize = true;\r\n   * attribute.values = new Uint8Array([\r\n   *   Cesium.Color.floatToByte(color.red),\r\n   *   Cesium.Color.floatToByte(color.green),\r\n   *   Cesium.Color.floatToByte(color.blue),\r\n   *   Cesium.Color.floatToByte(color.alpha)\r\n   * ]);\r\n   */\r\n  this.normalize = defaultValue(options.normalize, false);\r\n\r\n  /**\r\n   * The values for the attributes stored in a typed array.  In the code example,\r\n   * every three elements in <code>values</code> defines one attributes since\r\n   * <code>componentsPerAttribute</code> is 3.\r\n   *\r\n   * @type {number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array}\r\n   *\r\n   * @default undefined\r\n   *\r\n   * @example\r\n   * attribute.componentDatatype = Cesium.ComponentDatatype.FLOAT;\r\n   * attribute.componentsPerAttribute = 3;\r\n   * attribute.values = new Float32Array([\r\n   *   0.0, 0.0, 0.0,\r\n   *   7500000.0, 0.0, 0.0,\r\n   *   0.0, 7500000.0, 0.0\r\n   * ]);\r\n   */\r\n  this.values = options.values;\r\n}\r\nexport default GeometryAttribute;\r\n"],"names":["WebGLConstants","defaultValue","Check","PrimitiveType","GeometryType","defined","DeveloperError","Cartographic","Cartesian3","Matrix4","Cartesian2","Quaternion","Matrix2","Rectangle","Transforms","Matrix3"],"mappings":";;EAAA;EACA;EACA;EACA,MAAM,YAAY,GAAG;EACrB,EAAE,IAAI,EAAE,CAAC;EACT,EAAE,SAAS,EAAE,CAAC;EACd,EAAE,KAAK,EAAE,CAAC;EACV,EAAE,SAAS,EAAE,CAAC;EACd,CAAC,CAAC;AACF,uBAAe,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC;;ECP1C;EACA;EACA;EACA;EACA;EACA,MAAM,aAAa,GAAG;EACtB;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,MAAM,EAAEA,6BAAc,CAAC,MAAM;AAC/B;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,KAAK,EAAEA,6BAAc,CAAC,KAAK;AAC7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,SAAS,EAAEA,6BAAc,CAAC,SAAS;AACrC;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,UAAU,EAAEA,6BAAc,CAAC,UAAU;AACvC;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,SAAS,EAAEA,6BAAc,CAAC,SAAS;AACrC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,cAAc,EAAEA,6BAAc,CAAC,cAAc;AAC/C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,YAAY,EAAEA,6BAAc,CAAC,YAAY;EAC3C,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA,aAAa,CAAC,OAAO,GAAG,UAAU,aAAa,EAAE;EACjD,EAAE;EACF,IAAI,aAAa,KAAK,aAAa,CAAC,KAAK;EACzC,IAAI,aAAa,KAAK,aAAa,CAAC,SAAS;EAC7C,IAAI,aAAa,KAAK,aAAa,CAAC,UAAU;EAC9C,IAAI;EACJ,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA,aAAa,CAAC,WAAW,GAAG,UAAU,aAAa,EAAE;EACrD,EAAE;EACF,IAAI,aAAa,KAAK,aAAa,CAAC,SAAS;EAC7C,IAAI,aAAa,KAAK,aAAa,CAAC,cAAc;EAClD,IAAI,aAAa,KAAK,aAAa,CAAC,YAAY;EAChD,IAAI;EACJ,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA,aAAa,CAAC,QAAQ,GAAG,UAAU,aAAa,EAAE;EAClD,EAAE;EACF,IAAI,aAAa,KAAK,aAAa,CAAC,MAAM;EAC1C,IAAI,aAAa,KAAK,aAAa,CAAC,KAAK;EACzC,IAAI,aAAa,KAAK,aAAa,CAAC,SAAS;EAC7C,IAAI,aAAa,KAAK,aAAa,CAAC,UAAU;EAC9C,IAAI,aAAa,KAAK,aAAa,CAAC,SAAS;EAC7C,IAAI,aAAa,KAAK,aAAa,CAAC,cAAc;EAClD,IAAI,aAAa,KAAK,aAAa,CAAC,YAAY;EAChD,IAAI;EACJ,CAAC,CAAC;AACF;AACA,wBAAe,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC;;EC1F3C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAAS,QAAQ,CAAC,OAAO,EAAE;EAC3B,EAAE,OAAO,GAAGC,yBAAY,CAAC,OAAO,EAAEA,yBAAY,CAAC,YAAY,CAAC,CAAC;AAC7D;EACA;EACA,EAAEC,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,oBAAoB,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;EAChE;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACvC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,IAAI,CAAC,OAAO,GAAG,OAAO,C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"}