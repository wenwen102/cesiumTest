{"version":3,"file":"AttributeCompression-ec6d27e6.js","sources":["../../../packages/engine/Source/Scene/AttributeType.js","../../../packages/engine/Source/Core/AttributeCompression.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\r\nimport Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport Cartesian4 from \"../Core/Cartesian4.js\";\r\nimport Check from \"../Core/Check.js\";\r\nimport DeveloperError from \"../Core/DeveloperError.js\";\r\nimport Matrix2 from \"../Core/Matrix2.js\";\r\nimport Matrix3 from \"../Core/Matrix3.js\";\r\nimport Matrix4 from \"../Core/Matrix4.js\";\r\n\r\n/**\r\n * An enum describing the attribute type for glTF and 3D Tiles.\r\n *\r\n * @enum {String}\r\n *\r\n * @private\r\n */\r\nconst AttributeType = {\r\n  /**\r\n   * The attribute is a single component.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  SCALAR: \"SCALAR\",\r\n\r\n  /**\r\n   * The attribute is a two-component vector.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  VEC2: \"VEC2\",\r\n\r\n  /**\r\n   * The attribute is a three-component vector.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  VEC3: \"VEC3\",\r\n\r\n  /**\r\n   * The attribute is a four-component vector.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  VEC4: \"VEC4\",\r\n\r\n  /**\r\n   * The attribute is a 2x2 matrix.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  MAT2: \"MAT2\",\r\n\r\n  /**\r\n   * The attribute is a 3x3 matrix.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  MAT3: \"MAT3\",\r\n\r\n  /**\r\n   * The attribute is a 4x4 matrix.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  MAT4: \"MAT4\",\r\n};\r\n\r\n/**\r\n * Gets the scalar, vector, or matrix type for the attribute type.\r\n *\r\n * @param {AttributeType} attributeType The attribute type.\r\n * @returns {*} The math type.\r\n *\r\n * @private\r\n */\r\nAttributeType.getMathType = function (attributeType) {\r\n  switch (attributeType) {\r\n    case AttributeType.SCALAR:\r\n      return Number;\r\n    case AttributeType.VEC2:\r\n      return Cartesian2;\r\n    case AttributeType.VEC3:\r\n      return Cartesian3;\r\n    case AttributeType.VEC4:\r\n      return Cartesian4;\r\n    case AttributeType.MAT2:\r\n      return Matrix2;\r\n    case AttributeType.MAT3:\r\n      return Matrix3;\r\n    case AttributeType.MAT4:\r\n      return Matrix4;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    default:\r\n      throw new DeveloperError(\"attributeType is not a valid value.\");\r\n    //>>includeEnd('debug');\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the number of components per attribute.\r\n *\r\n * @param {AttributeType} attributeType The attribute type.\r\n * @returns {Number} The number of components.\r\n *\r\n * @private\r\n */\r\nAttributeType.getNumberOfComponents = function (attributeType) {\r\n  switch (attributeType) {\r\n    case AttributeType.SCALAR:\r\n      return 1;\r\n    case AttributeType.VEC2:\r\n      return 2;\r\n    case AttributeType.VEC3:\r\n      return 3;\r\n    case AttributeType.VEC4:\r\n    case AttributeType.MAT2:\r\n      return 4;\r\n    case AttributeType.MAT3:\r\n      return 9;\r\n    case AttributeType.MAT4:\r\n      return 16;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    default:\r\n      throw new DeveloperError(\"attributeType is not a valid value.\");\r\n    //>>includeEnd('debug');\r\n  }\r\n};\r\n\r\n/**\r\n * Get the number of attribute locations needed to fit this attribute. Most\r\n * types require one, but matrices require multiple attribute locations.\r\n *\r\n * @param {AttributeType} attributeType The attribute type.\r\n * @returns {Number} The number of attribute locations needed in the shader\r\n *\r\n * @private\r\n */\r\nAttributeType.getAttributeLocationCount = function (attributeType) {\r\n  switch (attributeType) {\r\n    case AttributeType.SCALAR:\r\n    case AttributeType.VEC2:\r\n    case AttributeType.VEC3:\r\n    case AttributeType.VEC4:\r\n      return 1;\r\n    case AttributeType.MAT2:\r\n      return 2;\r\n    case AttributeType.MAT3:\r\n      return 3;\r\n    case AttributeType.MAT4:\r\n      return 4;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    default:\r\n      throw new DeveloperError(\"attributeType is not a valid value.\");\r\n    //>>includeEnd('debug');\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the GLSL type for the attribute type.\r\n *\r\n * @param {AttributeType} attributeType The attribute type.\r\n * @returns {String} The GLSL type for the attribute type.\r\n *\r\n * @private\r\n */\r\nAttributeType.getGlslType = function (attributeType) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.string(\"attributeType\", attributeType);\r\n  //>>includeEnd('debug');\r\n\r\n  switch (attributeType) {\r\n    case AttributeType.SCALAR:\r\n      return \"float\";\r\n    case AttributeType.VEC2:\r\n      return \"vec2\";\r\n    case AttributeType.VEC3:\r\n      return \"vec3\";\r\n    case AttributeType.VEC4:\r\n      return \"vec4\";\r\n    case AttributeType.MAT2:\r\n      return \"mat2\";\r\n    case AttributeType.MAT3:\r\n      return \"mat3\";\r\n    case AttributeType.MAT4:\r\n      return \"mat4\";\r\n    //>>includeStart('debug', pragmas.debug);\r\n    default:\r\n      throw new DeveloperError(\"attributeType is not a valid value.\");\r\n    //>>includeEnd('debug');\r\n  }\r\n};\r\n\r\nexport default Object.freeze(AttributeType);\r\n","import Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport Check from \"./Check.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport AttributeType from \"../Scene/AttributeType.js\";\r\n\r\nconst RIGHT_SHIFT = 1.0 / 256.0;\r\nconst LEFT_SHIFT = 256.0;\r\n\r\n/**\r\n * Attribute compression and decompression functions.\r\n *\r\n * @namespace AttributeCompression\r\n *\r\n * @private\r\n */\r\nconst AttributeCompression = {};\r\n\r\n/**\r\n * Encodes a normalized vector into 2 SNORM values in the range of [0-rangeMax] following the 'oct' encoding.\r\n *\r\n * Oct encoding is a compact representation of unit length vectors.\r\n * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\r\n * Cigolle et al 2014: {@link http://jcgt.org/published/0003/02/01/}\r\n *\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 component 'oct' encoding.\r\n * @param {Cartesian2} result The 2 component oct-encoded unit length vector.\r\n * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\r\n * @returns {Cartesian2} The 2 component oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n *\r\n * @see AttributeCompression.octDecodeInRange\r\n */\r\nAttributeCompression.octEncodeInRange = function (vector, rangeMax, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"vector\", vector);\r\n  Check.defined(\"result\", result);\r\n  const magSquared = Cartesian3.magnitudeSquared(vector);\r\n  if (Math.abs(magSquared - 1.0) > CesiumMath.EPSILON6) {\r\n    throw new DeveloperError(\"vector must be normalized.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  result.x =\r\n    vector.x / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\r\n  result.y =\r\n    vector.y / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\r\n  if (vector.z < 0) {\r\n    const x = result.x;\r\n    const y = result.y;\r\n    result.x = (1.0 - Math.abs(y)) * CesiumMath.signNotZero(x);\r\n    result.y = (1.0 - Math.abs(x)) * CesiumMath.signNotZero(y);\r\n  }\r\n\r\n  result.x = CesiumMath.toSNorm(result.x, rangeMax);\r\n  result.y = CesiumMath.toSNorm(result.y, rangeMax);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding.\r\n *\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\r\n * @param {Cartesian2} result The 2 byte oct-encoded unit length vector.\r\n * @returns {Cartesian2} The 2 byte oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n *\r\n * @see AttributeCompression.octEncodeInRange\r\n * @see AttributeCompression.octDecode\r\n */\r\nAttributeCompression.octEncode = function (vector, result) {\r\n  return AttributeCompression.octEncodeInRange(vector, 255, result);\r\n};\r\n\r\nconst octEncodeScratch = new Cartesian2();\r\nconst uint8ForceArray = new Uint8Array(1);\r\nfunction forceUint8(value) {\r\n  uint8ForceArray[0] = value;\r\n  return uint8ForceArray[0];\r\n}\r\n/**\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 4 byte 'oct' encoding.\r\n * @param {Cartesian4} result The 4 byte oct-encoded unit length vector.\r\n * @returns {Cartesian4} The 4 byte oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n *\r\n * @see AttributeCompression.octEncodeInRange\r\n * @see AttributeCompression.octDecodeFromCartesian4\r\n */\r\nAttributeCompression.octEncodeToCartesian4 = function (vector, result) {\r\n  AttributeCompression.octEncodeInRange(vector, 65535, octEncodeScratch);\r\n  result.x = forceUint8(octEncodeScratch.x * RIGHT_SHIFT);\r\n  result.y = forceUint8(octEncodeScratch.x);\r\n  result.z = forceUint8(octEncodeScratch.y * RIGHT_SHIFT);\r\n  result.w = forceUint8(octEncodeScratch.y);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component vector.\r\n *\r\n * @param {Number} x The x component of the oct-encoded unit length vector.\r\n * @param {Number} y The y component of the oct-encoded unit length vector.\r\n * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\r\n * @param {Cartesian3} result The decoded and normalized vector\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n * @exception {DeveloperError} x and y must be unsigned normalized integers between 0 and rangeMax.\r\n *\r\n * @see AttributeCompression.octEncodeInRange\r\n */\r\nAttributeCompression.octDecodeInRange = function (x, y, rangeMax, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"result\", result);\r\n  if (x < 0 || x > rangeMax || y < 0 || y > rangeMax) {\r\n    throw new DeveloperError(\r\n      `x and y must be unsigned normalized integers between 0 and ${rangeMax}`\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = CesiumMath.fromSNorm(x, rangeMax);\r\n  result.y = CesiumMath.fromSNorm(y, rangeMax);\r\n  result.z = 1.0 - (Math.abs(result.x) + Math.abs(result.y));\r\n\r\n  if (result.z < 0.0) {\r\n    const oldVX = result.x;\r\n    result.x = (1.0 - Math.abs(result.y)) * CesiumMath.signNotZero(oldVX);\r\n    result.y = (1.0 - Math.abs(oldVX)) * CesiumMath.signNotZero(result.y);\r\n  }\r\n\r\n  return Cartesian3.normalize(result, result);\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 2 byte 'oct' encoding to a normalized 3-component vector.\r\n *\r\n * @param {Number} x The x component of the oct-encoded unit length vector.\r\n * @param {Number} y The y component of the oct-encoded unit length vector.\r\n * @param {Cartesian3} result The decoded and normalized vector.\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n * @exception {DeveloperError} x and y must be an unsigned normalized integer between 0 and 255.\r\n *\r\n * @see AttributeCompression.octDecodeInRange\r\n */\r\nAttributeCompression.octDecode = function (x, y, result) {\r\n  return AttributeCompression.octDecodeInRange(x, y, 255, result);\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 4 byte 'oct' encoding to a normalized 3-component vector.\r\n *\r\n * @param {Cartesian4} encoded The oct-encoded unit length vector.\r\n * @param {Cartesian3} result The decoded and normalized vector.\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n * @exception {DeveloperError} x, y, z, and w must be unsigned normalized integers between 0 and 255.\r\n *\r\n * @see AttributeCompression.octDecodeInRange\r\n * @see AttributeCompression.octEncodeToCartesian4\r\n */\r\nAttributeCompression.octDecodeFromCartesian4 = function (encoded, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"encoded\", encoded);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n  const x = encoded.x;\r\n  const y = encoded.y;\r\n  const z = encoded.z;\r\n  const w = encoded.w;\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (\r\n    x < 0 ||\r\n    x > 255 ||\r\n    y < 0 ||\r\n    y > 255 ||\r\n    z < 0 ||\r\n    z > 255 ||\r\n    w < 0 ||\r\n    w > 255\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"x, y, z, and w must be unsigned normalized integers between 0 and 255\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const xOct16 = x * LEFT_SHIFT + y;\r\n  const yOct16 = z * LEFT_SHIFT + w;\r\n  return AttributeCompression.octDecodeInRange(xOct16, yOct16, 65535, result);\r\n};\r\n\r\n/**\r\n * Packs an oct encoded vector into a single floating-point number.\r\n *\r\n * @param {Cartesian2} encoded The oct encoded vector.\r\n * @returns {Number} The oct encoded vector packed into a single float.\r\n *\r\n */\r\nAttributeCompression.octPackFloat = function (encoded) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"encoded\", encoded);\r\n  //>>includeEnd('debug');\r\n  return 256.0 * encoded.x + encoded.y;\r\n};\r\n\r\nconst scratchEncodeCart2 = new Cartesian2();\r\n\r\n/**\r\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding and\r\n * stores those values in a single float-point number.\r\n *\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\r\n * @returns {Number} The 2 byte oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n */\r\nAttributeCompression.octEncodeFloat = function (vector) {\r\n  AttributeCompression.octEncode(vector, scratchEncodeCart2);\r\n  return AttributeCompression.octPackFloat(scratchEncodeCart2);\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 'oct' encoding packed in a floating-point number to a normalized 3-component vector.\r\n *\r\n * @param {Number} value The oct-encoded unit length vector stored as a single floating-point number.\r\n * @param {Cartesian3} result The decoded and normalized vector\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n */\r\nAttributeCompression.octDecodeFloat = function (value, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"value\", value);\r\n  //>>includeEnd('debug');\r\n\r\n  const temp = value / 256.0;\r\n  const x = Math.floor(temp);\r\n  const y = (temp - x) * 256.0;\r\n\r\n  return AttributeCompression.octDecode(x, y, result);\r\n};\r\n\r\n/**\r\n * Encodes three normalized vectors into 6 SNORM values in the range of [0-255] following the 'oct' encoding and\r\n * packs those into two floating-point numbers.\r\n *\r\n * @param {Cartesian3} v1 A normalized vector to be compressed.\r\n * @param {Cartesian3} v2 A normalized vector to be compressed.\r\n * @param {Cartesian3} v3 A normalized vector to be compressed.\r\n * @param {Cartesian2} result The 'oct' encoded vectors packed into two floating-point numbers.\r\n * @returns {Cartesian2} The 'oct' encoded vectors packed into two floating-point numbers.\r\n *\r\n */\r\nAttributeCompression.octPack = function (v1, v2, v3, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"v1\", v1);\r\n  Check.defined(\"v2\", v2);\r\n  Check.defined(\"v3\", v3);\r\n  Check.defined(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  const encoded1 = AttributeCompression.octEncodeFloat(v1);\r\n  const encoded2 = AttributeCompression.octEncodeFloat(v2);\r\n\r\n  const encoded3 = AttributeCompression.octEncode(v3, scratchEncodeCart2);\r\n  result.x = 65536.0 * encoded3.x + encoded1;\r\n  result.y = 65536.0 * encoded3.y + encoded2;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Decodes three unit-length vectors in 'oct' encoding packed into a floating-point number to a normalized 3-component vector.\r\n *\r\n * @param {Cartesian2} packed The three oct-encoded unit length vectors stored as two floating-point number.\r\n * @param {Cartesian3} v1 One decoded and normalized vector.\r\n * @param {Cartesian3} v2 One decoded and normalized vector.\r\n * @param {Cartesian3} v3 One decoded and normalized vector.\r\n */\r\nAttributeCompression.octUnpack = function (packed, v1, v2, v3) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"packed\", packed);\r\n  Check.defined(\"v1\", v1);\r\n  Check.defined(\"v2\", v2);\r\n  Check.defined(\"v3\", v3);\r\n  //>>includeEnd('debug');\r\n\r\n  let temp = packed.x / 65536.0;\r\n  const x = Math.floor(temp);\r\n  const encodedFloat1 = (temp - x) * 65536.0;\r\n\r\n  temp = packed.y / 65536.0;\r\n  const y = Math.floor(temp);\r\n  const encodedFloat2 = (temp - y) * 65536.0;\r\n\r\n  AttributeCompression.octDecodeFloat(encodedFloat1, v1);\r\n  AttributeCompression.octDecodeFloat(encodedFloat2, v2);\r\n  AttributeCompression.octDecode(x, y, v3);\r\n};\r\n\r\n/**\r\n * Pack texture coordinates into a single float. The texture coordinates will only preserve 12 bits of precision.\r\n *\r\n * @param {Cartesian2} textureCoordinates The texture coordinates to compress.  Both coordinates must be in the range 0.0-1.0.\r\n * @returns {Number} The packed texture coordinates.\r\n *\r\n */\r\nAttributeCompression.compressTextureCoordinates = function (\r\n  textureCoordinates\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"textureCoordinates\", textureCoordinates);\r\n  //>>includeEnd('debug');\r\n\r\n  // Move x and y to the range 0-4095;\r\n  const x = (textureCoordinates.x * 4095.0) | 0;\r\n  const y = (textureCoordinates.y * 4095.0) | 0;\r\n  return 4096.0 * x + y;\r\n};\r\n\r\n/**\r\n * Decompresses texture coordinates that were packed into a single float.\r\n *\r\n * @param {Number} compressed The compressed texture coordinates.\r\n * @param {Cartesian2} result The decompressed texture coordinates.\r\n * @returns {Cartesian2} The modified result parameter.\r\n *\r\n */\r\nAttributeCompression.decompressTextureCoordinates = function (\r\n  compressed,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"compressed\", compressed);\r\n  Check.defined(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  const temp = compressed / 4096.0;\r\n  const xZeroTo4095 = Math.floor(temp);\r\n  result.x = xZeroTo4095 / 4095.0;\r\n  result.y = (compressed - xZeroTo4095 * 4096) / 4095;\r\n  return result;\r\n};\r\n\r\nfunction zigZagDecode(value) {\r\n  return (value >> 1) ^ -(value & 1);\r\n}\r\n\r\n/**\r\n * Decodes delta and ZigZag encoded vertices. This modifies the buffers in place.\r\n *\r\n * @param {Uint16Array} uBuffer The buffer view of u values.\r\n * @param {Uint16Array} vBuffer The buffer view of v values.\r\n * @param {Uint16Array} [heightBuffer] The buffer view of height values.\r\n *\r\n * @see {@link https://github.com/CesiumGS/quantized-mesh|quantized-mesh-1.0 terrain format}\r\n */\r\nAttributeCompression.zigZagDeltaDecode = function (\r\n  uBuffer,\r\n  vBuffer,\r\n  heightBuffer\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"uBuffer\", uBuffer);\r\n  Check.defined(\"vBuffer\", vBuffer);\r\n  Check.typeOf.number.equals(\r\n    \"uBuffer.length\",\r\n    \"vBuffer.length\",\r\n    uBuffer.length,\r\n    vBuffer.length\r\n  );\r\n  if (defined(heightBuffer)) {\r\n    Check.typeOf.number.equals(\r\n      \"uBuffer.length\",\r\n      \"heightBuffer.length\",\r\n      uBuffer.length,\r\n      heightBuffer.length\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const count = uBuffer.length;\r\n\r\n  let u = 0;\r\n  let v = 0;\r\n  let height = 0;\r\n\r\n  for (let i = 0; i < count; ++i) {\r\n    u += zigZagDecode(uBuffer[i]);\r\n    v += zigZagDecode(vBuffer[i]);\r\n\r\n    uBuffer[i] = u;\r\n    vBuffer[i] = v;\r\n\r\n    if (defined(heightBuffer)) {\r\n      height += zigZagDecode(heightBuffer[i]);\r\n      heightBuffer[i] = height;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Dequantizes a quantized typed array into a floating point typed array.\r\n *\r\n * @see {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization#encoding-quantized-data}\r\n *\r\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array} typedArray The typed array for the quantized data.\r\n * @param {ComponentDatatype} componentDatatype The component datatype of the quantized data.\r\n * @param {AttributeType} type The attribute type of the quantized data.\r\n * @param {Number} count The number of attributes referenced in the dequantized array.\r\n *\r\n * @returns {Float32Array} The dequantized array.\r\n */\r\nAttributeCompression.dequantize = function (\r\n  typedArray,\r\n  componentDatatype,\r\n  type,\r\n  count\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"typedArray\", typedArray);\r\n  Check.defined(\"componentDatatype\", componentDatatype);\r\n  Check.defined(\"type\", type);\r\n  Check.defined(\"count\", count);\r\n  //>>includeEnd('debug');\r\n\r\n  const componentsPerAttribute = AttributeType.getNumberOfComponents(type);\r\n\r\n  let divisor;\r\n  switch (componentDatatype) {\r\n    case ComponentDatatype.BYTE:\r\n      divisor = 127.0;\r\n      break;\r\n    case ComponentDatatype.UNSIGNED_BYTE:\r\n      divisor = 255.0;\r\n      break;\r\n    case ComponentDatatype.SHORT:\r\n      divisor = 32767.0;\r\n      break;\r\n    case ComponentDatatype.UNSIGNED_SHORT:\r\n      divisor = 65535.0;\r\n      break;\r\n    case ComponentDatatype.INT:\r\n      divisor = 2147483647.0;\r\n      break;\r\n    case ComponentDatatype.UNSIGNED_INT:\r\n      divisor = 4294967295.0;\r\n      break;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    default:\r\n      throw new DeveloperError(\r\n        `Cannot dequantize component datatype: ${componentDatatype}`\r\n      );\r\n    //>>includeEnd('debug');\r\n  }\r\n\r\n  const dequantizedTypedArray = new Float32Array(\r\n    count * componentsPerAttribute\r\n  );\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    for (let j = 0; j < componentsPerAttribute; j++) {\r\n      const index = i * componentsPerAttribute + j;\r\n      dequantizedTypedArray[index] = Math.max(\r\n        typedArray[index] / divisor,\r\n        -1.0\r\n      );\r\n    }\r\n  }\r\n\r\n  return dequantizedTypedArray;\r\n};\r\n\r\n/**\r\n * Decode RGB565-encoded colors into a floating point typed array containing\r\n * normalized RGB values.\r\n *\r\n * @param {Uint16Array} typedArray Array of RGB565 values\r\n * @param {Float32Array} [result] Array to store the normalized VEC3 result\r\n */\r\nAttributeCompression.decodeRGB565 = function (typedArray, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"typedArray\", typedArray);\r\n\r\n  const expectedLength = typedArray.length * 3;\r\n  if (defined(result)) {\r\n    Check.typeOf.number.equals(\r\n      \"result.length\",\r\n      \"typedArray.length * 3\",\r\n      result.length,\r\n      expectedLength\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const count = typedArray.length;\r\n  if (!defined(result)) {\r\n    result = new Float32Array(count * 3);\r\n  }\r\n\r\n  const mask5 = (1 << 5) - 1;\r\n  const mask6 = (1 << 6) - 1;\r\n  const normalize5 = 1.0 / 31.0;\r\n  const normalize6 = 1.0 / 63.0;\r\n  for (let i = 0; i < count; i++) {\r\n    const value = typedArray[i];\r\n    const red = value >> 11;\r\n    const green = (value >> 5) & mask6;\r\n    const blue = value & mask5;\r\n\r\n    const offset = 3 * i;\r\n    result[offset] = red * normalize5;\r\n    result[offset + 1] = green * normalize6;\r\n    result[offset + 2] = blue * normalize5;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default AttributeCompression;\r\n"],"names":["Cartesian2","Cartesian3","Cartesian4","Matrix2","Matrix3","Matrix4","DeveloperError","Check","CesiumMath","defined","AttributeType","ComponentDatatype"],"mappings":"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"}