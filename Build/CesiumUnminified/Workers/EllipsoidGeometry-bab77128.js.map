{"version":3,"file":"EllipsoidGeometry-bab77128.js","sources":["../../../packages/engine/Source/Core/EllipsoidGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\nconst scratchPosition = new Cartesian3();\r\nconst scratchNormal = new Cartesian3();\r\nconst scratchTangent = new Cartesian3();\r\nconst scratchBitangent = new Cartesian3();\r\nconst scratchNormalST = new Cartesian3();\r\nconst defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\r\n\r\nconst cos = Math.cos;\r\nconst sin = Math.sin;\r\n\r\n/**\r\n * A description of an ellipsoid centered at the origin.\r\n *\r\n * @alias EllipsoidGeometry\r\n * @constructor\r\n *\r\n * @param {Object} [options] Object with the following properties:\r\n * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\r\n * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\r\n * @param {Number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n * @param {Number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n * @param {Number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\r\n * @param {Number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\r\n * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\r\n * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n *\r\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\r\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\r\n *\r\n * @see EllipsoidGeometry#createGeometry\r\n *\r\n * @example\r\n * const ellipsoid = new Cesium.EllipsoidGeometry({\r\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0)\r\n * });\r\n * const geometry = Cesium.EllipsoidGeometry.createGeometry(ellipsoid);\r\n */\r\nfunction EllipsoidGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  const radii = defaultValue(options.radii, defaultRadii);\r\n  const innerRadii = defaultValue(options.innerRadii, radii);\r\n  const minimumClock = defaultValue(options.minimumClock, 0.0);\r\n  const maximumClock = defaultValue(options.maximumClock, CesiumMath.TWO_PI);\r\n  const minimumCone = defaultValue(options.minimumCone, 0.0);\r\n  const maximumCone = defaultValue(options.maximumCone, CesiumMath.PI);\r\n  const stackPartitions = Math.round(defaultValue(options.stackPartitions, 64));\r\n  const slicePartitions = Math.round(defaultValue(options.slicePartitions, 64));\r\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (slicePartitions < 3) {\r\n    throw new DeveloperError(\r\n      \"options.slicePartitions cannot be less than three.\"\r\n    );\r\n  }\r\n  if (stackPartitions < 3) {\r\n    throw new DeveloperError(\r\n      \"options.stackPartitions cannot be less than three.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  this._radii = Cartesian3.clone(radii);\r\n  this._innerRadii = Cartesian3.clone(innerRadii);\r\n  this._minimumClock = minimumClock;\r\n  this._maximumClock = maximumClock;\r\n  this._minimumCone = minimumCone;\r\n  this._maximumCone = maximumCone;\r\n  this._stackPartitions = stackPartitions;\r\n  this._slicePartitions = slicePartitions;\r\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n  this._offsetAttribute = options.offsetAttribute;\r\n  this._workerName = \"createEllipsoidGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nEllipsoidGeometry.packedLength =\r\n  2 * Cartesian3.packedLength + VertexFormat.packedLength + 7;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {EllipsoidGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nEllipsoidGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  Cartesian3.pack(value._radii, array, startingIndex);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  Cartesian3.pack(value._innerRadii, array, startingIndex);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._minimumClock;\r\n  array[startingIndex++] = value._maximumClock;\r\n  array[startingIndex++] = value._minimumCone;\r\n  array[startingIndex++] = value._maximumCone;\r\n  array[startingIndex++] = value._stackPartitions;\r\n  array[startingIndex++] = value._slicePartitions;\r\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n  return array;\r\n};\r\n\r\nconst scratchRadii = new Cartesian3();\r\nconst scratchInnerRadii = new Cartesian3();\r\nconst scratchVertexFormat = new VertexFormat();\r\nconst scratchOptions = {\r\n  radii: scratchRadii,\r\n  innerRadii: scratchInnerRadii,\r\n  vertexFormat: scratchVertexFormat,\r\n  minimumClock: undefined,\r\n  maximumClock: undefined,\r\n  minimumCone: undefined,\r\n  maximumCone: undefined,\r\n  stackPartitions: undefined,\r\n  slicePartitions: undefined,\r\n  offsetAttribute: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {EllipsoidGeometry} [result] The object into which to store the result.\r\n * @returns {EllipsoidGeometry} The modified result parameter or a new EllipsoidGeometry instance if one was not provided.\r\n */\r\nEllipsoidGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  const radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  const innerRadii = Cartesian3.unpack(array, startingIndex, scratchInnerRadii);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  const vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  const minimumClock = array[startingIndex++];\r\n  const maximumClock = array[startingIndex++];\r\n  const minimumCone = array[startingIndex++];\r\n  const maximumCone = array[startingIndex++];\r\n  const stackPartitions = array[startingIndex++];\r\n  const slicePartitions = array[startingIndex++];\r\n  const offsetAttribute = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.minimumClock = minimumClock;\r\n    scratchOptions.maximumClock = maximumClock;\r\n    scratchOptions.minimumCone = minimumCone;\r\n    scratchOptions.maximumCone = maximumCone;\r\n    scratchOptions.stackPartitions = stackPartitions;\r\n    scratchOptions.slicePartitions = slicePartitions;\r\n    scratchOptions.offsetAttribute =\r\n      offsetAttribute === -1 ? undefined : offsetAttribute;\r\n    return new EllipsoidGeometry(scratchOptions);\r\n  }\r\n\r\n  result._radii = Cartesian3.clone(radii, result._radii);\r\n  result._innerRadii = Cartesian3.clone(innerRadii, result._innerRadii);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._minimumClock = minimumClock;\r\n  result._maximumClock = maximumClock;\r\n  result._minimumCone = minimumCone;\r\n  result._maximumCone = maximumCone;\r\n  result._stackPartitions = stackPartitions;\r\n  result._slicePartitions = slicePartitions;\r\n  result._offsetAttribute =\r\n    offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {EllipsoidGeometry} ellipsoidGeometry A description of the ellipsoid.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nEllipsoidGeometry.createGeometry = function (ellipsoidGeometry) {\r\n  const radii = ellipsoidGeometry._radii;\r\n  if (radii.x <= 0 || radii.y <= 0 || radii.z <= 0) {\r\n    return;\r\n  }\r\n\r\n  const innerRadii = ellipsoidGeometry._innerRadii;\r\n  if (innerRadii.x <= 0 || innerRadii.y <= 0 || innerRadii.z <= 0) {\r\n    return;\r\n  }\r\n\r\n  const minimumClock = ellipsoidGeometry._minimumClock;\r\n  const maximumClock = ellipsoidGeometry._maximumClock;\r\n  const minimumCone = ellipsoidGeometry._minimumCone;\r\n  const maximumCone = ellipsoidGeometry._maximumCone;\r\n  const vertexFormat = ellipsoidGeometry._vertexFormat;\r\n\r\n  // Add an extra slice and stack so that the number of partitions is the\r\n  // number of surfaces rather than the number of joints\r\n  let slicePartitions = ellipsoidGeometry._slicePartitions + 1;\r\n  let stackPartitions = ellipsoidGeometry._stackPartitions + 1;\r\n\r\n  slicePartitions = Math.round(\r\n    (slicePartitions * Math.abs(maximumClock - minimumClock)) /\r\n      CesiumMath.TWO_PI\r\n  );\r\n  stackPartitions = Math.round(\r\n    (stackPartitions * Math.abs(maximumCone - minimumCone)) / CesiumMath.PI\r\n  );\r\n\r\n  if (slicePartitions < 2) {\r\n    slicePartitions = 2;\r\n  }\r\n  if (stackPartitions < 2) {\r\n    stackPartitions = 2;\r\n  }\r\n\r\n  let i;\r\n  let j;\r\n  let index = 0;\r\n\r\n  // Create arrays for theta and phi. Duplicate first and last angle to\r\n  // allow different normals at the intersections.\r\n  const phis = [minimumCone];\r\n  const thetas = [minimumClock];\r\n  for (i = 0; i < stackPartitions; i++) {\r\n    phis.push(\r\n      minimumCone + (i * (maximumCone - minimumCone)) / (stackPartitions - 1)\r\n    );\r\n  }\r\n  phis.push(maximumCone);\r\n  for (j = 0; j < slicePartitions; j++) {\r\n    thetas.push(\r\n      minimumClock + (j * (maximumClock - minimumClock)) / (slicePartitions - 1)\r\n    );\r\n  }\r\n  thetas.push(maximumClock);\r\n  const numPhis = phis.length;\r\n  const numThetas = thetas.length;\r\n\r\n  // Allow for extra indices if there is an inner surface and if we need\r\n  // to close the sides if the clock range is not a full circle\r\n  let extraIndices = 0;\r\n  let vertexMultiplier = 1.0;\r\n  const hasInnerSurface =\r\n    innerRadii.x !== radii.x ||\r\n    innerRadii.y !== radii.y ||\r\n    innerRadii.z !== radii.z;\r\n  let isTopOpen = false;\r\n  let isBotOpen = false;\r\n  let isClockOpen = false;\r\n  if (hasInnerSurface) {\r\n    vertexMultiplier = 2.0;\r\n    if (minimumCone > 0.0) {\r\n      isTopOpen = true;\r\n      extraIndices += slicePartitions - 1;\r\n    }\r\n    if (maximumCone < Math.PI) {\r\n      isBotOpen = true;\r\n      extraIndices += slicePartitions - 1;\r\n    }\r\n    if ((maximumClock - minimumClock) % CesiumMath.TWO_PI) {\r\n      isClockOpen = true;\r\n      extraIndices += (stackPartitions - 1) * 2 + 1;\r\n    } else {\r\n      extraIndices += 1;\r\n    }\r\n  }\r\n\r\n  const vertexCount = numThetas * numPhis * vertexMultiplier;\r\n  const positions = new Float64Array(vertexCount * 3);\r\n  const isInner = new Array(vertexCount).fill(false);\r\n  const negateNormal = new Array(vertexCount).fill(false);\r\n\r\n  // Multiply by 6 because there are two triangles per sector\r\n  const indexCount = slicePartitions * stackPartitions * vertexMultiplier;\r\n  const numIndices =\r\n    6 *\r\n    (indexCount +\r\n      extraIndices +\r\n      1 -\r\n      (slicePartitions + stackPartitions) * vertexMultiplier);\r\n  const indices = IndexDatatype.createTypedArray(indexCount, numIndices);\r\n\r\n  const normals = vertexFormat.normal\r\n    ? new Float32Array(vertexCount * 3)\r\n    : undefined;\r\n  const tangents = vertexFormat.tangent\r\n    ? new Float32Array(vertexCount * 3)\r\n    : undefined;\r\n  const bitangents = vertexFormat.bitangent\r\n    ? new Float32Array(vertexCount * 3)\r\n    : undefined;\r\n  const st = vertexFormat.st ? new Float32Array(vertexCount * 2) : undefined;\r\n\r\n  // Calculate sin/cos phi\r\n  const sinPhi = new Array(numPhis);\r\n  const cosPhi = new Array(numPhis);\r\n  for (i = 0; i < numPhis; i++) {\r\n    sinPhi[i] = sin(phis[i]);\r\n    cosPhi[i] = cos(phis[i]);\r\n  }\r\n\r\n  // Calculate sin/cos theta\r\n  const sinTheta = new Array(numThetas);\r\n  const cosTheta = new Array(numThetas);\r\n  for (j = 0; j < numThetas; j++) {\r\n    cosTheta[j] = cos(thetas[j]);\r\n    sinTheta[j] = sin(thetas[j]);\r\n  }\r\n\r\n  // Create outer surface\r\n  for (i = 0; i < numPhis; i++) {\r\n    for (j = 0; j < numThetas; j++) {\r\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\r\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\r\n      positions[index++] = radii.z * cosPhi[i];\r\n    }\r\n  }\r\n\r\n  // Create inner surface\r\n  let vertexIndex = vertexCount / 2.0;\r\n  if (hasInnerSurface) {\r\n    for (i = 0; i < numPhis; i++) {\r\n      for (j = 0; j < numThetas; j++) {\r\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\r\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\r\n        positions[index++] = innerRadii.z * cosPhi[i];\r\n\r\n        // Keep track of which vertices are the inner and which ones\r\n        // need the normal to be negated\r\n        isInner[vertexIndex] = true;\r\n        if (i > 0 && i !== numPhis - 1 && j !== 0 && j !== numThetas - 1) {\r\n          negateNormal[vertexIndex] = true;\r\n        }\r\n        vertexIndex++;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create indices for outer surface\r\n  index = 0;\r\n  let topOffset;\r\n  let bottomOffset;\r\n  for (i = 1; i < numPhis - 2; i++) {\r\n    topOffset = i * numThetas;\r\n    bottomOffset = (i + 1) * numThetas;\r\n\r\n    for (j = 1; j < numThetas - 2; j++) {\r\n      indices[index++] = bottomOffset + j;\r\n      indices[index++] = bottomOffset + j + 1;\r\n      indices[index++] = topOffset + j + 1;\r\n\r\n      indices[index++] = bottomOffset + j;\r\n      indices[index++] = topOffset + j + 1;\r\n      indices[index++] = topOffset + j;\r\n    }\r\n  }\r\n\r\n  // Create indices for inner surface\r\n  if (hasInnerSurface) {\r\n    const offset = numPhis * numThetas;\r\n    for (i = 1; i < numPhis - 2; i++) {\r\n      topOffset = offset + i * numThetas;\r\n      bottomOffset = offset + (i + 1) * numThetas;\r\n\r\n      for (j = 1; j < numThetas - 2; j++) {\r\n        indices[index++] = bottomOffset + j;\r\n        indices[index++] = topOffset + j;\r\n        indices[index++] = topOffset + j + 1;\r\n\r\n        indices[index++] = bottomOffset + j;\r\n        indices[index++] = topOffset + j + 1;\r\n        indices[index++] = bottomOffset + j + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  let outerOffset;\r\n  let innerOffset;\r\n  if (hasInnerSurface) {\r\n    if (isTopOpen) {\r\n      // Connect the top of the inner surface to the top of the outer surface\r\n      innerOffset = numPhis * numThetas;\r\n      for (i = 1; i < numThetas - 2; i++) {\r\n        indices[index++] = i;\r\n        indices[index++] = i + 1;\r\n        indices[index++] = innerOffset + i + 1;\r\n\r\n        indices[index++] = i;\r\n        indices[index++] = innerOffset + i + 1;\r\n        indices[index++] = innerOffset + i;\r\n      }\r\n    }\r\n\r\n    if (isBotOpen) {\r\n      // Connect the bottom of the inner surface to the bottom of the outer surface\r\n      outerOffset = numPhis * numThetas - numThetas;\r\n      innerOffset = numPhis * numThetas * vertexMultiplier - numThetas;\r\n      for (i = 1; i < numThetas - 2; i++) {\r\n        indices[index++] = outerOffset + i + 1;\r\n        indices[index++] = outerOffset + i;\r\n        indices[index++] = innerOffset + i;\r\n\r\n        indices[index++] = outerOffset + i + 1;\r\n        indices[index++] = innerOffset + i;\r\n        indices[index++] = innerOffset + i + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Connect the edges if clock is not closed\r\n  if (isClockOpen) {\r\n    for (i = 1; i < numPhis - 2; i++) {\r\n      innerOffset = numThetas * numPhis + numThetas * i;\r\n      outerOffset = numThetas * i;\r\n      indices[index++] = innerOffset;\r\n      indices[index++] = outerOffset + numThetas;\r\n      indices[index++] = outerOffset;\r\n\r\n      indices[index++] = innerOffset;\r\n      indices[index++] = innerOffset + numThetas;\r\n      indices[index++] = outerOffset + numThetas;\r\n    }\r\n\r\n    for (i = 1; i < numPhis - 2; i++) {\r\n      innerOffset = numThetas * numPhis + numThetas * (i + 1) - 1;\r\n      outerOffset = numThetas * (i + 1) - 1;\r\n      indices[index++] = outerOffset + numThetas;\r\n      indices[index++] = innerOffset;\r\n      indices[index++] = outerOffset;\r\n\r\n      indices[index++] = outerOffset + numThetas;\r\n      indices[index++] = innerOffset + numThetas;\r\n      indices[index++] = innerOffset;\r\n    }\r\n  }\r\n\r\n  const attributes = new GeometryAttributes();\r\n\r\n  if (vertexFormat.position) {\r\n    attributes.position = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.DOUBLE,\r\n      componentsPerAttribute: 3,\r\n      values: positions,\r\n    });\r\n  }\r\n\r\n  let stIndex = 0;\r\n  let normalIndex = 0;\r\n  let tangentIndex = 0;\r\n  let bitangentIndex = 0;\r\n  const vertexCountHalf = vertexCount / 2.0;\r\n\r\n  let ellipsoid;\r\n  const ellipsoidOuter = Ellipsoid.fromCartesian3(radii);\r\n  const ellipsoidInner = Ellipsoid.fromCartesian3(innerRadii);\r\n\r\n  if (\r\n    vertexFormat.st ||\r\n    vertexFormat.normal ||\r\n    vertexFormat.tangent ||\r\n    vertexFormat.bitangent\r\n  ) {\r\n    for (i = 0; i < vertexCount; i++) {\r\n      ellipsoid = isInner[i] ? ellipsoidInner : ellipsoidOuter;\r\n      const position = Cartesian3.fromArray(positions, i * 3, scratchPosition);\r\n      const normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\r\n      if (negateNormal[i]) {\r\n        Cartesian3.negate(normal, normal);\r\n      }\r\n\r\n      if (vertexFormat.st) {\r\n        const normalST = Cartesian2.negate(normal, scratchNormalST);\r\n        st[stIndex++] =\r\n          Math.atan2(normalST.y, normalST.x) / CesiumMath.TWO_PI + 0.5;\r\n        st[stIndex++] = Math.asin(normal.z) / Math.PI + 0.5;\r\n      }\r\n\r\n      if (vertexFormat.normal) {\r\n        normals[normalIndex++] = normal.x;\r\n        normals[normalIndex++] = normal.y;\r\n        normals[normalIndex++] = normal.z;\r\n      }\r\n\r\n      if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n        const tangent = scratchTangent;\r\n\r\n        // Use UNIT_X for the poles\r\n        let tangetOffset = 0;\r\n        let unit;\r\n        if (isInner[i]) {\r\n          tangetOffset = vertexCountHalf;\r\n        }\r\n        if (\r\n          !isTopOpen &&\r\n          i >= tangetOffset &&\r\n          i < tangetOffset + numThetas * 2\r\n        ) {\r\n          unit = Cartesian3.UNIT_X;\r\n        } else {\r\n          unit = Cartesian3.UNIT_Z;\r\n        }\r\n        Cartesian3.cross(unit, normal, tangent);\r\n        Cartesian3.normalize(tangent, tangent);\r\n\r\n        if (vertexFormat.tangent) {\r\n          tangents[tangentIndex++] = tangent.x;\r\n          tangents[tangentIndex++] = tangent.y;\r\n          tangents[tangentIndex++] = tangent.z;\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n          const bitangent = Cartesian3.cross(normal, tangent, scratchBitangent);\r\n          Cartesian3.normalize(bitangent, bitangent);\r\n\r\n          bitangents[bitangentIndex++] = bitangent.x;\r\n          bitangents[bitangentIndex++] = bitangent.y;\r\n          bitangents[bitangentIndex++] = bitangent.z;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n      attributes.st = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 2,\r\n        values: st,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n      attributes.normal = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: normals,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n      attributes.tangent = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: tangents,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n      attributes.bitangent = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: bitangents,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (defined(ellipsoidGeometry._offsetAttribute)) {\r\n    const length = positions.length;\r\n    const offsetValue =\r\n      ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\r\n        ? 0\r\n        : 1;\r\n    const applyOffset = new Uint8Array(length / 3).fill(offsetValue);\r\n    attributes.applyOffset = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 1,\r\n      values: applyOffset,\r\n    });\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n    boundingSphere: BoundingSphere.fromEllipsoid(ellipsoidOuter),\r\n    offsetAttribute: ellipsoidGeometry._offsetAttribute,\r\n  });\r\n};\r\n\r\nlet unitEllipsoidGeometry;\r\n\r\n/**\r\n * Returns the geometric representation of a unit ellipsoid, including its vertices, indices, and a bounding sphere.\r\n * @returns {Geometry} The computed vertices and indices.\r\n *\r\n * @private\r\n */\r\nEllipsoidGeometry.getUnitEllipsoid = function () {\r\n  if (!defined(unitEllipsoidGeometry)) {\r\n    unitEllipsoidGeometry = EllipsoidGeometry.createGeometry(\r\n      new EllipsoidGeometry({\r\n        radii: new Cartesian3(1.0, 1.0, 1.0),\r\n        vertexFormat: VertexFormat.POSITION_ONLY,\r\n      })\r\n    );\r\n  }\r\n  return unitEllipsoidGeometry;\r\n};\r\nexport default EllipsoidGeometry;\r\n"],"names":["Cartesian3","defaultValue","CesiumMath","VertexFormat","DeveloperError","defined","IndexDatatype","GeometryAttributes","GeometryAttribute","ComponentDatatype","Ellipsoid","Cartesian2","GeometryOffsetAttribute","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}