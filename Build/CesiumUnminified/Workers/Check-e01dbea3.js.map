{"version":3,"file":"Check-e01dbea3.js","sources":["../../../packages/engine/Source/Core/DeveloperError.js","../../../packages/engine/Source/Core/Check.js"],"sourcesContent":["import defined from \"./defined.js\";\r\n\r\n/**\r\n * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\r\n * argument out of range, etc.  This exception should only be thrown during development;\r\n * it usually indicates a bug in the calling code.  This exception should never be\r\n * caught; instead the calling code should strive not to generate it.\r\n * <br /><br />\r\n * On the other hand, a {@link RuntimeError} indicates an exception that may\r\n * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\r\n * to catch.\r\n *\r\n * @alias DeveloperError\r\n * @constructor\r\n * @extends Error\r\n *\r\n * @param {String} [message] The error message for this exception.\r\n *\r\n * @see RuntimeError\r\n */\r\nfunction DeveloperError(message) {\r\n  /**\r\n   * 'DeveloperError' indicating that this exception was thrown due to a developer error.\r\n   * @type {String}\r\n   * @readonly\r\n   */\r\n  this.name = \"DeveloperError\";\r\n\r\n  /**\r\n   * The explanation for why this exception was thrown.\r\n   * @type {String}\r\n   * @readonly\r\n   */\r\n  this.message = message;\r\n\r\n  //Browsers such as IE don't have a stack property until you actually throw the error.\r\n  let stack;\r\n  try {\r\n    throw new Error();\r\n  } catch (e) {\r\n    stack = e.stack;\r\n  }\r\n\r\n  /**\r\n   * The stack trace of this exception, if available.\r\n   * @type {String}\r\n   * @readonly\r\n   */\r\n  this.stack = stack;\r\n}\r\n\r\nif (defined(Object.create)) {\r\n  DeveloperError.prototype = Object.create(Error.prototype);\r\n  DeveloperError.prototype.constructor = DeveloperError;\r\n}\r\n\r\nDeveloperError.prototype.toString = function () {\r\n  let str = `${this.name}: ${this.message}`;\r\n\r\n  if (defined(this.stack)) {\r\n    str += `\\n${this.stack.toString()}`;\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nDeveloperError.throwInstantiationError = function () {\r\n  throw new DeveloperError(\r\n    \"This function defines an interface and should not be called directly.\"\r\n  );\r\n};\r\nexport default DeveloperError;\r\n","import defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\n\r\n/**\r\n * Contains functions for checking that supplied arguments are of a specified type\r\n * or meet specified conditions\r\n * @private\r\n */\r\nconst Check = {};\r\n\r\n/**\r\n * Contains type checking functions, all using the typeof operator\r\n */\r\nCheck.typeOf = {};\r\n\r\nfunction getUndefinedErrorMessage(name) {\r\n  return `${name} is required, actual value was undefined`;\r\n}\r\n\r\nfunction getFailedTypeErrorMessage(actual, expected, name) {\r\n  return `Expected ${name} to be typeof ${expected}, actual typeof was ${actual}`;\r\n}\r\n\r\n/**\r\n * Throws if test is not defined\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value that is to be checked\r\n * @exception {DeveloperError} test must be defined\r\n */\r\nCheck.defined = function (name, test) {\r\n  if (!defined(test)) {\r\n    throw new DeveloperError(getUndefinedErrorMessage(name));\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'function'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'function'\r\n */\r\nCheck.typeOf.func = function (name, test) {\r\n  if (typeof test !== \"function\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"function\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'string'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'string'\r\n */\r\nCheck.typeOf.string = function (name, test) {\r\n  if (typeof test !== \"string\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"string\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'number'\r\n */\r\nCheck.typeOf.number = function (name, test) {\r\n  if (typeof test !== \"number\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"number\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and less than limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and less than limit\r\n */\r\nCheck.typeOf.number.lessThan = function (name, test, limit) {\r\n  Check.typeOf.number(name, test);\r\n  if (test >= limit) {\r\n    throw new DeveloperError(\r\n      `Expected ${name} to be less than ${limit}, actual value was ${test}`\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and less than or equal to limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\r\n */\r\nCheck.typeOf.number.lessThanOrEquals = function (name, test, limit) {\r\n  Check.typeOf.number(name, test);\r\n  if (test > limit) {\r\n    throw new DeveloperError(\r\n      `Expected ${name} to be less than or equal to ${limit}, actual value was ${test}`\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and greater than limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and greater than limit\r\n */\r\nCheck.typeOf.number.greaterThan = function (name, test, limit) {\r\n  Check.typeOf.number(name, test);\r\n  if (test <= limit) {\r\n    throw new DeveloperError(\r\n      `Expected ${name} to be greater than ${limit}, actual value was ${test}`\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and greater than or equal to limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\r\n */\r\nCheck.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\r\n  Check.typeOf.number(name, test);\r\n  if (test < limit) {\r\n    throw new DeveloperError(\r\n      `Expected ${name} to be greater than or equal to ${limit}, actual value was ${test}`\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'object'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'object'\r\n */\r\nCheck.typeOf.object = function (name, test) {\r\n  if (typeof test !== \"object\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"object\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'boolean'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'boolean'\r\n */\r\nCheck.typeOf.bool = function (name, test) {\r\n  if (typeof test !== \"boolean\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"boolean\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'bigint'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'bigint'\r\n */\r\nCheck.typeOf.bigint = function (name, test) {\r\n  if (typeof test !== \"bigint\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"bigint\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test1 and test2 is not typeof 'number' and not equal in value\r\n *\r\n * @param {String} name1 The name of the first variable being tested\r\n * @param {String} name2 The name of the second variable being tested against\r\n * @param {*} test1 The value to test\r\n * @param {*} test2 The value to test against\r\n * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\r\n */\r\nCheck.typeOf.number.equals = function (name1, name2, test1, test2) {\r\n  Check.typeOf.number(name1, test1);\r\n  Check.typeOf.number(name2, test2);\r\n  if (test1 !== test2) {\r\n    throw new DeveloperError(\r\n      `${name1} must be equal to ${name2}, the actual values are ${test1} and ${test2}`\r\n    );\r\n  }\r\n};\r\nexport default Check;\r\n"],"names":["defined"],"mappings":"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"}