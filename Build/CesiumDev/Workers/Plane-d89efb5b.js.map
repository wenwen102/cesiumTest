{"version":3,"file":"Plane-d89efb5b.js","sources":["../../../packages/engine/Source/Core/Plane.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartesian4 from \"./Cartesian4.js\";\r\nimport Check from \"./Check.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix4 from \"./Matrix4.js\";\r\n\r\n/**\r\n * A plane in Hessian Normal Form defined by\r\n * <pre>\r\n * ax + by + cz + d = 0\r\n * </pre>\r\n * where (a, b, c) is the plane's <code>normal</code>, d is the signed\r\n * <code>distance</code> to the plane, and (x, y, z) is any point on\r\n * the plane.\r\n *\r\n * @alias Plane\r\n * @constructor\r\n *\r\n * @param {Cartesian3} normal The plane's normal (normalized).\r\n * @param {Number} distance The shortest distance from the origin to the plane.  The sign of\r\n * <code>distance</code> determines which side of the plane the origin\r\n * is on.  If <code>distance</code> is positive, the origin is in the half-space\r\n * in the direction of the normal; if negative, the origin is in the half-space\r\n * opposite to the normal; if zero, the plane passes through the origin.\r\n *\r\n * @example\r\n * // The plane x=0\r\n * const plane = new Cesium.Plane(Cesium.Cartesian3.UNIT_X, 0.0);\r\n *\r\n * @exception {DeveloperError} Normal must be normalized\r\n */\r\nfunction Plane(normal, distance) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"normal\", normal);\r\n  if (\r\n    !CesiumMath.equalsEpsilon(\r\n      Cartesian3.magnitude(normal),\r\n      1.0,\r\n      CesiumMath.EPSILON6\r\n    )\r\n  ) {\r\n    throw new DeveloperError(\"normal must be normalized.\");\r\n  }\r\n  Check.typeOf.number(\"distance\", distance);\r\n  //>>includeEnd('debug');\r\n\r\n  /**\r\n   * The plane's normal.\r\n   *\r\n   * @type {Cartesian3}\r\n   */\r\n  this.normal = Cartesian3.clone(normal);\r\n\r\n  /**\r\n   * The shortest distance from the origin to the plane.  The sign of\r\n   * <code>distance</code> determines which side of the plane the origin\r\n   * is on.  If <code>distance</code> is positive, the origin is in the half-space\r\n   * in the direction of the normal; if negative, the origin is in the half-space\r\n   * opposite to the normal; if zero, the plane passes through the origin.\r\n   *\r\n   * @type {Number}\r\n   */\r\n  this.distance = distance;\r\n}\r\n\r\n/**\r\n * Creates a plane from a normal and a point on the plane.\r\n *\r\n * @param {Cartesian3} point The point on the plane.\r\n * @param {Cartesian3} normal The plane's normal (normalized).\r\n * @param {Plane} [result] The object onto which to store the result.\r\n * @returns {Plane} A new plane instance or the modified result parameter.\r\n *\r\n * @example\r\n * const point = Cesium.Cartesian3.fromDegrees(-72.0, 40.0);\r\n * const normal = ellipsoid.geodeticSurfaceNormal(point);\r\n * const tangentPlane = Cesium.Plane.fromPointNormal(point, normal);\r\n *\r\n * @exception {DeveloperError} Normal must be normalized\r\n */\r\nPlane.fromPointNormal = function (point, normal, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"point\", point);\r\n  Check.typeOf.object(\"normal\", normal);\r\n  if (\r\n    !CesiumMath.equalsEpsilon(\r\n      Cartesian3.magnitude(normal),\r\n      1.0,\r\n      CesiumMath.EPSILON6\r\n    )\r\n  ) {\r\n    throw new DeveloperError(\"normal must be normalized.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const distance = -Cartesian3.dot(normal, point);\r\n\r\n  if (!defined(result)) {\r\n    return new Plane(normal, distance);\r\n  }\r\n\r\n  Cartesian3.clone(normal, result.normal);\r\n  result.distance = distance;\r\n  return result;\r\n};\r\n\r\nconst scratchNormal = new Cartesian3();\r\n/**\r\n * Creates a plane from the general equation\r\n *\r\n * @param {Cartesian4} coefficients The plane's normal (normalized).\r\n * @param {Plane} [result] The object onto which to store the result.\r\n * @returns {Plane} A new plane instance or the modified result parameter.\r\n *\r\n * @exception {DeveloperError} Normal must be normalized\r\n */\r\nPlane.fromCartesian4 = function (coefficients, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"coefficients\", coefficients);\r\n  //>>includeEnd('debug');\r\n\r\n  const normal = Cartesian3.fromCartesian4(coefficients, scratchNormal);\r\n  const distance = coefficients.w;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (\r\n    !CesiumMath.equalsEpsilon(\r\n      Cartesian3.magnitude(normal),\r\n      1.0,\r\n      CesiumMath.EPSILON6\r\n    )\r\n  ) {\r\n    throw new DeveloperError(\"normal must be normalized.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    return new Plane(normal, distance);\r\n  }\r\n  Cartesian3.clone(normal, result.normal);\r\n  result.distance = distance;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the signed shortest distance of a point to a plane.\r\n * The sign of the distance determines which side of the plane the point\r\n * is on.  If the distance is positive, the point is in the half-space\r\n * in the direction of the normal; if negative, the point is in the half-space\r\n * opposite to the normal; if zero, the plane passes through the point.\r\n *\r\n * @param {Plane} plane The plane.\r\n * @param {Cartesian3} point The point.\r\n * @returns {Number} The signed shortest distance of the point to the plane.\r\n */\r\nPlane.getPointDistance = function (plane, point) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"plane\", plane);\r\n  Check.typeOf.object(\"point\", point);\r\n  //>>includeEnd('debug');\r\n\r\n  return Cartesian3.dot(plane.normal, point) + plane.distance;\r\n};\r\n\r\nconst scratchCartesian = new Cartesian3();\r\n/**\r\n * Projects a point onto the plane.\r\n * @param {Plane} plane The plane to project the point onto\r\n * @param {Cartesian3} point The point to project onto the plane\r\n * @param {Cartesian3} [result] The result point.  If undefined, a new Cartesian3 will be created.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n */\r\nPlane.projectPointOntoPlane = function (plane, point, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"plane\", plane);\r\n  Check.typeOf.object(\"point\", point);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  // projectedPoint = point - (normal.point + scale) * normal\r\n  const pointDistance = Plane.getPointDistance(plane, point);\r\n  const scaledNormal = Cartesian3.multiplyByScalar(\r\n    plane.normal,\r\n    pointDistance,\r\n    scratchCartesian\r\n  );\r\n\r\n  return Cartesian3.subtract(point, scaledNormal, result);\r\n};\r\n\r\nconst scratchInverseTranspose = new Matrix4();\r\nconst scratchPlaneCartesian4 = new Cartesian4();\r\nconst scratchTransformNormal = new Cartesian3();\r\n/**\r\n * Transforms the plane by the given transformation matrix.\r\n *\r\n * @param {Plane} plane The plane.\r\n * @param {Matrix4} transform The transformation matrix.\r\n * @param {Plane} [result] The object into which to store the result.\r\n * @returns {Plane} The plane transformed by the given transformation matrix.\r\n */\r\nPlane.transform = function (plane, transform, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"plane\", plane);\r\n  Check.typeOf.object(\"transform\", transform);\r\n  //>>includeEnd('debug');\r\n\r\n  const normal = plane.normal;\r\n  const distance = plane.distance;\r\n  const inverseTranspose = Matrix4.inverseTranspose(\r\n    transform,\r\n    scratchInverseTranspose\r\n  );\r\n  let planeAsCartesian4 = Cartesian4.fromElements(\r\n    normal.x,\r\n    normal.y,\r\n    normal.z,\r\n    distance,\r\n    scratchPlaneCartesian4\r\n  );\r\n  planeAsCartesian4 = Matrix4.multiplyByVector(\r\n    inverseTranspose,\r\n    planeAsCartesian4,\r\n    planeAsCartesian4\r\n  );\r\n\r\n  // Convert the transformed plane to Hessian Normal Form\r\n  const transformedNormal = Cartesian3.fromCartesian4(\r\n    planeAsCartesian4,\r\n    scratchTransformNormal\r\n  );\r\n\r\n  planeAsCartesian4 = Cartesian4.divideByScalar(\r\n    planeAsCartesian4,\r\n    Cartesian3.magnitude(transformedNormal),\r\n    planeAsCartesian4\r\n  );\r\n\r\n  return Plane.fromCartesian4(planeAsCartesian4, result);\r\n};\r\n\r\n/**\r\n * Duplicates a Plane instance.\r\n *\r\n * @param {Plane} plane The plane to duplicate.\r\n * @param {Plane} [result] The object onto which to store the result.\r\n * @returns {Plane} The modified result parameter or a new Plane instance if one was not provided.\r\n */\r\nPlane.clone = function (plane, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"plane\", plane);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    return new Plane(plane.normal, plane.distance);\r\n  }\r\n\r\n  Cartesian3.clone(plane.normal, result.normal);\r\n  result.distance = plane.distance;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Compares the provided Planes by normal and distance and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {Plane} left The first plane.\r\n * @param {Plane} right The second plane.\r\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n */\r\nPlane.equals = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  return (\r\n    left.distance === right.distance &&\r\n    Cartesian3.equals(left.normal, right.normal)\r\n  );\r\n};\r\n\r\n/**\r\n * A constant initialized to the XY plane passing through the origin, with normal in positive Z.\r\n *\r\n * @type {Plane}\r\n * @constant\r\n */\r\nPlane.ORIGIN_XY_PLANE = Object.freeze(new Plane(Cartesian3.UNIT_Z, 0.0));\r\n\r\n/**\r\n * A constant initialized to the YZ plane passing through the origin, with normal in positive X.\r\n *\r\n * @type {Plane}\r\n * @constant\r\n */\r\nPlane.ORIGIN_YZ_PLANE = Object.freeze(new Plane(Cartesian3.UNIT_X, 0.0));\r\n\r\n/**\r\n * A constant initialized to the ZX plane passing through the origin, with normal in positive Y.\r\n *\r\n * @type {Plane}\r\n * @constant\r\n */\r\nPlane.ORIGIN_ZX_PLANE = Object.freeze(new Plane(Cartesian3.UNIT_Y, 0.0));\r\nexport default Plane;\r\n"],"names":["Check","CesiumMath","Cartesian3","DeveloperError","defined","Matrix4","Cartesian4"],"mappings":"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"}