{"version":3,"file":"TerrainEncoding-4466ed1a.js","sources":["../../../packages/engine/Source/Core/EllipsoidalOccluder.js","../../../packages/engine/Source/Core/TerrainExaggeration.js","../../../packages/engine/Source/Core/TerrainQuantization.js","../../../packages/engine/Source/Core/TerrainEncoding.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Rectangle from \"./Rectangle.js\";\r\n\r\n/**\r\n * Determine whether or not other objects are visible or hidden behind the visible horizon defined by\r\n * an {@link Ellipsoid} and a camera position.  The ellipsoid is assumed to be located at the\r\n * origin of the coordinate system.  This class uses the algorithm described in the\r\n * {@link https://cesium.com/blog/2013/04/25/Horizon-culling/|Horizon Culling} blog post.\r\n *\r\n * @alias EllipsoidalOccluder\r\n *\r\n * @param {Ellipsoid} ellipsoid The ellipsoid to use as an occluder.\r\n * @param {Cartesian3} [cameraPosition] The coordinate of the viewer/camera.  If this parameter is not\r\n *        specified, {@link EllipsoidalOccluder#cameraPosition} must be called before\r\n *        testing visibility.\r\n *\r\n * @constructor\r\n *\r\n * @example\r\n * // Construct an ellipsoidal occluder with radii 1.0, 1.1, and 0.9.\r\n * const cameraPosition = new Cesium.Cartesian3(5.0, 6.0, 7.0);\r\n * const occluderEllipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\r\n * const occluder = new Cesium.EllipsoidalOccluder(occluderEllipsoid, cameraPosition);\r\n *\r\n * @private\r\n */\r\nfunction EllipsoidalOccluder(ellipsoid, cameraPosition) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"ellipsoid\", ellipsoid);\r\n  //>>includeEnd('debug');\r\n\r\n  this._ellipsoid = ellipsoid;\r\n  this._cameraPosition = new Cartesian3();\r\n  this._cameraPositionInScaledSpace = new Cartesian3();\r\n  this._distanceToLimbInScaledSpaceSquared = 0.0;\r\n\r\n  // cameraPosition fills in the above values\r\n  if (defined(cameraPosition)) {\r\n    this.cameraPosition = cameraPosition;\r\n  }\r\n}\r\n\r\nObject.defineProperties(EllipsoidalOccluder.prototype, {\r\n  /**\r\n   * Gets the occluding ellipsoid.\r\n   * @memberof EllipsoidalOccluder.prototype\r\n   * @type {Ellipsoid}\r\n   */\r\n  ellipsoid: {\r\n    get: function () {\r\n      return this._ellipsoid;\r\n    },\r\n  },\r\n  /**\r\n   * Gets or sets the position of the camera.\r\n   * @memberof EllipsoidalOccluder.prototype\r\n   * @type {Cartesian3}\r\n   */\r\n  cameraPosition: {\r\n    get: function () {\r\n      return this._cameraPosition;\r\n    },\r\n    set: function (cameraPosition) {\r\n      // See https://cesium.com/blog/2013/04/25/Horizon-culling/\r\n      const ellipsoid = this._ellipsoid;\r\n      const cv = ellipsoid.transformPositionToScaledSpace(\r\n        cameraPosition,\r\n        this._cameraPositionInScaledSpace\r\n      );\r\n      const vhMagnitudeSquared = Cartesian3.magnitudeSquared(cv) - 1.0;\r\n\r\n      Cartesian3.clone(cameraPosition, this._cameraPosition);\r\n      this._cameraPositionInScaledSpace = cv;\r\n      this._distanceToLimbInScaledSpaceSquared = vhMagnitudeSquared;\r\n    },\r\n  },\r\n});\r\n\r\nconst scratchCartesian = new Cartesian3();\r\n\r\n/**\r\n * Determines whether or not a point, the <code>occludee</code>, is hidden from view by the occluder.\r\n *\r\n * @param {Cartesian3} occludee The point to test for visibility.\r\n * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\r\n *\r\n * @example\r\n * const cameraPosition = new Cesium.Cartesian3(0, 0, 2.5);\r\n * const ellipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\r\n * const occluder = new Cesium.EllipsoidalOccluder(ellipsoid, cameraPosition);\r\n * const point = new Cesium.Cartesian3(0, -3, -3);\r\n * occluder.isPointVisible(point); //returns true\r\n */\r\nEllipsoidalOccluder.prototype.isPointVisible = function (occludee) {\r\n  const ellipsoid = this._ellipsoid;\r\n  const occludeeScaledSpacePosition = ellipsoid.transformPositionToScaledSpace(\r\n    occludee,\r\n    scratchCartesian\r\n  );\r\n  return isScaledSpacePointVisible(\r\n    occludeeScaledSpacePosition,\r\n    this._cameraPositionInScaledSpace,\r\n    this._distanceToLimbInScaledSpaceSquared\r\n  );\r\n};\r\n\r\n/**\r\n * Determines whether or not a point expressed in the ellipsoid scaled space, is hidden from view by the\r\n * occluder.  To transform a Cartesian X, Y, Z position in the coordinate system aligned with the ellipsoid\r\n * into the scaled space, call {@link Ellipsoid#transformPositionToScaledSpace}.\r\n *\r\n * @param {Cartesian3} occludeeScaledSpacePosition The point to test for visibility, represented in the scaled space.\r\n * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\r\n *\r\n * @example\r\n * const cameraPosition = new Cesium.Cartesian3(0, 0, 2.5);\r\n * const ellipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\r\n * const occluder = new Cesium.EllipsoidalOccluder(ellipsoid, cameraPosition);\r\n * const point = new Cesium.Cartesian3(0, -3, -3);\r\n * const scaledSpacePoint = ellipsoid.transformPositionToScaledSpace(point);\r\n * occluder.isScaledSpacePointVisible(scaledSpacePoint); //returns true\r\n */\r\nEllipsoidalOccluder.prototype.isScaledSpacePointVisible = function (\r\n  occludeeScaledSpacePosition\r\n) {\r\n  return isScaledSpacePointVisible(\r\n    occludeeScaledSpacePosition,\r\n    this._cameraPositionInScaledSpace,\r\n    this._distanceToLimbInScaledSpaceSquared\r\n  );\r\n};\r\n\r\nconst scratchCameraPositionInScaledSpaceShrunk = new Cartesian3();\r\n\r\n/**\r\n * Similar to {@link EllipsoidalOccluder#isScaledSpacePointVisible} except tests against an\r\n * ellipsoid that has been shrunk by the minimum height when the minimum height is below\r\n * the ellipsoid. This is intended to be used with points generated by\r\n * {@link EllipsoidalOccluder#computeHorizonCullingPointPossiblyUnderEllipsoid} or\r\n * {@link EllipsoidalOccluder#computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid}.\r\n *\r\n * @param {Cartesian3} occludeeScaledSpacePosition The point to test for visibility, represented in the scaled space of the possibly-shrunk ellipsoid.\r\n * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\r\n */\r\nEllipsoidalOccluder.prototype.isScaledSpacePointVisiblePossiblyUnderEllipsoid = function (\r\n  occludeeScaledSpacePosition,\r\n  minimumHeight\r\n) {\r\n  const ellipsoid = this._ellipsoid;\r\n  let vhMagnitudeSquared;\r\n  let cv;\r\n\r\n  if (\r\n    defined(minimumHeight) &&\r\n    minimumHeight < 0.0 &&\r\n    ellipsoid.minimumRadius > -minimumHeight\r\n  ) {\r\n    // This code is similar to the cameraPosition setter, but unrolled for performance because it will be called a lot.\r\n    cv = scratchCameraPositionInScaledSpaceShrunk;\r\n    cv.x = this._cameraPosition.x / (ellipsoid.radii.x + minimumHeight);\r\n    cv.y = this._cameraPosition.y / (ellipsoid.radii.y + minimumHeight);\r\n    cv.z = this._cameraPosition.z / (ellipsoid.radii.z + minimumHeight);\r\n    vhMagnitudeSquared = cv.x * cv.x + cv.y * cv.y + cv.z * cv.z - 1.0;\r\n  } else {\r\n    cv = this._cameraPositionInScaledSpace;\r\n    vhMagnitudeSquared = this._distanceToLimbInScaledSpaceSquared;\r\n  }\r\n\r\n  return isScaledSpacePointVisible(\r\n    occludeeScaledSpacePosition,\r\n    cv,\r\n    vhMagnitudeSquared\r\n  );\r\n};\r\n\r\n/**\r\n * Computes a point that can be used for horizon culling from a list of positions.  If the point is below\r\n * the horizon, all of the positions are guaranteed to be below the horizon as well.  The returned point\r\n * is expressed in the ellipsoid-scaled space and is suitable for use with\r\n * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\r\n *\r\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\r\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\r\n *                     the center of the bounding sphere computed from the positions.  The direction need not\r\n *                     be normalized.\r\n * @param {Cartesian3[]} positions The positions from which to compute the horizon culling point.  The positions\r\n *                       must be expressed in a reference frame centered at the ellipsoid and aligned with the\r\n *                       ellipsoid's axes.\r\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\r\n */\r\nEllipsoidalOccluder.prototype.computeHorizonCullingPoint = function (\r\n  directionToPoint,\r\n  positions,\r\n  result\r\n) {\r\n  return computeHorizonCullingPointFromPositions(\r\n    this._ellipsoid,\r\n    directionToPoint,\r\n    positions,\r\n    result\r\n  );\r\n};\r\n\r\nconst scratchEllipsoidShrunk = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n\r\n/**\r\n * Similar to {@link EllipsoidalOccluder#computeHorizonCullingPoint} except computes the culling\r\n * point relative to an ellipsoid that has been shrunk by the minimum height when the minimum height is below\r\n * the ellipsoid. The returned point is expressed in the possibly-shrunk ellipsoid-scaled space and is suitable\r\n * for use with {@link EllipsoidalOccluder#isScaledSpacePointVisiblePossiblyUnderEllipsoid}.\r\n *\r\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\r\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\r\n *                     the center of the bounding sphere computed from the positions.  The direction need not\r\n *                     be normalized.\r\n * @param {Cartesian3[]} positions The positions from which to compute the horizon culling point.  The positions\r\n *                       must be expressed in a reference frame centered at the ellipsoid and aligned with the\r\n *                       ellipsoid's axes.\r\n * @param {Number} [minimumHeight] The minimum height of all positions. If this value is undefined, all positions are assumed to be above the ellipsoid.\r\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n * @returns {Cartesian3} The computed horizon culling point, expressed in the possibly-shrunk ellipsoid-scaled space.\r\n */\r\nEllipsoidalOccluder.prototype.computeHorizonCullingPointPossiblyUnderEllipsoid = function (\r\n  directionToPoint,\r\n  positions,\r\n  minimumHeight,\r\n  result\r\n) {\r\n  const possiblyShrunkEllipsoid = getPossiblyShrunkEllipsoid(\r\n    this._ellipsoid,\r\n    minimumHeight,\r\n    scratchEllipsoidShrunk\r\n  );\r\n  return computeHorizonCullingPointFromPositions(\r\n    possiblyShrunkEllipsoid,\r\n    directionToPoint,\r\n    positions,\r\n    result\r\n  );\r\n};\r\n/**\r\n * Computes a point that can be used for horizon culling from a list of positions.  If the point is below\r\n * the horizon, all of the positions are guaranteed to be below the horizon as well.  The returned point\r\n * is expressed in the ellipsoid-scaled space and is suitable for use with\r\n * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\r\n *\r\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\r\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\r\n *                     the center of the bounding sphere computed from the positions.  The direction need not\r\n *                     be normalized.\r\n * @param {Number[]} vertices  The vertices from which to compute the horizon culling point.  The positions\r\n *                   must be expressed in a reference frame centered at the ellipsoid and aligned with the\r\n *                   ellipsoid's axes.\r\n * @param {Number} [stride=3]\r\n * @param {Cartesian3} [center=Cartesian3.ZERO]\r\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\r\n */\r\nEllipsoidalOccluder.prototype.computeHorizonCullingPointFromVertices = function (\r\n  directionToPoint,\r\n  vertices,\r\n  stride,\r\n  center,\r\n  result\r\n) {\r\n  return computeHorizonCullingPointFromVertices(\r\n    this._ellipsoid,\r\n    directionToPoint,\r\n    vertices,\r\n    stride,\r\n    center,\r\n    result\r\n  );\r\n};\r\n\r\n/**\r\n * Similar to {@link EllipsoidalOccluder#computeHorizonCullingPointFromVertices} except computes the culling\r\n * point relative to an ellipsoid that has been shrunk by the minimum height when the minimum height is below\r\n * the ellipsoid. The returned point is expressed in the possibly-shrunk ellipsoid-scaled space and is suitable\r\n * for use with {@link EllipsoidalOccluder#isScaledSpacePointVisiblePossiblyUnderEllipsoid}.\r\n *\r\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\r\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\r\n *                     the center of the bounding sphere computed from the positions.  The direction need not\r\n *                     be normalized.\r\n * @param {Number[]} vertices  The vertices from which to compute the horizon culling point.  The positions\r\n *                   must be expressed in a reference frame centered at the ellipsoid and aligned with the\r\n *                   ellipsoid's axes.\r\n * @param {Number} [stride=3]\r\n * @param {Cartesian3} [center=Cartesian3.ZERO]\r\n * @param {Number} [minimumHeight] The minimum height of all vertices. If this value is undefined, all vertices are assumed to be above the ellipsoid.\r\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n * @returns {Cartesian3} The computed horizon culling point, expressed in the possibly-shrunk ellipsoid-scaled space.\r\n */\r\nEllipsoidalOccluder.prototype.computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid = function (\r\n  directionToPoint,\r\n  vertices,\r\n  stride,\r\n  center,\r\n  minimumHeight,\r\n  result\r\n) {\r\n  const possiblyShrunkEllipsoid = getPossiblyShrunkEllipsoid(\r\n    this._ellipsoid,\r\n    minimumHeight,\r\n    scratchEllipsoidShrunk\r\n  );\r\n  return computeHorizonCullingPointFromVertices(\r\n    possiblyShrunkEllipsoid,\r\n    directionToPoint,\r\n    vertices,\r\n    stride,\r\n    center,\r\n    result\r\n  );\r\n};\r\n\r\nconst subsampleScratch = [];\r\n\r\n/**\r\n * Computes a point that can be used for horizon culling of a rectangle.  If the point is below\r\n * the horizon, the ellipsoid-conforming rectangle is guaranteed to be below the horizon as well.\r\n * The returned point is expressed in the ellipsoid-scaled space and is suitable for use with\r\n * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\r\n *\r\n * @param {Rectangle} rectangle The rectangle for which to compute the horizon culling point.\r\n * @param {Ellipsoid} ellipsoid The ellipsoid on which the rectangle is defined.  This may be different from\r\n *                    the ellipsoid used by this instance for occlusion testing.\r\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\r\n */\r\nEllipsoidalOccluder.prototype.computeHorizonCullingPointFromRectangle = function (\r\n  rectangle,\r\n  ellipsoid,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  //>>includeEnd('debug');\r\n\r\n  const positions = Rectangle.subsample(\r\n    rectangle,\r\n    ellipsoid,\r\n    0.0,\r\n    subsampleScratch\r\n  );\r\n  const bs = BoundingSphere.fromPoints(positions);\r\n\r\n  // If the bounding sphere center is too close to the center of the occluder, it doesn't make\r\n  // sense to try to horizon cull it.\r\n  if (Cartesian3.magnitude(bs.center) < 0.1 * ellipsoid.minimumRadius) {\r\n    return undefined;\r\n  }\r\n\r\n  return this.computeHorizonCullingPoint(bs.center, positions, result);\r\n};\r\n\r\nconst scratchEllipsoidShrunkRadii = new Cartesian3();\r\n\r\nfunction getPossiblyShrunkEllipsoid(ellipsoid, minimumHeight, result) {\r\n  if (\r\n    defined(minimumHeight) &&\r\n    minimumHeight < 0.0 &&\r\n    ellipsoid.minimumRadius > -minimumHeight\r\n  ) {\r\n    const ellipsoidShrunkRadii = Cartesian3.fromElements(\r\n      ellipsoid.radii.x + minimumHeight,\r\n      ellipsoid.radii.y + minimumHeight,\r\n      ellipsoid.radii.z + minimumHeight,\r\n      scratchEllipsoidShrunkRadii\r\n    );\r\n    ellipsoid = Ellipsoid.fromCartesian3(ellipsoidShrunkRadii, result);\r\n  }\r\n  return ellipsoid;\r\n}\r\n\r\nfunction computeHorizonCullingPointFromPositions(\r\n  ellipsoid,\r\n  directionToPoint,\r\n  positions,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"directionToPoint\", directionToPoint);\r\n  Check.defined(\"positions\", positions);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  const scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(\r\n    ellipsoid,\r\n    directionToPoint\r\n  );\r\n  let resultMagnitude = 0.0;\r\n\r\n  for (let i = 0, len = positions.length; i < len; ++i) {\r\n    const position = positions[i];\r\n    const candidateMagnitude = computeMagnitude(\r\n      ellipsoid,\r\n      position,\r\n      scaledSpaceDirectionToPoint\r\n    );\r\n    if (candidateMagnitude < 0.0) {\r\n      // all points should face the same direction, but this one doesn't, so return undefined\r\n      return undefined;\r\n    }\r\n    resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);\r\n  }\r\n\r\n  return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);\r\n}\r\n\r\nconst positionScratch = new Cartesian3();\r\n\r\nfunction computeHorizonCullingPointFromVertices(\r\n  ellipsoid,\r\n  directionToPoint,\r\n  vertices,\r\n  stride,\r\n  center,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"directionToPoint\", directionToPoint);\r\n  Check.defined(\"vertices\", vertices);\r\n  Check.typeOf.number(\"stride\", stride);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  stride = defaultValue(stride, 3);\r\n  center = defaultValue(center, Cartesian3.ZERO);\r\n  const scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(\r\n    ellipsoid,\r\n    directionToPoint\r\n  );\r\n  let resultMagnitude = 0.0;\r\n\r\n  for (let i = 0, len = vertices.length; i < len; i += stride) {\r\n    positionScratch.x = vertices[i] + center.x;\r\n    positionScratch.y = vertices[i + 1] + center.y;\r\n    positionScratch.z = vertices[i + 2] + center.z;\r\n\r\n    const candidateMagnitude = computeMagnitude(\r\n      ellipsoid,\r\n      positionScratch,\r\n      scaledSpaceDirectionToPoint\r\n    );\r\n    if (candidateMagnitude < 0.0) {\r\n      // all points should face the same direction, but this one doesn't, so return undefined\r\n      return undefined;\r\n    }\r\n    resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);\r\n  }\r\n\r\n  return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);\r\n}\r\n\r\nfunction isScaledSpacePointVisible(\r\n  occludeeScaledSpacePosition,\r\n  cameraPositionInScaledSpace,\r\n  distanceToLimbInScaledSpaceSquared\r\n) {\r\n  // See https://cesium.com/blog/2013/04/25/Horizon-culling/\r\n  const cv = cameraPositionInScaledSpace;\r\n  const vhMagnitudeSquared = distanceToLimbInScaledSpaceSquared;\r\n  const vt = Cartesian3.subtract(\r\n    occludeeScaledSpacePosition,\r\n    cv,\r\n    scratchCartesian\r\n  );\r\n  const vtDotVc = -Cartesian3.dot(vt, cv);\r\n  // If vhMagnitudeSquared < 0 then we are below the surface of the ellipsoid and\r\n  // in this case, set the culling plane to be on V.\r\n  const isOccluded =\r\n    vhMagnitudeSquared < 0\r\n      ? vtDotVc > 0\r\n      : vtDotVc > vhMagnitudeSquared &&\r\n        (vtDotVc * vtDotVc) / Cartesian3.magnitudeSquared(vt) >\r\n          vhMagnitudeSquared;\r\n  return !isOccluded;\r\n}\r\n\r\nconst scaledSpaceScratch = new Cartesian3();\r\nconst directionScratch = new Cartesian3();\r\n\r\nfunction computeMagnitude(ellipsoid, position, scaledSpaceDirectionToPoint) {\r\n  const scaledSpacePosition = ellipsoid.transformPositionToScaledSpace(\r\n    position,\r\n    scaledSpaceScratch\r\n  );\r\n  let magnitudeSquared = Cartesian3.magnitudeSquared(scaledSpacePosition);\r\n  let magnitude = Math.sqrt(magnitudeSquared);\r\n  const direction = Cartesian3.divideByScalar(\r\n    scaledSpacePosition,\r\n    magnitude,\r\n    directionScratch\r\n  );\r\n\r\n  // For the purpose of this computation, points below the ellipsoid are consider to be on it instead.\r\n  magnitudeSquared = Math.max(1.0, magnitudeSquared);\r\n  magnitude = Math.max(1.0, magnitude);\r\n\r\n  const cosAlpha = Cartesian3.dot(direction, scaledSpaceDirectionToPoint);\r\n  const sinAlpha = Cartesian3.magnitude(\r\n    Cartesian3.cross(direction, scaledSpaceDirectionToPoint, direction)\r\n  );\r\n  const cosBeta = 1.0 / magnitude;\r\n  const sinBeta = Math.sqrt(magnitudeSquared - 1.0) * cosBeta;\r\n\r\n  return 1.0 / (cosAlpha * cosBeta - sinAlpha * sinBeta);\r\n}\r\n\r\nfunction magnitudeToPoint(\r\n  scaledSpaceDirectionToPoint,\r\n  resultMagnitude,\r\n  result\r\n) {\r\n  // The horizon culling point is undefined if there were no positions from which to compute it,\r\n  // the directionToPoint is pointing opposite all of the positions,  or if we computed NaN or infinity.\r\n  if (\r\n    resultMagnitude <= 0.0 ||\r\n    resultMagnitude === 1.0 / 0.0 ||\r\n    resultMagnitude !== resultMagnitude\r\n  ) {\r\n    return undefined;\r\n  }\r\n\r\n  return Cartesian3.multiplyByScalar(\r\n    scaledSpaceDirectionToPoint,\r\n    resultMagnitude,\r\n    result\r\n  );\r\n}\r\n\r\nconst directionToPointScratch = new Cartesian3();\r\n\r\nfunction computeScaledSpaceDirectionToPoint(ellipsoid, directionToPoint) {\r\n  if (Cartesian3.equals(directionToPoint, Cartesian3.ZERO)) {\r\n    return directionToPoint;\r\n  }\r\n\r\n  ellipsoid.transformPositionToScaledSpace(\r\n    directionToPoint,\r\n    directionToPointScratch\r\n  );\r\n  return Cartesian3.normalize(directionToPointScratch, directionToPointScratch);\r\n}\r\nexport default EllipsoidalOccluder;\r\n","import Cartesian3 from \"./Cartesian3.js\";\r\n\r\n/**\r\n * @private\r\n */\r\nconst TerrainExaggeration = {};\r\n\r\n/**\r\n * Scales a height relative to an offset.\r\n *\r\n * @param {Number} height The height.\r\n * @param {Number} scale A scalar used to exaggerate the terrain. If the value is 1.0 there will be no effect.\r\n * @param {Number} relativeHeight The height relative to which terrain is exaggerated. If the value is 0.0 terrain will be exaggerated relative to the ellipsoid surface.\r\n */\r\nTerrainExaggeration.getHeight = function (height, scale, relativeHeight) {\r\n  return (height - relativeHeight) * scale + relativeHeight;\r\n};\r\n\r\nconst scratchCartographic = new Cartesian3();\r\n\r\n/**\r\n * Scales a position by exaggeration.\r\n */\r\nTerrainExaggeration.getPosition = function (\r\n  position,\r\n  ellipsoid,\r\n  terrainExaggeration,\r\n  terrainExaggerationRelativeHeight,\r\n  result\r\n) {\r\n  const cartographic = ellipsoid.cartesianToCartographic(\r\n    position,\r\n    scratchCartographic\r\n  );\r\n  const newHeight = TerrainExaggeration.getHeight(\r\n    cartographic.height,\r\n    terrainExaggeration,\r\n    terrainExaggerationRelativeHeight\r\n  );\r\n  return Cartesian3.fromRadians(\r\n    cartographic.longitude,\r\n    cartographic.latitude,\r\n    newHeight,\r\n    ellipsoid,\r\n    result\r\n  );\r\n};\r\n\r\nexport default TerrainExaggeration;\r\n","/**\r\n * This enumerated type is used to determine how the vertices of the terrain mesh are compressed.\r\n *\r\n * @enum {Number}\r\n *\r\n * @private\r\n */\r\nconst TerrainQuantization = {\r\n  /**\r\n   * The vertices are not compressed.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  NONE: 0,\r\n\r\n  /**\r\n   * The vertices are compressed to 12 bits.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  BITS12: 1,\r\n};\r\nexport default Object.freeze(TerrainQuantization);\r\n","import AttributeCompression from \"./AttributeCompression.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix4 from \"./Matrix4.js\";\r\nimport TerrainExaggeration from \"./TerrainExaggeration.js\";\r\nimport TerrainQuantization from \"./TerrainQuantization.js\";\r\n\r\nconst cartesian3Scratch = new Cartesian3();\r\nconst cartesian3DimScratch = new Cartesian3();\r\nconst cartesian2Scratch = new Cartesian2();\r\nconst matrix4Scratch = new Matrix4();\r\nconst matrix4Scratch2 = new Matrix4();\r\n\r\nconst SHIFT_LEFT_12 = Math.pow(2.0, 12.0);\r\n\r\n/**\r\n * Data used to quantize and pack the terrain mesh. The position can be unpacked for picking and all attributes\r\n * are unpacked in the vertex shader.\r\n *\r\n * @alias TerrainEncoding\r\n * @constructor\r\n *\r\n * @param {Cartesian3} center The center point of the vertices.\r\n * @param {AxisAlignedBoundingBox} axisAlignedBoundingBox The bounds of the tile in the east-north-up coordinates at the tiles center.\r\n * @param {Number} minimumHeight The minimum height.\r\n * @param {Number} maximumHeight The maximum height.\r\n * @param {Matrix4} fromENU The east-north-up to fixed frame matrix at the center of the terrain mesh.\r\n * @param {Boolean} hasVertexNormals If the mesh has vertex normals.\r\n * @param {Boolean} [hasWebMercatorT=false] true if the terrain data includes a Web Mercator texture coordinate; otherwise, false.\r\n * @param {Boolean} [hasGeodeticSurfaceNormals=false] true if the terrain data includes geodetic surface normals; otherwise, false.\r\n * @param {Number} [exaggeration=1.0] A scalar used to exaggerate terrain.\r\n * @param {Number} [exaggerationRelativeHeight=0.0] The relative height from which terrain is exaggerated.\r\n *\r\n * @private\r\n */\r\nfunction TerrainEncoding(\r\n  center,\r\n  axisAlignedBoundingBox,\r\n  minimumHeight,\r\n  maximumHeight,\r\n  fromENU,\r\n  hasVertexNormals,\r\n  hasWebMercatorT,\r\n  hasGeodeticSurfaceNormals,\r\n  exaggeration,\r\n  exaggerationRelativeHeight\r\n) {\r\n  let quantization = TerrainQuantization.NONE;\r\n  let toENU;\r\n  let matrix;\r\n\r\n  if (\r\n    defined(axisAlignedBoundingBox) &&\r\n    defined(minimumHeight) &&\r\n    defined(maximumHeight) &&\r\n    defined(fromENU)\r\n  ) {\r\n    const minimum = axisAlignedBoundingBox.minimum;\r\n    const maximum = axisAlignedBoundingBox.maximum;\r\n\r\n    const dimensions = Cartesian3.subtract(\r\n      maximum,\r\n      minimum,\r\n      cartesian3DimScratch\r\n    );\r\n    const hDim = maximumHeight - minimumHeight;\r\n    const maxDim = Math.max(Cartesian3.maximumComponent(dimensions), hDim);\r\n\r\n    if (maxDim < SHIFT_LEFT_12 - 1.0) {\r\n      quantization = TerrainQuantization.BITS12;\r\n    } else {\r\n      quantization = TerrainQuantization.NONE;\r\n    }\r\n\r\n    toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\r\n\r\n    const translation = Cartesian3.negate(minimum, cartesian3Scratch);\r\n    Matrix4.multiply(\r\n      Matrix4.fromTranslation(translation, matrix4Scratch),\r\n      toENU,\r\n      toENU\r\n    );\r\n\r\n    const scale = cartesian3Scratch;\r\n    scale.x = 1.0 / dimensions.x;\r\n    scale.y = 1.0 / dimensions.y;\r\n    scale.z = 1.0 / dimensions.z;\r\n    Matrix4.multiply(Matrix4.fromScale(scale, matrix4Scratch), toENU, toENU);\r\n\r\n    matrix = Matrix4.clone(fromENU);\r\n    Matrix4.setTranslation(matrix, Cartesian3.ZERO, matrix);\r\n\r\n    fromENU = Matrix4.clone(fromENU, new Matrix4());\r\n\r\n    const translationMatrix = Matrix4.fromTranslation(minimum, matrix4Scratch);\r\n    const scaleMatrix = Matrix4.fromScale(dimensions, matrix4Scratch2);\r\n    const st = Matrix4.multiply(translationMatrix, scaleMatrix, matrix4Scratch);\r\n\r\n    Matrix4.multiply(fromENU, st, fromENU);\r\n    Matrix4.multiply(matrix, st, matrix);\r\n  }\r\n\r\n  /**\r\n   * How the vertices of the mesh were compressed.\r\n   * @type {TerrainQuantization}\r\n   */\r\n  this.quantization = quantization;\r\n\r\n  /**\r\n   * The minimum height of the tile including the skirts.\r\n   * @type {Number}\r\n   */\r\n  this.minimumHeight = minimumHeight;\r\n\r\n  /**\r\n   * The maximum height of the tile.\r\n   * @type {Number}\r\n   */\r\n  this.maximumHeight = maximumHeight;\r\n\r\n  /**\r\n   * The center of the tile.\r\n   * @type {Cartesian3}\r\n   */\r\n  this.center = Cartesian3.clone(center);\r\n\r\n  /**\r\n   * A matrix that takes a vertex from the tile, transforms it to east-north-up at the center and scales\r\n   * it so each component is in the [0, 1] range.\r\n   * @type {Matrix4}\r\n   */\r\n  this.toScaledENU = toENU;\r\n\r\n  /**\r\n   * A matrix that restores a vertex transformed with toScaledENU back to the earth fixed reference frame\r\n   * @type {Matrix4}\r\n   */\r\n  this.fromScaledENU = fromENU;\r\n\r\n  /**\r\n   * The matrix used to decompress the terrain vertices in the shader for RTE rendering.\r\n   * @type {Matrix4}\r\n   */\r\n  this.matrix = matrix;\r\n\r\n  /**\r\n   * The terrain mesh contains normals.\r\n   * @type {Boolean}\r\n   */\r\n  this.hasVertexNormals = hasVertexNormals;\r\n\r\n  /**\r\n   * The terrain mesh contains a vertical texture coordinate following the Web Mercator projection.\r\n   * @type {Boolean}\r\n   */\r\n  this.hasWebMercatorT = defaultValue(hasWebMercatorT, false);\r\n\r\n  /**\r\n   * The terrain mesh contains geodetic surface normals, used for terrain exaggeration.\r\n   * @type {Boolean}\r\n   */\r\n  this.hasGeodeticSurfaceNormals = defaultValue(\r\n    hasGeodeticSurfaceNormals,\r\n    false\r\n  );\r\n\r\n  /**\r\n   * A scalar used to exaggerate terrain.\r\n   * @type {Number}\r\n   */\r\n  this.exaggeration = defaultValue(exaggeration, 1.0);\r\n\r\n  /**\r\n   * The relative height from which terrain is exaggerated.\r\n   */\r\n  this.exaggerationRelativeHeight = defaultValue(\r\n    exaggerationRelativeHeight,\r\n    0.0\r\n  );\r\n\r\n  /**\r\n   * The number of components in each vertex. This value can differ with different quantizations.\r\n   * @type {Number}\r\n   */\r\n  this.stride = 0;\r\n\r\n  this._offsetGeodeticSurfaceNormal = 0;\r\n  this._offsetVertexNormal = 0;\r\n\r\n  // Calculate the stride and offsets declared above\r\n  this._calculateStrideAndOffsets();\r\n}\r\n\r\nTerrainEncoding.prototype.encode = function (\r\n  vertexBuffer,\r\n  bufferIndex,\r\n  position,\r\n  uv,\r\n  height,\r\n  normalToPack,\r\n  webMercatorT,\r\n  geodeticSurfaceNormal\r\n) {\r\n  const u = uv.x;\r\n  const v = uv.y;\r\n\r\n  if (this.quantization === TerrainQuantization.BITS12) {\r\n    position = Matrix4.multiplyByPoint(\r\n      this.toScaledENU,\r\n      position,\r\n      cartesian3Scratch\r\n    );\r\n\r\n    position.x = CesiumMath.clamp(position.x, 0.0, 1.0);\r\n    position.y = CesiumMath.clamp(position.y, 0.0, 1.0);\r\n    position.z = CesiumMath.clamp(position.z, 0.0, 1.0);\r\n\r\n    const hDim = this.maximumHeight - this.minimumHeight;\r\n    const h = CesiumMath.clamp((height - this.minimumHeight) / hDim, 0.0, 1.0);\r\n\r\n    Cartesian2.fromElements(position.x, position.y, cartesian2Scratch);\r\n    const compressed0 = AttributeCompression.compressTextureCoordinates(\r\n      cartesian2Scratch\r\n    );\r\n\r\n    Cartesian2.fromElements(position.z, h, cartesian2Scratch);\r\n    const compressed1 = AttributeCompression.compressTextureCoordinates(\r\n      cartesian2Scratch\r\n    );\r\n\r\n    Cartesian2.fromElements(u, v, cartesian2Scratch);\r\n    const compressed2 = AttributeCompression.compressTextureCoordinates(\r\n      cartesian2Scratch\r\n    );\r\n\r\n    vertexBuffer[bufferIndex++] = compressed0;\r\n    vertexBuffer[bufferIndex++] = compressed1;\r\n    vertexBuffer[bufferIndex++] = compressed2;\r\n\r\n    if (this.hasWebMercatorT) {\r\n      Cartesian2.fromElements(webMercatorT, 0.0, cartesian2Scratch);\r\n      const compressed3 = AttributeCompression.compressTextureCoordinates(\r\n        cartesian2Scratch\r\n      );\r\n      vertexBuffer[bufferIndex++] = compressed3;\r\n    }\r\n  } else {\r\n    Cartesian3.subtract(position, this.center, cartesian3Scratch);\r\n\r\n    vertexBuffer[bufferIndex++] = cartesian3Scratch.x;\r\n    vertexBuffer[bufferIndex++] = cartesian3Scratch.y;\r\n    vertexBuffer[bufferIndex++] = cartesian3Scratch.z;\r\n    vertexBuffer[bufferIndex++] = height;\r\n    vertexBuffer[bufferIndex++] = u;\r\n    vertexBuffer[bufferIndex++] = v;\r\n\r\n    if (this.hasWebMercatorT) {\r\n      vertexBuffer[bufferIndex++] = webMercatorT;\r\n    }\r\n  }\r\n\r\n  if (this.hasVertexNormals) {\r\n    vertexBuffer[bufferIndex++] = AttributeCompression.octPackFloat(\r\n      normalToPack\r\n    );\r\n  }\r\n\r\n  if (this.hasGeodeticSurfaceNormals) {\r\n    vertexBuffer[bufferIndex++] = geodeticSurfaceNormal.x;\r\n    vertexBuffer[bufferIndex++] = geodeticSurfaceNormal.y;\r\n    vertexBuffer[bufferIndex++] = geodeticSurfaceNormal.z;\r\n  }\r\n\r\n  return bufferIndex;\r\n};\r\n\r\nconst scratchPosition = new Cartesian3();\r\nconst scratchGeodeticSurfaceNormal = new Cartesian3();\r\n\r\nTerrainEncoding.prototype.addGeodeticSurfaceNormals = function (\r\n  oldBuffer,\r\n  newBuffer,\r\n  ellipsoid\r\n) {\r\n  if (this.hasGeodeticSurfaceNormals) {\r\n    return;\r\n  }\r\n\r\n  const oldStride = this.stride;\r\n  const vertexCount = oldBuffer.length / oldStride;\r\n  this.hasGeodeticSurfaceNormals = true;\r\n  this._calculateStrideAndOffsets();\r\n  const newStride = this.stride;\r\n\r\n  for (let index = 0; index < vertexCount; index++) {\r\n    for (let offset = 0; offset < oldStride; offset++) {\r\n      const oldIndex = index * oldStride + offset;\r\n      const newIndex = index * newStride + offset;\r\n      newBuffer[newIndex] = oldBuffer[oldIndex];\r\n    }\r\n    const position = this.decodePosition(newBuffer, index, scratchPosition);\r\n    const geodeticSurfaceNormal = ellipsoid.geodeticSurfaceNormal(\r\n      position,\r\n      scratchGeodeticSurfaceNormal\r\n    );\r\n\r\n    const bufferIndex = index * newStride + this._offsetGeodeticSurfaceNormal;\r\n    newBuffer[bufferIndex] = geodeticSurfaceNormal.x;\r\n    newBuffer[bufferIndex + 1] = geodeticSurfaceNormal.y;\r\n    newBuffer[bufferIndex + 2] = geodeticSurfaceNormal.z;\r\n  }\r\n};\r\n\r\nTerrainEncoding.prototype.removeGeodeticSurfaceNormals = function (\r\n  oldBuffer,\r\n  newBuffer\r\n) {\r\n  if (!this.hasGeodeticSurfaceNormals) {\r\n    return;\r\n  }\r\n\r\n  const oldStride = this.stride;\r\n  const vertexCount = oldBuffer.length / oldStride;\r\n  this.hasGeodeticSurfaceNormals = false;\r\n  this._calculateStrideAndOffsets();\r\n  const newStride = this.stride;\r\n\r\n  for (let index = 0; index < vertexCount; index++) {\r\n    for (let offset = 0; offset < newStride; offset++) {\r\n      const oldIndex = index * oldStride + offset;\r\n      const newIndex = index * newStride + offset;\r\n      newBuffer[newIndex] = oldBuffer[oldIndex];\r\n    }\r\n  }\r\n};\r\n\r\nTerrainEncoding.prototype.decodePosition = function (buffer, index, result) {\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  index *= this.stride;\r\n\r\n  if (this.quantization === TerrainQuantization.BITS12) {\r\n    const xy = AttributeCompression.decompressTextureCoordinates(\r\n      buffer[index],\r\n      cartesian2Scratch\r\n    );\r\n    result.x = xy.x;\r\n    result.y = xy.y;\r\n\r\n    const zh = AttributeCompression.decompressTextureCoordinates(\r\n      buffer[index + 1],\r\n      cartesian2Scratch\r\n    );\r\n    result.z = zh.x;\r\n\r\n    return Matrix4.multiplyByPoint(this.fromScaledENU, result, result);\r\n  }\r\n\r\n  result.x = buffer[index];\r\n  result.y = buffer[index + 1];\r\n  result.z = buffer[index + 2];\r\n  return Cartesian3.add(result, this.center, result);\r\n};\r\n\r\nTerrainEncoding.prototype.getExaggeratedPosition = function (\r\n  buffer,\r\n  index,\r\n  result\r\n) {\r\n  result = this.decodePosition(buffer, index, result);\r\n\r\n  const exaggeration = this.exaggeration;\r\n  const exaggerationRelativeHeight = this.exaggerationRelativeHeight;\r\n  const hasExaggeration = exaggeration !== 1.0;\r\n  if (hasExaggeration && this.hasGeodeticSurfaceNormals) {\r\n    const geodeticSurfaceNormal = this.decodeGeodeticSurfaceNormal(\r\n      buffer,\r\n      index,\r\n      scratchGeodeticSurfaceNormal\r\n    );\r\n    const rawHeight = this.decodeHeight(buffer, index);\r\n    const heightDifference =\r\n      TerrainExaggeration.getHeight(\r\n        rawHeight,\r\n        exaggeration,\r\n        exaggerationRelativeHeight\r\n      ) - rawHeight;\r\n\r\n    // some math is unrolled for better performance\r\n    result.x += geodeticSurfaceNormal.x * heightDifference;\r\n    result.y += geodeticSurfaceNormal.y * heightDifference;\r\n    result.z += geodeticSurfaceNormal.z * heightDifference;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nTerrainEncoding.prototype.decodeTextureCoordinates = function (\r\n  buffer,\r\n  index,\r\n  result\r\n) {\r\n  if (!defined(result)) {\r\n    result = new Cartesian2();\r\n  }\r\n\r\n  index *= this.stride;\r\n\r\n  if (this.quantization === TerrainQuantization.BITS12) {\r\n    return AttributeCompression.decompressTextureCoordinates(\r\n      buffer[index + 2],\r\n      result\r\n    );\r\n  }\r\n\r\n  return Cartesian2.fromElements(buffer[index + 4], buffer[index + 5], result);\r\n};\r\n\r\nTerrainEncoding.prototype.decodeHeight = function (buffer, index) {\r\n  index *= this.stride;\r\n\r\n  if (this.quantization === TerrainQuantization.BITS12) {\r\n    const zh = AttributeCompression.decompressTextureCoordinates(\r\n      buffer[index + 1],\r\n      cartesian2Scratch\r\n    );\r\n    return (\r\n      zh.y * (this.maximumHeight - this.minimumHeight) + this.minimumHeight\r\n    );\r\n  }\r\n\r\n  return buffer[index + 3];\r\n};\r\n\r\nTerrainEncoding.prototype.decodeWebMercatorT = function (buffer, index) {\r\n  index *= this.stride;\r\n\r\n  if (this.quantization === TerrainQuantization.BITS12) {\r\n    return AttributeCompression.decompressTextureCoordinates(\r\n      buffer[index + 3],\r\n      cartesian2Scratch\r\n    ).x;\r\n  }\r\n\r\n  return buffer[index + 6];\r\n};\r\n\r\nTerrainEncoding.prototype.getOctEncodedNormal = function (\r\n  buffer,\r\n  index,\r\n  result\r\n) {\r\n  index = index * this.stride + this._offsetVertexNormal;\r\n\r\n  const temp = buffer[index] / 256.0;\r\n  const x = Math.floor(temp);\r\n  const y = (temp - x) * 256.0;\r\n\r\n  return Cartesian2.fromElements(x, y, result);\r\n};\r\n\r\nTerrainEncoding.prototype.decodeGeodeticSurfaceNormal = function (\r\n  buffer,\r\n  index,\r\n  result\r\n) {\r\n  index = index * this.stride + this._offsetGeodeticSurfaceNormal;\r\n\r\n  result.x = buffer[index];\r\n  result.y = buffer[index + 1];\r\n  result.z = buffer[index + 2];\r\n  return result;\r\n};\r\n\r\nTerrainEncoding.prototype._calculateStrideAndOffsets = function () {\r\n  let vertexStride = 0;\r\n\r\n  switch (this.quantization) {\r\n    case TerrainQuantization.BITS12:\r\n      vertexStride += 3;\r\n      break;\r\n    default:\r\n      vertexStride += 6;\r\n  }\r\n  if (this.hasWebMercatorT) {\r\n    vertexStride += 1;\r\n  }\r\n  if (this.hasVertexNormals) {\r\n    this._offsetVertexNormal = vertexStride;\r\n    vertexStride += 1;\r\n  }\r\n  if (this.hasGeodeticSurfaceNormals) {\r\n    this._offsetGeodeticSurfaceNormal = vertexStride;\r\n    vertexStride += 3;\r\n  }\r\n\r\n  this.stride = vertexStride;\r\n};\r\n\r\nconst attributesIndicesNone = {\r\n  position3DAndHeight: 0,\r\n  textureCoordAndEncodedNormals: 1,\r\n  geodeticSurfaceNormal: 2,\r\n};\r\nconst attributesIndicesBits12 = {\r\n  compressed0: 0,\r\n  compressed1: 1,\r\n  geodeticSurfaceNormal: 2,\r\n};\r\n\r\nTerrainEncoding.prototype.getAttributes = function (buffer) {\r\n  const datatype = ComponentDatatype.FLOAT;\r\n  const sizeInBytes = ComponentDatatype.getSizeInBytes(datatype);\r\n  const strideInBytes = this.stride * sizeInBytes;\r\n  let offsetInBytes = 0;\r\n\r\n  const attributes = [];\r\n  function addAttribute(index, componentsPerAttribute) {\r\n    attributes.push({\r\n      index: index,\r\n      vertexBuffer: buffer,\r\n      componentDatatype: datatype,\r\n      componentsPerAttribute: componentsPerAttribute,\r\n      offsetInBytes: offsetInBytes,\r\n      strideInBytes: strideInBytes,\r\n    });\r\n    offsetInBytes += componentsPerAttribute * sizeInBytes;\r\n  }\r\n\r\n  if (this.quantization === TerrainQuantization.NONE) {\r\n    addAttribute(attributesIndicesNone.position3DAndHeight, 4);\r\n\r\n    let componentsTexCoordAndNormals = 2;\r\n    componentsTexCoordAndNormals += this.hasWebMercatorT ? 1 : 0;\r\n    componentsTexCoordAndNormals += this.hasVertexNormals ? 1 : 0;\r\n    addAttribute(\r\n      attributesIndicesNone.textureCoordAndEncodedNormals,\r\n      componentsTexCoordAndNormals\r\n    );\r\n\r\n    if (this.hasGeodeticSurfaceNormals) {\r\n      addAttribute(attributesIndicesNone.geodeticSurfaceNormal, 3);\r\n    }\r\n  } else {\r\n    // When there is no webMercatorT or vertex normals, the attribute only needs 3 components: x/y, z/h, u/v.\r\n    // WebMercatorT and vertex normals each take up one component, so if only one of them is present the first\r\n    // attribute gets a 4th component. If both are present, we need an additional attribute that has 1 component.\r\n    const usingAttribute0Component4 =\r\n      this.hasWebMercatorT || this.hasVertexNormals;\r\n    const usingAttribute1Component1 =\r\n      this.hasWebMercatorT && this.hasVertexNormals;\r\n    addAttribute(\r\n      attributesIndicesBits12.compressed0,\r\n      usingAttribute0Component4 ? 4 : 3\r\n    );\r\n\r\n    if (usingAttribute1Component1) {\r\n      addAttribute(attributesIndicesBits12.compressed1, 1);\r\n    }\r\n\r\n    if (this.hasGeodeticSurfaceNormals) {\r\n      addAttribute(attributesIndicesBits12.geodeticSurfaceNormal, 3);\r\n    }\r\n  }\r\n\r\n  return attributes;\r\n};\r\n\r\nTerrainEncoding.prototype.getAttributeLocations = function () {\r\n  if (this.quantization === TerrainQuantization.NONE) {\r\n    return attributesIndicesNone;\r\n  }\r\n  return attributesIndicesBits12;\r\n};\r\n\r\nTerrainEncoding.clone = function (encoding, result) {\r\n  if (!defined(encoding)) {\r\n    return undefined;\r\n  }\r\n  if (!defined(result)) {\r\n    result = new TerrainEncoding();\r\n  }\r\n\r\n  result.quantization = encoding.quantization;\r\n  result.minimumHeight = encoding.minimumHeight;\r\n  result.maximumHeight = encoding.maximumHeight;\r\n  result.center = Cartesian3.clone(encoding.center);\r\n  result.toScaledENU = Matrix4.clone(encoding.toScaledENU);\r\n  result.fromScaledENU = Matrix4.clone(encoding.fromScaledENU);\r\n  result.matrix = Matrix4.clone(encoding.matrix);\r\n  result.hasVertexNormals = encoding.hasVertexNormals;\r\n  result.hasWebMercatorT = encoding.hasWebMercatorT;\r\n  result.hasGeodeticSurfaceNormals = encoding.hasGeodeticSurfaceNormals;\r\n  result.exaggeration = encoding.exaggeration;\r\n  result.exaggerationRelativeHeight = encoding.exaggerationRelativeHeight;\r\n\r\n  result._calculateStrideAndOffsets();\r\n\r\n  return result;\r\n};\r\nexport default TerrainEncoding;\r\n"],"names":["Check","Cartesian3","defined","Ellipsoid","Rectangle","BoundingSphere","defaultValue","Cartesian2","Matrix4","TerrainQuantization","CesiumMath","AttributeCompression","TerrainExaggeration","ComponentDatatype"],"mappings":"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"}