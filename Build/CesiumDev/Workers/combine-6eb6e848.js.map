{"version":3,"file":"combine-6eb6e848.js","sources":["../../../packages/engine/Source/Core/combine.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\n\r\n/**\r\n * Merges two objects, copying their properties onto a new combined object. When two objects have the same\r\n * property, the value of the property on the first object is used.  If either object is undefined,\r\n * it will be treated as an empty object.\r\n *\r\n * @example\r\n * const object1 = {\r\n *     propOne : 1,\r\n *     propTwo : {\r\n *         value1 : 10\r\n *     }\r\n * }\r\n * const object2 = {\r\n *     propTwo : 2\r\n * }\r\n * const final = Cesium.combine(object1, object2);\r\n *\r\n * // final === {\r\n * //     propOne : 1,\r\n * //     propTwo : {\r\n * //         value1 : 10\r\n * //     }\r\n * // }\r\n *\r\n * @param {Object} [object1] The first object to merge.\r\n * @param {Object} [object2] The second object to merge.\r\n * @param {Boolean} [deep=false] Perform a recursive merge.\r\n * @returns {Object} The combined object containing all properties from both objects.\r\n *\r\n * @function\r\n */\r\nfunction combine(object1, object2, deep) {\r\n  deep = defaultValue(deep, false);\r\n\r\n  const result = {};\r\n\r\n  const object1Defined = defined(object1);\r\n  const object2Defined = defined(object2);\r\n  let property;\r\n  let object1Value;\r\n  let object2Value;\r\n  if (object1Defined) {\r\n    for (property in object1) {\r\n      if (object1.hasOwnProperty(property)) {\r\n        object1Value = object1[property];\r\n        if (\r\n          object2Defined &&\r\n          deep &&\r\n          typeof object1Value === \"object\" &&\r\n          object2.hasOwnProperty(property)\r\n        ) {\r\n          object2Value = object2[property];\r\n          if (typeof object2Value === \"object\") {\r\n            result[property] = combine(object1Value, object2Value, deep);\r\n          } else {\r\n            result[property] = object1Value;\r\n          }\r\n        } else {\r\n          result[property] = object1Value;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (object2Defined) {\r\n    for (property in object2) {\r\n      if (\r\n        object2.hasOwnProperty(property) &&\r\n        !result.hasOwnProperty(property)\r\n      ) {\r\n        object2Value = object2[property];\r\n        result[property] = object2Value;\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\nexport default combine;\r\n"],"names":["defaultValue","defined"],"mappings":";;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAAS,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE;EACzC,EAAE,IAAI,GAAGA,yBAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACnC;EACA,EAAE,MAAM,MAAM,GAAG,EAAE,CAAC;AACpB;EACA,EAAE,MAAM,cAAc,GAAGC,oBAAO,CAAC,OAAO,CAAC,CAAC;EAC1C,EAAE,MAAM,cAAc,GAAGA,oBAAO,CAAC,OAAO,CAAC,CAAC;EAC1C,EAAE,IAAI,QAAQ,CAAC;EACf,EAAE,IAAI,YAAY,CAAC;EACnB,EAAE,IAAI,YAAY,CAAC;EACnB,EAAE,IAAI,cAAc,EAAE;EACtB,IAAI,KAAK,QAAQ,IAAI,OAAO,EAAE;EAC9B,MAAM,IAAI,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;EAC5C,QAAQ,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;EACzC,QAAQ;EACR,UAAU,cAAc;EACxB,UAAU,IAAI;EACd,UAAU,OAAO,YAAY,KAAK,QAAQ;EAC1C,UAAU,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC;EAC1C,UAAU;EACV,UAAU,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;EAC3C,UAAU,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;EAChD,YAAY,MAAM,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,YAAY,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;EACzE,WAAW,MAAM;EACjB,YAAY,MAAM,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;EAC5C,WAAW;EACX,SAAS,MAAM;EACf,UAAU,MAAM,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;EAC1C,SAAS;EACT,OAAO;EACP,KAAK;EACL,GAAG;EACH,EAAE,IAAI,cAAc,EAAE;EACtB,IAAI,KAAK,QAAQ,IAAI,OAAO,EAAE;EAC9B,MAAM;EACN,QAAQ,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC;EACxC,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC;EACxC,QAAQ;EACR,QAAQ,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;EACzC,QAAQ,MAAM,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;EACxC,OAAO;EACP,KAAK;EACL,GAAG;EACH,EAAE,OAAO,MAAM,CAAC;EAChB;;;;;;;;"}