{"version":3,"file":"WallGeometryLibrary-3562c094.js","sources":["../../../packages/engine/Source/Core/WallGeometryLibrary.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport defined from \"./defined.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PolylinePipeline from \"./PolylinePipeline.js\";\r\n\r\n/**\r\n * @private\r\n */\r\nconst WallGeometryLibrary = {};\r\n\r\nfunction latLonEquals(c0, c1) {\r\n  return (\r\n    CesiumMath.equalsEpsilon(c0.latitude, c1.latitude, CesiumMath.EPSILON10) &&\r\n    CesiumMath.equalsEpsilon(c0.longitude, c1.longitude, CesiumMath.EPSILON10)\r\n  );\r\n}\r\n\r\nconst scratchCartographic1 = new Cartographic();\r\nconst scratchCartographic2 = new Cartographic();\r\nfunction removeDuplicates(ellipsoid, positions, topHeights, bottomHeights) {\r\n  positions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n\r\n  const length = positions.length;\r\n  if (length < 2) {\r\n    return;\r\n  }\r\n\r\n  const hasBottomHeights = defined(bottomHeights);\r\n  const hasTopHeights = defined(topHeights);\r\n\r\n  const cleanedPositions = new Array(length);\r\n  const cleanedTopHeights = new Array(length);\r\n  const cleanedBottomHeights = new Array(length);\r\n\r\n  const v0 = positions[0];\r\n  cleanedPositions[0] = v0;\r\n\r\n  const c0 = ellipsoid.cartesianToCartographic(v0, scratchCartographic1);\r\n  if (hasTopHeights) {\r\n    c0.height = topHeights[0];\r\n  }\r\n\r\n  cleanedTopHeights[0] = c0.height;\r\n\r\n  if (hasBottomHeights) {\r\n    cleanedBottomHeights[0] = bottomHeights[0];\r\n  } else {\r\n    cleanedBottomHeights[0] = 0.0;\r\n  }\r\n\r\n  const startTopHeight = cleanedTopHeights[0];\r\n  const startBottomHeight = cleanedBottomHeights[0];\r\n  let hasAllSameHeights = startTopHeight === startBottomHeight;\r\n\r\n  let index = 1;\r\n  for (let i = 1; i < length; ++i) {\r\n    const v1 = positions[i];\r\n    const c1 = ellipsoid.cartesianToCartographic(v1, scratchCartographic2);\r\n    if (hasTopHeights) {\r\n      c1.height = topHeights[i];\r\n    }\r\n    hasAllSameHeights = hasAllSameHeights && c1.height === 0;\r\n\r\n    if (!latLonEquals(c0, c1)) {\r\n      cleanedPositions[index] = v1; // Shallow copy!\r\n      cleanedTopHeights[index] = c1.height;\r\n\r\n      if (hasBottomHeights) {\r\n        cleanedBottomHeights[index] = bottomHeights[i];\r\n      } else {\r\n        cleanedBottomHeights[index] = 0.0;\r\n      }\r\n      hasAllSameHeights =\r\n        hasAllSameHeights &&\r\n        cleanedTopHeights[index] === cleanedBottomHeights[index];\r\n\r\n      Cartographic.clone(c1, c0);\r\n      ++index;\r\n    } else if (c0.height < c1.height) {\r\n      // two adjacent positions are the same, so use whichever has the greater height\r\n      cleanedTopHeights[index - 1] = c1.height;\r\n    }\r\n  }\r\n\r\n  if (hasAllSameHeights || index < 2) {\r\n    return;\r\n  }\r\n\r\n  cleanedPositions.length = index;\r\n  cleanedTopHeights.length = index;\r\n  cleanedBottomHeights.length = index;\r\n\r\n  return {\r\n    positions: cleanedPositions,\r\n    topHeights: cleanedTopHeights,\r\n    bottomHeights: cleanedBottomHeights,\r\n  };\r\n}\r\n\r\nconst positionsArrayScratch = new Array(2);\r\nconst heightsArrayScratch = new Array(2);\r\nconst generateArcOptionsScratch = {\r\n  positions: undefined,\r\n  height: undefined,\r\n  granularity: undefined,\r\n  ellipsoid: undefined,\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nWallGeometryLibrary.computePositions = function (\r\n  ellipsoid,\r\n  wallPositions,\r\n  maximumHeights,\r\n  minimumHeights,\r\n  granularity,\r\n  duplicateCorners\r\n) {\r\n  const o = removeDuplicates(\r\n    ellipsoid,\r\n    wallPositions,\r\n    maximumHeights,\r\n    minimumHeights\r\n  );\r\n\r\n  if (!defined(o)) {\r\n    return;\r\n  }\r\n\r\n  wallPositions = o.positions;\r\n  maximumHeights = o.topHeights;\r\n  minimumHeights = o.bottomHeights;\r\n\r\n  const length = wallPositions.length;\r\n  const numCorners = length - 2;\r\n  let topPositions;\r\n  let bottomPositions;\r\n\r\n  const minDistance = CesiumMath.chordLength(\r\n    granularity,\r\n    ellipsoid.maximumRadius\r\n  );\r\n\r\n  const generateArcOptions = generateArcOptionsScratch;\r\n  generateArcOptions.minDistance = minDistance;\r\n  generateArcOptions.ellipsoid = ellipsoid;\r\n\r\n  if (duplicateCorners) {\r\n    let count = 0;\r\n    let i;\r\n\r\n    for (i = 0; i < length - 1; i++) {\r\n      count +=\r\n        PolylinePipeline.numberOfPoints(\r\n          wallPositions[i],\r\n          wallPositions[i + 1],\r\n          minDistance\r\n        ) + 1;\r\n    }\r\n\r\n    topPositions = new Float64Array(count * 3);\r\n    bottomPositions = new Float64Array(count * 3);\r\n\r\n    const generateArcPositions = positionsArrayScratch;\r\n    const generateArcHeights = heightsArrayScratch;\r\n    generateArcOptions.positions = generateArcPositions;\r\n    generateArcOptions.height = generateArcHeights;\r\n\r\n    let offset = 0;\r\n    for (i = 0; i < length - 1; i++) {\r\n      generateArcPositions[0] = wallPositions[i];\r\n      generateArcPositions[1] = wallPositions[i + 1];\r\n\r\n      generateArcHeights[0] = maximumHeights[i];\r\n      generateArcHeights[1] = maximumHeights[i + 1];\r\n\r\n      const pos = PolylinePipeline.generateArc(generateArcOptions);\r\n      topPositions.set(pos, offset);\r\n\r\n      generateArcHeights[0] = minimumHeights[i];\r\n      generateArcHeights[1] = minimumHeights[i + 1];\r\n\r\n      bottomPositions.set(\r\n        PolylinePipeline.generateArc(generateArcOptions),\r\n        offset\r\n      );\r\n\r\n      offset += pos.length;\r\n    }\r\n  } else {\r\n    generateArcOptions.positions = wallPositions;\r\n    generateArcOptions.height = maximumHeights;\r\n    topPositions = new Float64Array(\r\n      PolylinePipeline.generateArc(generateArcOptions)\r\n    );\r\n\r\n    generateArcOptions.height = minimumHeights;\r\n    bottomPositions = new Float64Array(\r\n      PolylinePipeline.generateArc(generateArcOptions)\r\n    );\r\n  }\r\n\r\n  return {\r\n    bottomPositions: bottomPositions,\r\n    topPositions: topPositions,\r\n    numCorners: numCorners,\r\n  };\r\n};\r\nexport default WallGeometryLibrary;\r\n"],"names":["CesiumMath","Cartographic","arrayRemoveDuplicates","Cartesian3","defined","PolylinePipeline"],"mappings":"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"}