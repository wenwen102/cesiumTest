{"version":3,"file":"createPolylineVolumeGeometry.js","sources":["../../../packages/engine/Source/Core/PolylineVolumeGeometry.js","../../../packages/engine/Source/WorkersES6/createPolylineVolumeGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingRectangle from \"./BoundingRectangle.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport CornerType from \"./CornerType.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryPipeline from \"./GeometryPipeline.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport oneTimeWarning from \"./oneTimeWarning.js\";\r\nimport PolygonPipeline from \"./PolygonPipeline.js\";\r\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\nimport WindingOrder from \"./WindingOrder.js\";\r\n\r\nfunction computeAttributes(\r\n  combinedPositions,\r\n  shape,\r\n  boundingRectangle,\r\n  vertexFormat\r\n) {\r\n  const attributes = new GeometryAttributes();\r\n  if (vertexFormat.position) {\r\n    attributes.position = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.DOUBLE,\r\n      componentsPerAttribute: 3,\r\n      values: combinedPositions,\r\n    });\r\n  }\r\n  const shapeLength = shape.length;\r\n  const vertexCount = combinedPositions.length / 3;\r\n  const length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\r\n  const firstEndIndices = PolygonPipeline.triangulate(shape);\r\n\r\n  const indicesCount =\r\n    (length - 1) * shapeLength * 6 + firstEndIndices.length * 2;\r\n  const indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\r\n  let i, j;\r\n  let ll, ul, ur, lr;\r\n  const offset = shapeLength * 2;\r\n  let index = 0;\r\n  for (i = 0; i < length - 1; i++) {\r\n    for (j = 0; j < shapeLength - 1; j++) {\r\n      ll = j * 2 + i * shapeLength * 2;\r\n      lr = ll + offset;\r\n      ul = ll + 1;\r\n      ur = ul + offset;\r\n\r\n      indices[index++] = ul;\r\n      indices[index++] = ll;\r\n      indices[index++] = ur;\r\n      indices[index++] = ur;\r\n      indices[index++] = ll;\r\n      indices[index++] = lr;\r\n    }\r\n    ll = shapeLength * 2 - 2 + i * shapeLength * 2;\r\n    ul = ll + 1;\r\n    ur = ul + offset;\r\n    lr = ll + offset;\r\n\r\n    indices[index++] = ul;\r\n    indices[index++] = ll;\r\n    indices[index++] = ur;\r\n    indices[index++] = ur;\r\n    indices[index++] = ll;\r\n    indices[index++] = lr;\r\n  }\r\n\r\n  if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) {\r\n    // st required for tangent/bitangent calculation\r\n    const st = new Float32Array(vertexCount * 2);\r\n    const lengthSt = 1 / (length - 1);\r\n    const heightSt = 1 / boundingRectangle.height;\r\n    const heightOffset = boundingRectangle.height / 2;\r\n    let s, t;\r\n    let stindex = 0;\r\n    for (i = 0; i < length; i++) {\r\n      s = i * lengthSt;\r\n      t = heightSt * (shape[0].y + heightOffset);\r\n      st[stindex++] = s;\r\n      st[stindex++] = t;\r\n      for (j = 1; j < shapeLength; j++) {\r\n        t = heightSt * (shape[j].y + heightOffset);\r\n        st[stindex++] = s;\r\n        st[stindex++] = t;\r\n        st[stindex++] = s;\r\n        st[stindex++] = t;\r\n      }\r\n      t = heightSt * (shape[0].y + heightOffset);\r\n      st[stindex++] = s;\r\n      st[stindex++] = t;\r\n    }\r\n    for (j = 0; j < shapeLength; j++) {\r\n      s = 0;\r\n      t = heightSt * (shape[j].y + heightOffset);\r\n      st[stindex++] = s;\r\n      st[stindex++] = t;\r\n    }\r\n    for (j = 0; j < shapeLength; j++) {\r\n      s = (length - 1) * lengthSt;\r\n      t = heightSt * (shape[j].y + heightOffset);\r\n      st[stindex++] = s;\r\n      st[stindex++] = t;\r\n    }\r\n\r\n    attributes.st = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: new Float32Array(st),\r\n    });\r\n  }\r\n\r\n  const endOffset = vertexCount - shapeLength * 2;\r\n  for (i = 0; i < firstEndIndices.length; i += 3) {\r\n    const v0 = firstEndIndices[i] + endOffset;\r\n    const v1 = firstEndIndices[i + 1] + endOffset;\r\n    const v2 = firstEndIndices[i + 2] + endOffset;\r\n\r\n    indices[index++] = v0;\r\n    indices[index++] = v1;\r\n    indices[index++] = v2;\r\n    indices[index++] = v2 + shapeLength;\r\n    indices[index++] = v1 + shapeLength;\r\n    indices[index++] = v0 + shapeLength;\r\n  }\r\n\r\n  let geometry = new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    boundingSphere: BoundingSphere.fromVertices(combinedPositions),\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n  });\r\n\r\n  if (vertexFormat.normal) {\r\n    geometry = GeometryPipeline.computeNormal(geometry);\r\n  }\r\n\r\n  if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n    try {\r\n      geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\r\n    } catch (e) {\r\n      oneTimeWarning(\r\n        \"polyline-volume-tangent-bitangent\",\r\n        \"Unable to compute tangents and bitangents for polyline volume geometry\"\r\n      );\r\n      //TODO https://github.com/CesiumGS/cesium/issues/3609\r\n    }\r\n\r\n    if (!vertexFormat.tangent) {\r\n      geometry.attributes.tangent = undefined;\r\n    }\r\n    if (!vertexFormat.bitangent) {\r\n      geometry.attributes.bitangent = undefined;\r\n    }\r\n    if (!vertexFormat.st) {\r\n      geometry.attributes.st = undefined;\r\n    }\r\n  }\r\n\r\n  return geometry;\r\n}\r\n\r\n/**\r\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\r\n *\r\n * @alias PolylineVolumeGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesian3} positions that define the center of the polyline volume.\r\n * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n *\r\n * @see PolylineVolumeGeometry#createGeometry\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\r\n *\r\n * @example\r\n * function computeCircle(radius) {\r\n *   const positions = [];\r\n *   for (let i = 0; i < 360; i++) {\r\n *     const radians = Cesium.Math.toRadians(i);\r\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\r\n *   }\r\n *   return positions;\r\n * }\r\n *\r\n * const volume = new Cesium.PolylineVolumeGeometry({\r\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\r\n *     -72.0, 40.0,\r\n *     -70.0, 35.0\r\n *   ]),\r\n *   shapePositions : computeCircle(100000.0)\r\n * });\r\n */\r\nfunction PolylineVolumeGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const positions = options.polylinePositions;\r\n  const shape = options.shapePositions;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions)) {\r\n    throw new DeveloperError(\"options.polylinePositions is required.\");\r\n  }\r\n  if (!defined(shape)) {\r\n    throw new DeveloperError(\"options.shapePositions is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  this._positions = positions;\r\n  this._shape = shape;\r\n  this._ellipsoid = Ellipsoid.clone(\r\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n  );\r\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n  this._vertexFormat = VertexFormat.clone(\r\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\r\n  );\r\n  this._granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  this._workerName = \"createPolylineVolumeGeometry\";\r\n\r\n  let numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PolylineVolumeGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPolylineVolumeGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  let i;\r\n\r\n  const positions = value._positions;\r\n  let length = positions.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    Cartesian3.pack(positions[i], array, startingIndex);\r\n  }\r\n\r\n  const shape = value._shape;\r\n  length = shape.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n    Cartesian2.pack(shape[i], array, startingIndex);\r\n  }\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._cornerType;\r\n  array[startingIndex] = value._granularity;\r\n\r\n  return array;\r\n};\r\n\r\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nconst scratchVertexFormat = new VertexFormat();\r\nconst scratchOptions = {\r\n  polylinePositions: undefined,\r\n  shapePositions: undefined,\r\n  ellipsoid: scratchEllipsoid,\r\n  vertexFormat: scratchVertexFormat,\r\n  cornerType: undefined,\r\n  granularity: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\r\n * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\r\n */\r\nPolylineVolumeGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  let i;\r\n\r\n  let length = array[startingIndex++];\r\n  const positions = new Array(length);\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    positions[i] = Cartesian3.unpack(array, startingIndex);\r\n  }\r\n\r\n  length = array[startingIndex++];\r\n  const shape = new Array(length);\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n    shape[i] = Cartesian2.unpack(array, startingIndex);\r\n  }\r\n\r\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  const vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  const cornerType = array[startingIndex++];\r\n  const granularity = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.polylinePositions = positions;\r\n    scratchOptions.shapePositions = shape;\r\n    scratchOptions.cornerType = cornerType;\r\n    scratchOptions.granularity = granularity;\r\n    return new PolylineVolumeGeometry(scratchOptions);\r\n  }\r\n\r\n  result._positions = positions;\r\n  result._shape = shape;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._cornerType = cornerType;\r\n  result._granularity = granularity;\r\n\r\n  return result;\r\n};\r\n\r\nconst brScratch = new BoundingRectangle();\r\n\r\n/**\r\n * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPolylineVolumeGeometry.createGeometry = function (polylineVolumeGeometry) {\r\n  const positions = polylineVolumeGeometry._positions;\r\n  const cleanPositions = arrayRemoveDuplicates(\r\n    positions,\r\n    Cartesian3.equalsEpsilon\r\n  );\r\n  let shape2D = polylineVolumeGeometry._shape;\r\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\r\n\r\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\r\n    return undefined;\r\n  }\r\n\r\n  if (\r\n    PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE\r\n  ) {\r\n    shape2D.reverse();\r\n  }\r\n  const boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\r\n\r\n  const computedPositions = PolylineVolumeGeometryLibrary.computePositions(\r\n    cleanPositions,\r\n    shape2D,\r\n    boundingRectangle,\r\n    polylineVolumeGeometry,\r\n    true\r\n  );\r\n  return computeAttributes(\r\n    computedPositions,\r\n    shape2D,\r\n    boundingRectangle,\r\n    polylineVolumeGeometry._vertexFormat\r\n  );\r\n};\r\nexport default PolylineVolumeGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport PolylineVolumeGeometry from \"../Core/PolylineVolumeGeometry.js\";\r\n\r\nfunction createPolylineVolumeGeometry(polylineVolumeGeometry, offset) {\r\n  if (defined(offset)) {\r\n    polylineVolumeGeometry = PolylineVolumeGeometry.unpack(\r\n      polylineVolumeGeometry,\r\n      offset\r\n    );\r\n  }\r\n  polylineVolumeGeometry._ellipsoid = Ellipsoid.clone(\r\n    polylineVolumeGeometry._ellipsoid\r\n  );\r\n  return PolylineVolumeGeometry.createGeometry(polylineVolumeGeometry);\r\n}\r\nexport default createPolylineVolumeGeometry;\r\n"],"names":["GeometryAttributes","GeometryAttribute","ComponentDatatype","PolygonPipeline","IndexDatatype","Geometry","BoundingSphere","PrimitiveType","GeometryPipeline","oneTimeWarning","defaultValue","defined","DeveloperError","Ellipsoid","CornerType","VertexFormat","CesiumMath","Cartesian3","Cartesian2","BoundingRectangle","arrayRemoveDuplicates","PolylineVolumeGeometryLibrary","WindingOrder"],"mappings":"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"}